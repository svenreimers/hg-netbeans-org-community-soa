/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */

/*
 * InboundMessagePanel.java
 *
 * Created on 12 May, 2009, 11:29:15 AM
 */
package org.netbeans.modules.wsdlextensions.email.editor.panels;

import java.awt.Cursor;
import java.awt.Dialog;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import org.netbeans.modules.wsdlextensions.email.editor.EmailError;
import org.netbeans.modules.xml.wsdl.bindingsupport.spi.ExtensibilityElementConfigurationEditorComponent;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.awt.Mnemonics;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;

/**
 *
 * @author gauthami
 */
public class InboundMessagePanel extends javax.swing.JPanel {

    private ReceiverEmailConnection emailConnection = null;
    private boolean emailConnectionPropertiesChanged;
    private String mTemplateType = "";
    private String protocol;

    /** Creates new form InboundMessagePanel */
    public InboundMessagePanel() {
        Image img = ImageUtilities.loadImage("org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png");
        mCASAImg = new ImageIcon(img);
        initComponents();
        populateView();
        initDirectoryChooser();
        initListeners();
    }

    public Icon getApplicationVariableImageIcon() {
        return mCASAImg;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mDirectoryChooser = new javax.swing.JFileChooser();
        mHandleNMAttComboBox = new javax.swing.JComboBox();
        mHandleNMAttLabel = new javax.swing.JLabel();
        mEmailConnectionHeaderLabel = new javax.swing.JLabel();
        mEmailConnectionSeparator = new javax.swing.JSeparator();
        mEmailServerIconLabel = new javax.swing.JLabel();
        mEmailServerLabel = new javax.swing.JLabel();
        mEmailServerTextField = new javax.swing.JTextField();
        mPortIconLabel = new javax.swing.JLabel();
        mPortLabel = new javax.swing.JLabel();
        mPortTextField = new javax.swing.JTextField();
        mUserNameIconLabel = new javax.swing.JLabel();
        mUserNameLabel = new javax.swing.JLabel();
        mUserNameTextField = new javax.swing.JTextField();
        mPasswordIconLabel = new javax.swing.JLabel();
        mPasswordLabel = new javax.swing.JLabel();
        mPasswordField = new javax.swing.JPasswordField();
        mUseSSLIconLabel = new javax.swing.JLabel();
        mUseSSLLabel = new javax.swing.JLabel();
        mUseSSL = new javax.swing.JCheckBox();
        mMailFolderIconLabel = new javax.swing.JLabel();
        mMailFolderLabel = new javax.swing.JLabel();
        mMailFolderTextField = new javax.swing.JTextField();
        mMaxMsgCountIconLabel = new javax.swing.JLabel();
        mMaxMessageCountLabel = new javax.swing.JLabel();
        mMaxMessageCountTextField = new javax.swing.JTextField();
        mMsgAckModeIconLabel = new javax.swing.JLabel();
        mMessageAckModeLabel = new javax.swing.JLabel();
        mMessageAckModeComboBox = new javax.swing.JComboBox();
        mMsgAckOpIconLabel = new javax.swing.JLabel();
        mMessageAckOperationLabel = new javax.swing.JLabel();
        mMessageAckOperationComboBox = new javax.swing.JComboBox();
        mPollIntervalIconLabel = new javax.swing.JLabel();
        mPollingIntervalLabel = new javax.swing.JLabel();
        mPollingIntervalTextField = new javax.swing.JTextField();
        mEmailPayloadSeparator = new javax.swing.JSeparator();
        mEmailPayloadHeaderLabel = new javax.swing.JLabel();
        mSaveAttDirIconLabel = new javax.swing.JLabel();
        mSaveAttDirLabel = new javax.swing.JLabel();
        mSaveAttDirTextField = new javax.swing.JTextField();
        mBrowseButton = new javax.swing.JButton();
        mDescriptionPanel = new javax.swing.JPanel();
        mDescriptionDisplayScrollPane = new javax.swing.JScrollPane();
        mDescriptionDisplayTextPane = new javax.swing.JTextPane();
        mFetchFoldersButton = new javax.swing.JButton();
        mTestConnectionButton = new javax.swing.JButton();

        mDirectoryChooser.setName("mDirectoryChooser"); // NOI18N

        mHandleNMAttComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "true", "false" }));
        mHandleNMAttComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mHandleNMAttComboBox.toolTipText")); // NOI18N
        mHandleNMAttComboBox.setName("mHandleNMAttComboBox"); // NOI18N
        mHandleNMAttComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mHandleNMAttComboBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mHandleNMAttComboBoxFocusLost(evt);
            }
        });
        mHandleNMAttComboBox.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mHandleNMAttLabel.text")); // NOI18N
        mHandleNMAttComboBox.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mHandleNMAttComboBox.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mHandleNMAttLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mHandleNMAttLabel.text")); // NOI18N
        mHandleNMAttLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mHandleNMAttComboBox.toolTipText")); // NOI18N
        mHandleNMAttLabel.setName("mHandleNMAttLabel"); // NOI18N
        mHandleNMAttLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mHandleNMAttLabel.AccessibleContext.accessibleName_1")); // NOI18N
        mHandleNMAttLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mHandleNMAttLabel.AccessibleContext.accessibleDescription_1")); // NOI18N

        setName("Form"); // NOI18N

        mEmailConnectionHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        org.openide.awt.Mnemonics.setLocalizedText(mEmailConnectionHeaderLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailConnectionHeaderLabel.text")); // NOI18N
        mEmailConnectionHeaderLabel.setName("mEmailConnectionHeaderLabel"); // NOI18N

        mEmailConnectionSeparator.setName("mEmailConnectionSeparator"); // NOI18N

        mEmailServerIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mEmailServerIconLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailServerIconLabel.text")); // NOI18N
        mEmailServerIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mEmailServerIconLabel.setName("mEmailServerIconLabel"); // NOI18N

        mEmailServerLabel.setLabelFor(mEmailServerTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mEmailServerLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailServerLabel.text")); // NOI18N
        mEmailServerLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailServerTextField.toolTipText")); // NOI18N
        mEmailServerLabel.setName("mEmailServerLabel"); // NOI18N

        mEmailServerTextField.setText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailServerTextField.text")); // NOI18N
        mEmailServerTextField.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailServerTextField.toolTipText")); // NOI18N
        mEmailServerTextField.setName("mEmailServerTextField"); // NOI18N
        mEmailServerTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mEmailServerTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mEmailServerTextFieldFocusLost(evt);
            }
        });

        mPortIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mPortIconLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPortIconLabel.text")); // NOI18N
        mPortIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mPortIconLabel.setName("mPortIconLabel"); // NOI18N

        mPortLabel.setLabelFor(mPortTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mPortLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPortLabel.text")); // NOI18N
        mPortLabel.setName("mPortLabel"); // NOI18N

        mPortTextField.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPortTextField.toolTipText")); // NOI18N
        mPortTextField.setName("mPortTextField"); // NOI18N
        mPortTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mPortTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mPortTextFieldFocusLost(evt);
            }
        });

        mUserNameIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        mUserNameIconLabel.setLabelFor(mUserNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mUserNameIconLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUserNameIconLabel.text")); // NOI18N
        mUserNameIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mUserNameIconLabel.setName("mUserNameIconLabel"); // NOI18N

        mUserNameLabel.setLabelFor(mUserNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mUserNameLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUserNameLabel.text")); // NOI18N
        mUserNameLabel.setName("mUserNameLabel"); // NOI18N

        mUserNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUserNameTextField.toolTipText")); // NOI18N
        mUserNameTextField.setName("mUserNameTextField"); // NOI18N
        mUserNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mUserNameTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mUserNameTextFieldFocusLost(evt);
            }
        });

        mPasswordIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mPasswordIconLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPasswordIconLabel.text")); // NOI18N
        mPasswordIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mPasswordIconLabel.setName("mPasswordIconLabel"); // NOI18N

        mPasswordLabel.setLabelFor(mPasswordField);
        org.openide.awt.Mnemonics.setLocalizedText(mPasswordLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPasswordLabel.text")); // NOI18N
        mPasswordLabel.setName("mPasswordLabel"); // NOI18N

        mPasswordField.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPasswordField.toolTipText")); // NOI18N
        mPasswordField.setName("mPasswordField"); // NOI18N
        mPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mPasswordFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mPasswordFieldFocusLost(evt);
            }
        });

        mUseSSLIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mUseSSLIconLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUseSSLIconLabel.text")); // NOI18N
        mUseSSLIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mUseSSLIconLabel.setName("mUseSSLIconLabel"); // NOI18N

        mUseSSLLabel.setLabelFor(mUseSSL);
        org.openide.awt.Mnemonics.setLocalizedText(mUseSSLLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUseSSLLabel.text")); // NOI18N
        mUseSSLLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUseSSLLabel.toolTipText")); // NOI18N
        mUseSSLLabel.setName("mUseSSLLabel"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mUseSSL, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUseSSL.text")); // NOI18N
        mUseSSL.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUseSSL.toolTipText")); // NOI18N
        mUseSSL.setName("mUseSSL"); // NOI18N
        mUseSSL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mUseSSLFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mUseSSLFocusLost(evt);
            }
        });

        mMailFolderIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mMailFolderIconLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMailFolderIconLabel.text")); // NOI18N
        mMailFolderIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mMailFolderIconLabel.setName("mMailFolderIconLabel"); // NOI18N

        mMailFolderLabel.setLabelFor(mMailFolderTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mMailFolderLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMailFolderLabel.text")); // NOI18N
        mMailFolderLabel.setName("mMailFolderLabel"); // NOI18N

        mMailFolderTextField.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMailFolderTextField.toolTipText")); // NOI18N
        mMailFolderTextField.setName("mMailFolderTextField"); // NOI18N
        mMailFolderTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mMailFolderTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mMailFolderTextFieldFocusLost(evt);
            }
        });

        mMaxMsgCountIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mMaxMsgCountIconLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMaxMsgCountIconLabel.text")); // NOI18N
        mMaxMsgCountIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mMaxMsgCountIconLabel.setName("mMaxMsgCountIconLabel"); // NOI18N

        mMaxMessageCountLabel.setLabelFor(mMaxMessageCountTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mMaxMessageCountLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMaxMessageCountLabel.text")); // NOI18N
        mMaxMessageCountLabel.setName("mMaxMessageCountLabel"); // NOI18N

        mMaxMessageCountTextField.setColumns(10);
        mMaxMessageCountTextField.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMaxMessageCountTextField.toolTipText")); // NOI18N
        mMaxMessageCountTextField.setName("mMaxMessageCountTextField"); // NOI18N
        mMaxMessageCountTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mMaxMessageCountTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mMaxMessageCountTextFieldFocusLost(evt);
            }
        });

        mMsgAckModeIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mMsgAckModeIconLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMsgAckModeIconLabel.text")); // NOI18N
        mMsgAckModeIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mMsgAckModeIconLabel.setName("mMsgAckModeIconLabel"); // NOI18N

        mMessageAckModeLabel.setLabelFor(mMessageAckModeComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(mMessageAckModeLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckModeLabel.text")); // NOI18N
        mMessageAckModeLabel.setName("mMessageAckModeLabel"); // NOI18N

        mMessageAckModeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "automatic", "manual" }));
        mMessageAckModeComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckModeComboBox.toolTipText")); // NOI18N
        mMessageAckModeComboBox.setName("mMessageAckModeComboBox"); // NOI18N
        mMessageAckModeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mMessageAckModeComboBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mMessageAckModeComboBoxFocusLost(evt);
            }
        });

        mMsgAckOpIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mMsgAckOpIconLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMsgAckOpIconLabel.text")); // NOI18N
        mMsgAckOpIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mMsgAckOpIconLabel.setName("mMsgAckOpIconLabel"); // NOI18N

        mMessageAckOperationLabel.setLabelFor(mMessageAckOperationComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(mMessageAckOperationLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckOperationLabel.text")); // NOI18N
        mMessageAckOperationLabel.setName("mMessageAckOperationLabel"); // NOI18N

        mMessageAckOperationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "markAsRead", "delete" }));
        mMessageAckOperationComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckOperationComboBox.toolTipText")); // NOI18N
        mMessageAckOperationComboBox.setName("mMessageAckOperationComboBox"); // NOI18N
        mMessageAckOperationComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mMessageAckOperationComboBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mMessageAckOperationComboBoxFocusLost(evt);
            }
        });

        mPollIntervalIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mPollIntervalIconLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPollIntervalIconLabel.text")); // NOI18N
        mPollIntervalIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mPollIntervalIconLabel.setName("mPollIntervalIconLabel"); // NOI18N

        mPollingIntervalLabel.setLabelFor(mPollingIntervalTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mPollingIntervalLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPollingIntervalLabel.text")); // NOI18N
        mPollingIntervalLabel.setName("mPollingIntervalLabel"); // NOI18N

        mPollingIntervalTextField.setColumns(10);
        mPollingIntervalTextField.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPollingIntervalTextField.toolTipText")); // NOI18N
        mPollingIntervalTextField.setName("mPollingIntervalTextField"); // NOI18N
        mPollingIntervalTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mPollingIntervalTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mPollingIntervalTextFieldFocusLost(evt);
            }
        });

        mEmailPayloadSeparator.setName("mEmailPayloadSeparator"); // NOI18N

        mEmailPayloadHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        org.openide.awt.Mnemonics.setLocalizedText(mEmailPayloadHeaderLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailPayloadHeaderLabel.text")); // NOI18N
        mEmailPayloadHeaderLabel.setName("mEmailPayloadHeaderLabel"); // NOI18N

        mSaveAttDirIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mSaveAttDirIconLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mSaveAttDirIconLabel.text")); // NOI18N
        mSaveAttDirIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mSaveAttDirIconLabel.setName("mSaveAttDirIconLabel"); // NOI18N

        mSaveAttDirLabel.setLabelFor(mSaveAttDirTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mSaveAttDirLabel, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mSaveAttDirLabel.text")); // NOI18N
        mSaveAttDirLabel.setName("mSaveAttDirLabel"); // NOI18N

        mSaveAttDirTextField.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mSaveAttDirTextField.toolTipText")); // NOI18N
        mSaveAttDirTextField.setName("mSaveAttDirTextField"); // NOI18N
        mSaveAttDirTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mSaveAttDirTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mSaveAttDirTextFieldFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mBrowseButton, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mBrowseButton.text")); // NOI18N
        mBrowseButton.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mBrowseButton.toolTipText")); // NOI18N
        mBrowseButton.setName("mBrowseButton"); // NOI18N

        mDescriptionPanel.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "mDescriptionPanel.toolTipText")); // NOI18N
        mDescriptionPanel.setName("mDescriptionPanel"); // NOI18N

        mDescriptionDisplayScrollPane.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "mDescriptionPanel.mDescriptionDisplayScrollPane.toolTipText")); // NOI18N
        mDescriptionDisplayScrollPane.setName("mDescriptionDisplayScrollPane"); // NOI18N

        mDescriptionDisplayTextPane.setBackground(getBackground());
        mDescriptionDisplayTextPane.setEditable(false);
        mDescriptionDisplayTextPane.setFocusable(false);
        mDescriptionDisplayTextPane.setName("mDescriptionDisplayTextPane"); // NOI18N
        mDescriptionDisplayScrollPane.setViewportView(mDescriptionDisplayTextPane);

        org.jdesktop.layout.GroupLayout mDescriptionPanelLayout = new org.jdesktop.layout.GroupLayout(mDescriptionPanel);
        mDescriptionPanel.setLayout(mDescriptionPanelLayout);
        mDescriptionPanelLayout.setHorizontalGroup(
            mDescriptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mDescriptionDisplayScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
        );
        mDescriptionPanelLayout.setVerticalGroup(
            mDescriptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mDescriptionDisplayScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
        );

        mDescriptionDisplayScrollPane.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "mDescriptionPanel.mDescriptionDisplayScrollPane.toolTipText")); // NOI18N
        mDescriptionDisplayScrollPane.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "mDescriptionPanel.mDescriptionDisplayScrollPane.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mFetchFoldersButton, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mFetchFoldersButton.text")); // NOI18N
        mFetchFoldersButton.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mFetchFoldersButton.toolTipText")); // NOI18N
        mFetchFoldersButton.setEnabled(false);
        mFetchFoldersButton.setName("mFetchFoldersButton"); // NOI18N
        mFetchFoldersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mFetchFoldersButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mTestConnectionButton, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mTestConnectionButton.text")); // NOI18N
        mTestConnectionButton.setToolTipText(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mTestConnectionButton.toolTipText")); // NOI18N
        mTestConnectionButton.setName("mTestConnectionButton"); // NOI18N
        mTestConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mTestConnectionButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(mEmailConnectionHeaderLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mEmailConnectionSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(mEmailServerIconLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(mEmailServerLabel))
                                    .add(layout.createSequentialGroup()
                                        .add(mPortIconLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(mPortLabel))
                                    .add(layout.createSequentialGroup()
                                        .add(mUserNameIconLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(mUserNameLabel))
                                    .add(layout.createSequentialGroup()
                                        .add(mPasswordIconLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(mPasswordLabel))
                                    .add(layout.createSequentialGroup()
                                        .add(mUseSSLIconLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(mUseSSLLabel)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(mUserNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                                    .add(mPortTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                                    .add(mPasswordField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                                    .add(mEmailServerTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)))))
                    .add(layout.createSequentialGroup()
                        .add(111, 111, 111)
                        .add(mUseSSL))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(mSaveAttDirIconLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mSaveAttDirLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(mSaveAttDirTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mBrowseButton)
                                .add(4, 4, 4))
                            .add(layout.createSequentialGroup()
                                .add(mEmailPayloadHeaderLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mEmailPayloadSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
                            .add(mDescriptionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(layout.createSequentialGroup()
                                                .add(mMailFolderIconLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(mMailFolderLabel))
                                            .add(layout.createSequentialGroup()
                                                .add(mMaxMsgCountIconLabel)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(mMaxMessageCountLabel))
                                            .add(layout.createSequentialGroup()
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                    .add(mMsgAckOpIconLabel)
                                                    .add(mMsgAckModeIconLabel))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(mMessageAckOperationLabel)
                                                    .add(mMessageAckModeLabel))))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(mMessageAckOperationComboBox, 0, 114, Short.MAX_VALUE)
                                            .add(mMessageAckModeComboBox, 0, 114, Short.MAX_VALUE)
                                            .add(mMaxMessageCountTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)))
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                        .add(mPollIntervalIconLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(mPollingIntervalLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, mMailFolderTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                            .add(mTestConnectionButton)
                                            .add(mPollingIntervalTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mFetchFoldersButton)
                                .add(59, 59, 59)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(mEmailConnectionHeaderLabel))
                    .add(layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(mEmailConnectionSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mEmailServerIconLabel)
                    .add(mEmailServerLabel)
                    .add(mEmailServerTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(mPortTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(mPortLabel))
                    .add(mPortIconLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(mUserNameIconLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(mPasswordIconLabel))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mUserNameLabel)
                            .add(mUserNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(mPasswordLabel))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(mUseSSLLabel)
                        .add(mUseSSL))
                    .add(mUseSSLIconLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(mTestConnectionButton)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(mPollingIntervalLabel)
                        .add(mPollingIntervalTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(mPollIntervalIconLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(mMailFolderIconLabel)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(mMailFolderLabel)
                        .add(mMailFolderTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(mFetchFoldersButton)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(mMaxMessageCountLabel)
                        .add(mMaxMessageCountTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(mMaxMsgCountIconLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(mMessageAckModeLabel)
                        .add(mMessageAckModeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(mMsgAckModeIconLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(mMsgAckOpIconLabel)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(mMessageAckOperationLabel)
                        .add(mMessageAckOperationComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(mEmailPayloadHeaderLabel)
                    .add(mEmailPayloadSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mSaveAttDirIconLabel)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(mSaveAttDirLabel)
                        .add(mBrowseButton)
                        .add(mSaveAttDirTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(mDescriptionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        mEmailServerLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailServerLabel.text")); // NOI18N
        mEmailServerLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailServerTextField.toolTipText")); // NOI18N
        mEmailServerTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailServerLabel.text")); // NOI18N
        mEmailServerTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailServerTextField.toolTipText")); // NOI18N
        mPortLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPortLabel.text")); // NOI18N
        mPortLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPortTextField.toolTipText")); // NOI18N
        mPortTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPortLabel.text")); // NOI18N
        mPortTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPortTextField.toolTipText")); // NOI18N
        mUserNameLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUserNameLabel.text")); // NOI18N
        mUserNameLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUserNameTextField.toolTipText")); // NOI18N
        mUserNameTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUserNameLabel.text")); // NOI18N
        mUserNameTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUserNameTextField.toolTipText")); // NOI18N
        mPasswordLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPasswordField.toolTipText")); // NOI18N
        mPasswordField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPasswordLabel.text")); // NOI18N
        mPasswordField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPasswordField.toolTipText")); // NOI18N
        mUseSSLLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUseSSLLabel.text")); // NOI18N
        mMailFolderLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMailFolderLabel.AccessibleContext.accessibleName")); // NOI18N
        mMailFolderLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMailFolderLabel.AccessibleContext.accessibleDescription")); // NOI18N
        mMailFolderTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMailFolderLabel.text")); // NOI18N
        mMailFolderTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMailFolderTextField.toolTipText")); // NOI18N
        mMaxMessageCountLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMaxMessageCountTextField.toolTipText")); // NOI18N
        mMaxMessageCountTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMaxMessageCountLabel.text")); // NOI18N
        mMaxMessageCountTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMaxMessageCountTextField.toolTipText")); // NOI18N
        mMessageAckModeLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckModeLabel.text")); // NOI18N
        mMessageAckModeLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckModeComboBox.toolTipText")); // NOI18N
        mMessageAckModeComboBox.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckModeLabel.text")); // NOI18N
        mMessageAckModeComboBox.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckModeComboBox.toolTipText")); // NOI18N
        mMessageAckOperationLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckOperationLabel.text")); // NOI18N
        mMessageAckOperationLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckOperationComboBox.toolTipText")); // NOI18N
        mMessageAckOperationComboBox.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckOperationLabel.text")); // NOI18N
        mMessageAckOperationComboBox.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckOperationComboBox.toolTipText")); // NOI18N
        mPollingIntervalLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPollingIntervalLabel.text")); // NOI18N
        mPollingIntervalLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPollingIntervalTextField.toolTipText")); // NOI18N
        mPollingIntervalTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPollingIntervalLabel.text")); // NOI18N
        mPollingIntervalTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPollingIntervalTextField.toolTipText")); // NOI18N
        mSaveAttDirLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mSaveAttDirLabel.text")); // NOI18N
        mSaveAttDirLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mSaveAttDirTextField.toolTipText")); // NOI18N
        mSaveAttDirTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mSaveAttDirLabel.text")); // NOI18N
        mSaveAttDirTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mSaveAttDirTextField.toolTipText")); // NOI18N
        mBrowseButton.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mBrowseButton.text")); // NOI18N
        mBrowseButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mBrowseButton.toolTipText")); // NOI18N
        mDescriptionPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "mDescriptionPanel.toolTipText")); // NOI18N
        mDescriptionPanel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "mDescriptionPanel.toolTipText")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void populateView() {
        mHandleNMAttLabel.setVisible(false);
        mHandleNMAttComboBox.setVisible(false);
    }

    public void setTemplateType(String templateType) {
        this.mTemplateType = templateType;
        protocol = mTemplateType.startsWith("POP") ? "pop3" : "imap";
        if (mTemplateType.equalsIgnoreCase("POP3")) {
            mMailFolderTextField.setVisible(false);
            mMailFolderLabel.setVisible(false);
            mMailFolderIconLabel.setVisible(false);
            mFetchFoldersButton.setVisible(false);
        }
        /* if(!mEnablePayloadProcessing){
        mHandleNMAttComboBox.setEnabled(mEnablePayloadProcessing);
        }*/

        mHandleNMAttLabel.setVisible(false);
        mHandleNMAttComboBox.setVisible(false);
    }

    private void mEmailServerTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mEmailServerTextFieldFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mEmailServerTextFieldFocusGained

    private void mEmailServerTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mEmailServerTextFieldFocusLost
        clearDescription();
    }//GEN-LAST:event_mEmailServerTextFieldFocusLost

    private void mPortTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mPortTextFieldFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mPortTextFieldFocusGained

    private void mPortTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mPortTextFieldFocusLost
        clearDescription();
    }//GEN-LAST:event_mPortTextFieldFocusLost

    private void mUserNameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mUserNameTextFieldFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mUserNameTextFieldFocusGained

    private void mUserNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mUserNameTextFieldFocusLost
        clearDescription();
    }//GEN-LAST:event_mUserNameTextFieldFocusLost

    private void mMailFolderTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mMailFolderTextFieldFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mMailFolderTextFieldFocusGained

    private void mMailFolderTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mMailFolderTextFieldFocusLost
        clearDescription();
    }//GEN-LAST:event_mMailFolderTextFieldFocusLost

    private void mMaxMessageCountTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mMaxMessageCountTextFieldFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mMaxMessageCountTextFieldFocusGained

    private void mMaxMessageCountTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mMaxMessageCountTextFieldFocusLost
        clearDescription();
    }//GEN-LAST:event_mMaxMessageCountTextFieldFocusLost

    private void mMessageAckModeComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mMessageAckModeComboBoxFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mMessageAckModeComboBoxFocusGained

    private void mMessageAckModeComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mMessageAckModeComboBoxFocusLost
        clearDescription();
    }//GEN-LAST:event_mMessageAckModeComboBoxFocusLost

    private void mMessageAckOperationComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mMessageAckOperationComboBoxFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mMessageAckOperationComboBoxFocusGained

    private void mMessageAckOperationComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mMessageAckOperationComboBoxFocusLost
        clearDescription();
    }//GEN-LAST:event_mMessageAckOperationComboBoxFocusLost

    private void mPollingIntervalTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mPollingIntervalTextFieldFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mPollingIntervalTextFieldFocusGained

    private void mPollingIntervalTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mPollingIntervalTextFieldFocusLost
        clearDescription();
    }//GEN-LAST:event_mPollingIntervalTextFieldFocusLost

    private void mHandleNMAttComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mHandleNMAttComboBoxFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mHandleNMAttComboBoxFocusGained

    private void mHandleNMAttComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mHandleNMAttComboBoxFocusLost
        clearDescription();
    }//GEN-LAST:event_mHandleNMAttComboBoxFocusLost

    private void mSaveAttDirTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mSaveAttDirTextFieldFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mSaveAttDirTextFieldFocusGained

    private void mSaveAttDirTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mSaveAttDirTextFieldFocusLost
        clearDescription();
    }//GEN-LAST:event_mSaveAttDirTextFieldFocusLost

    private void mPasswordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mPasswordFieldFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mPasswordFieldFocusGained

    private void mPasswordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mPasswordFieldFocusLost
        clearDescription();
    }//GEN-LAST:event_mPasswordFieldFocusLost

    private void mUseSSLFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mUseSSLFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mUseSSLFocusGained

    private void mUseSSLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mUseSSLFocusLost
        clearDescription();
    }//GEN-LAST:event_mUseSSLFocusLost

    private void mFetchFoldersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mFetchFoldersButtonActionPerformed
        EmailError error = validateEmailServer(true);
        if (error.isValid()) {
            //EmailError errorMessage = emailConnection.validateInbound();
            if (!emailConnectionPropertiesChanged && emailConnection != null) {
                final Chooser panel = new Chooser(emailConnection, mMailFolderTextField.getText());
                final DialogDescriptor descriptor = new DialogDescriptor(panel, NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.Dialog.title"), true, null);
                final PropertyChangeListener pcl = new PropertyChangeListener() {

                    public void propertyChange(PropertyChangeEvent evt) {
                        if (evt.getSource() == panel && evt.getPropertyName().
                                equals(Chooser.PROP_ACTION_APPLY)) {
                            descriptor.setValid(((Boolean) evt.getNewValue()).booleanValue());
                        }
                    }
                };
                panel.addPropertyChangeListener(pcl);
                // dialog's action listener
                ActionListener al = new ActionListener() {

                    public void actionPerformed(ActionEvent evt) {
                        if (evt.getSource().equals(DialogDescriptor.OK_OPTION) ||
                                evt.getSource().equals(DialogDescriptor.CANCEL_OPTION) ||
                                evt.getSource().equals(DialogDescriptor.CLOSED_OPTION)) {
                            panel.removePropertyChangeListener(pcl);
                        }
                        if (evt.getSource().equals(DialogDescriptor.OK_OPTION)) {
                            StringBuilder builder = new StringBuilder();
                            for (String folderName : panel.getSelectedFolders()) {
                                builder.append(folderName).append(",");
                            }
                            if (builder.toString().endsWith(",")) {
                                builder.deleteCharAt(builder.length() - 1);
                            }
                            mMailFolderTextField.setText(builder.toString());

                        }
                    }
                };
                descriptor.setButtonListener(al);
                descriptor.setValid(true);
                Dialog dialog = DialogDisplayer.getDefault().createDialog(descriptor);
                dialog.getAccessibleContext().setAccessibleDescription(descriptor.getTitle());
                dialog.setVisible(true);
                dialog.toFront();
            } else {
                mFetchFoldersButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_mFetchFoldersButtonActionPerformed

    private void mTestConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mTestConnectionButtonActionPerformed
        mTestConnectionButton.setText(NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mTestConnectionButton.testing"));
        mTestConnectionButton.setEnabled(false);
        mFetchFoldersButton.setEnabled(false);

        new Thread(new Runnable() {

            public void run() {
                emailConnection = null;
                EmailError error = validateEmailServer(true);
                if (!error.isValid()) {
                    return;
                }
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                String portStr = mPortTextField.getText().trim();
                int port = 0;
                if (portStr.length() > 0) {
                    port = Integer.valueOf(mPortTextField.getText()).intValue();
                }
                emailConnection = new ReceiverEmailConnection(mEmailServerTextField.getText(), port, mUserNameTextField.getText(), String.valueOf(mPasswordField.getPassword()), mUseSSL.isSelected(), mMailFolderTextField.getText(), protocol);
                final EmailError errorMessage = emailConnection.validateInbound(mFetchFoldersButton.isVisible());
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        if (!errorMessage.isValid()) {
                            emailConnectionPropertiesChanged();
                        } else {
                            emailConnectionPropertiesChanged = false;
                            mFetchFoldersButton.setEnabled(true);
                        }
                        ErrorPropagator.doFirePropertyChange(errorMessage, InboundMessagePanel.this);
                        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        Mnemonics.setLocalizedText(mTestConnectionButton, NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mTestConnectionButton.text"));
                        mTestConnectionButton.setEnabled(true);
                    }
                });

            }
        }).start();

    }//GEN-LAST:event_mTestConnectionButtonActionPerformed

    private void clearDescription() {
        mDescriptionDisplayTextPane.setText("");
    }

    private void updateDescription(FocusEvent evt) {
        mDescriptionDisplayTextPane.setText("");
        mDoc = mDescriptionDisplayTextPane.getStyledDocument();
        mStyles = new String[]{"bold", "regular"};
        Style def = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);
        Style regular = mDoc.addStyle("regular", def);
        Style bold = mDoc.addStyle("bold", regular);
        StyleConstants.setBold(bold, true);
        String[] desc = null;
        boolean casaEdited = false;

        if (evt.getSource() == mEmailServerTextField) {
            desc = new String[]{java.util.ResourceBundle.getBundle("org/netbeans/modules/wsdlextensions/email/editor/panels/Bundle").getString("EMAIL_SERVER"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mEmailServerTextField.toolTipText")};
            casaEdited = true;
        } else if (evt.getSource() == mPortTextField) {
            desc = new String[]{java.util.ResourceBundle.getBundle("org/netbeans/modules/wsdlextensions/email/editor/panels/Bundle").getString("PORT"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPortTextField.toolTipText")};
            casaEdited = true;
        } else if (evt.getSource() == mUserNameTextField) {
            desc = new String[]{java.util.ResourceBundle.getBundle("org/netbeans/modules/wsdlextensions/email/editor/panels/Bundle").getString("USER_NAME"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUserNameTextField.toolTipText")};
            casaEdited = true;
        } else if (evt.getSource() == mPasswordField) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "PASSWORD"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPasswordField.toolTipText")};
            casaEdited = true;
        } else if (evt.getSource() == mUseSSL) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "USE_SSL"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mUseSSL.toolTipText")};
            casaEdited = true;
        } else if (evt.getSource() == mMailFolderTextField) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "MAIL_FOLDER"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMailFolderTextField.toolTipText")};
            casaEdited = true;
        } else if (evt.getSource() == mMaxMessageCountTextField) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "MAXIMUM_MESSAGE_COUNT"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMaxMessageCountTextField.toolTipText")};
            casaEdited = true;
        } else if (evt.getSource() == mMessageAckModeComboBox) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "MESSAGE_ACKNOWLEDGMENT_MODE"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckModeComboBox.toolTipText")};
            casaEdited = true;
        } else if (evt.getSource() == mMessageAckOperationComboBox) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "MESSAGE_ACKNOWLEDGMENT_OPERATION"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mMessageAckOperationComboBox.toolTipText")};
            casaEdited = true;
        } else if (evt.getSource() == mPollingIntervalTextField) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "POLLING_INTERVAL"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mPollingIntervalTextField.toolTipText")};
            casaEdited = true;
        } else if (evt.getSource() == mHandleNMAttComboBox) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "HANDLE_NM_ATTACHMENTS"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mHandleNMAttComboBox.toolTipText")};
            casaEdited = true;
        } else if (evt.getSource() == mSaveAttDirTextField) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "SAVE_ATTACHMENTS_TO_DIRECTORY"),
                        org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mSaveAttDirTextField.toolTipText")};
            casaEdited = true;
        }
        if (desc != null) {
            try {
                mDoc.insertString(mDoc.getLength(), desc[0] + " ",
                        mDoc.getStyle(mStyles[0]));
                mDoc.insertString(mDoc.getLength(), desc[1],
                        mDoc.getStyle(mStyles[1]));

                mDescriptionDisplayTextPane.setCaretPosition(0);
                mDescriptionDisplayTextPane.setToolTipText(desc[0] + ":" + desc[1]);
                mDescriptionDisplayTextPane.getAccessibleContext().setAccessibleName(desc[0]);
                mDescriptionDisplayTextPane.getAccessibleContext().setAccessibleDescription(desc[0] + ":" + desc[1]);
            } catch (BadLocationException ble) {
                mLogger.log(Level.FINER, ble.getMessage());
            }
            return;
        }
    }

    private void initListeners() {
        if (mActionListener == null) {
            mActionListener = new MyActionListener();
        }
        mBrowseButton.addActionListener(mActionListener);

        if (mDocumentListener == null) {
            mDocumentListener = new MyDocumentListener();
        }
        DocumentListener emailConnectionPropertiesChangeListener = new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                emailConnectionPropertiesChanged();
            }

            public void removeUpdate(DocumentEvent e) {
                emailConnectionPropertiesChanged();
            }

            public void changedUpdate(DocumentEvent e) {
                emailConnectionPropertiesChanged();
            }
        };
        mEmailServerTextField.getDocument().addDocumentListener(emailConnectionPropertiesChangeListener);
        mEmailServerTextField.getDocument().addDocumentListener(mDocumentListener);
        mPortTextField.getDocument().addDocumentListener(mDocumentListener);
        mPortTextField.getDocument().addDocumentListener(emailConnectionPropertiesChangeListener);
        mUserNameTextField.getDocument().addDocumentListener(emailConnectionPropertiesChangeListener);
        mPasswordField.getDocument().addDocumentListener(emailConnectionPropertiesChangeListener);
        mUseSSL.addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                emailConnectionPropertiesChanged();
            }
        });
        mPollingIntervalTextField.getDocument().addDocumentListener(mDocumentListener);
        mMaxMessageCountTextField.getDocument().addDocumentListener(mDocumentListener);
    }

    private void emailConnectionPropertiesChanged() {
        emailConnectionPropertiesChanged = true;
        emailConnection = null;
        mFetchFoldersButton.setEnabled(false);
    }

    public class MyActionListener implements ActionListener {

        public void actionPerformed(ActionEvent evt) {
            handleActionPerformed(evt);
        }
    }

    public class MyDocumentListener implements DocumentListener {
        // Handle insertions into the text field

        public void insertUpdate(DocumentEvent event) {
            validateEmailProperties(true);
        }

        // Handle deletions	from the text field
        public void removeUpdate(DocumentEvent event) {
            validateEmailProperties(true);
        }

        // Handle changes to the text field
        public void changedUpdate(DocumentEvent event) {
            validateEmailProperties(true);
        }
    }

    private void handleActionPerformed(ActionEvent evt) {
        if (evt.getSource() == mBrowseButton) {
            handleBrowseButtonActionPerformed(evt);
        }
    }

    private void handleBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                int retVal = mDirectoryChooser.showDialog(null, org.openide.util.NbBundle.getMessage(InboundMessagePanel.class, "DirectoryChooser.Select"));
                if (retVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                    mSaveAttDirTextField.setText(mDirectoryChooser.getSelectedFile().getAbsolutePath());
                }
            }
        });
    }

    public EmailError validateEmailProperties() {
        return validateEmailProperties(false);
    }

    public EmailError validateEmailProperties(boolean fireEvent) {
        EmailError emailError = validateEmailServer(fireEvent);
        if (emailError.isValid()) {
            // Validate Port
            emailError = validatePort(fireEvent);
            if (emailError.isValid()) {
                // Validate Maximum Message Count
                emailError = validateMaxMessageCount(fireEvent);
                if (emailError.isValid()) {
                    // Validate Polling Interval
                    emailError = validatePollingInterval(fireEvent);
                }
            }
        }
        //This clears the error message if there are no errors.
        if (fireEvent) {
            ErrorPropagator.doFirePropertyChange(emailError, this);
        }
        return emailError;

    }

    private EmailError validateEmailServer(boolean fireEvent) {
        EmailError emailError = new EmailError();
        String emailServer = trimTextField(mEmailServerTextField.getText());
        if (emailServer == null || emailServer.equals("")) {
            emailError.setErrorMode(ExtensibilityElementConfigurationEditorComponent.PROPERTY_ERROR_EVT);
            emailError.setErrorMessage(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class,
                    "InboundMessagePanel.mEmailServerTextField.isEmpty"));
        }
        if (fireEvent) {
            ErrorPropagator.doFirePropertyChange(emailError, this);
        }
        return emailError;
    }

    private EmailError validatePort(boolean fireEvent) {
        EmailError emailError = new EmailError();
        String port = trimTextField(mPortTextField.getText());
        if (port != null) {
            for (int i = 0, len = port.length(); i < len; ++i) {
                if (!Character.isDigit(port.charAt(i))) {
                    emailError.setErrorMessage(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class,
                            "InboundMessagePanel.mPortTextField.isNotInteger"));
                    emailError.setErrorMode(ExtensibilityElementConfigurationEditorComponent.PROPERTY_ERROR_EVT);
                }
            }
        }
        if (fireEvent) {
            ErrorPropagator.doFirePropertyChange(emailError, this);
        }
        return emailError;
    }

    private EmailError validatePollingInterval(boolean fireEvent) {
        EmailError emailError = new EmailError();
        String pollInterval = trimTextField(mPollingIntervalTextField.getText());
        if (pollInterval != null) {
            for (int i = 0, len = pollInterval.length(); i < len; ++i) {
                if (!Character.isDigit(pollInterval.charAt(i))) {
                    emailError.setErrorMessage(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class,
                            "InboundMessagePanel.mPortTextField.isNotInteger"));
                    emailError.setErrorMode(ExtensibilityElementConfigurationEditorComponent.PROPERTY_ERROR_EVT);
                }
            }
        }
        if (fireEvent) {
            ErrorPropagator.doFirePropertyChange(emailError, this);
        }
        return emailError;
    }

    private EmailError validateMaxMessageCount(boolean fireEvent) {
        EmailError emailError = new EmailError();
        String maxMsgCount = trimTextField(mMaxMessageCountTextField.getText());
        if (maxMsgCount != null) {
            for (int i = 0, len = maxMsgCount.length(); i < len; ++i) {
                if (!Character.isDigit(maxMsgCount.charAt(i))) {
                    emailError.setErrorMessage(org.openide.util.NbBundle.getMessage(InboundMessagePanel.class,
                            "InboundMessagePanel.mPortTextField.isNotInteger"));
                    emailError.setErrorMode(ExtensibilityElementConfigurationEditorComponent.PROPERTY_ERROR_EVT);
                }
            }
        }
        if (fireEvent) {
            ErrorPropagator.doFirePropertyChange(emailError, this);
        }
        return emailError;
    }

    /**
     * Route the property change event to this panel
     */
    public void doFirePropertyChange(String name, Object oldValue, Object newValue) {
        firePropertyChange(name, oldValue,
                newValue);
    }

    /**
     * Trims input text and returns null, if blank.
     *
     * @param text
     * @return trimmed text, if blank returns null.
     */
    private String trimTextField(String text) {
        if (text == null) {
            return text;
        }
        String trimmedText = text.trim();
        if (trimmedText.length() == 0) {
            return null;
        }
        return text.trim();
    }

    private void initDirectoryChooser() {
        if (mDirectoryChooser != null) {
            mDirectoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            mDirectoryChooser.setAcceptAllFileFilterUsed(false);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton mBrowseButton;
    private javax.swing.JScrollPane mDescriptionDisplayScrollPane;
    private javax.swing.JTextPane mDescriptionDisplayTextPane;
    private javax.swing.JPanel mDescriptionPanel;
    private javax.swing.JFileChooser mDirectoryChooser;
    private javax.swing.JLabel mEmailConnectionHeaderLabel;
    private javax.swing.JSeparator mEmailConnectionSeparator;
    private javax.swing.JLabel mEmailPayloadHeaderLabel;
    private javax.swing.JSeparator mEmailPayloadSeparator;
    private javax.swing.JLabel mEmailServerIconLabel;
    private javax.swing.JLabel mEmailServerLabel;
    public javax.swing.JTextField mEmailServerTextField;
    protected javax.swing.JButton mFetchFoldersButton;
    public javax.swing.JComboBox mHandleNMAttComboBox;
    public javax.swing.JLabel mHandleNMAttLabel;
    public javax.swing.JLabel mMailFolderIconLabel;
    public javax.swing.JLabel mMailFolderLabel;
    public javax.swing.JTextField mMailFolderTextField;
    private javax.swing.JLabel mMaxMessageCountLabel;
    public javax.swing.JTextField mMaxMessageCountTextField;
    private javax.swing.JLabel mMaxMsgCountIconLabel;
    public javax.swing.JComboBox mMessageAckModeComboBox;
    private javax.swing.JLabel mMessageAckModeLabel;
    public javax.swing.JComboBox mMessageAckOperationComboBox;
    private javax.swing.JLabel mMessageAckOperationLabel;
    private javax.swing.JLabel mMsgAckModeIconLabel;
    private javax.swing.JLabel mMsgAckOpIconLabel;
    public javax.swing.JPasswordField mPasswordField;
    private javax.swing.JLabel mPasswordIconLabel;
    private javax.swing.JLabel mPasswordLabel;
    private javax.swing.JLabel mPollIntervalIconLabel;
    private javax.swing.JLabel mPollingIntervalLabel;
    public javax.swing.JTextField mPollingIntervalTextField;
    private javax.swing.JLabel mPortIconLabel;
    private javax.swing.JLabel mPortLabel;
    public javax.swing.JTextField mPortTextField;
    private javax.swing.JLabel mSaveAttDirIconLabel;
    private javax.swing.JLabel mSaveAttDirLabel;
    public javax.swing.JTextField mSaveAttDirTextField;
    private javax.swing.JButton mTestConnectionButton;
    protected javax.swing.JCheckBox mUseSSL;
    private javax.swing.JLabel mUseSSLIconLabel;
    private javax.swing.JLabel mUseSSLLabel;
    private javax.swing.JLabel mUserNameIconLabel;
    private javax.swing.JLabel mUserNameLabel;
    public javax.swing.JTextField mUserNameTextField;
    // End of variables declaration//GEN-END:variables
    // Style Document for Description Area
    private StyledDocument mDoc = null;
    private String[] mStyles = null;
    // Icon
    private Icon mCASAImg = null;
    private MyActionListener mActionListener = null;
    private MyDocumentListener mDocumentListener = null;
    private static final Logger mLogger = Logger.getLogger(InboundMessagePanel.class.getName());
}

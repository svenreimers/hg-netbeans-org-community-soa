/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */

/*
 * MailToConfigurationPanel.java
 *
 * Created on Sep 29, 2009, 5:57:54 PM
 */
package org.netbeans.modules.wsdlextensions.email.editor.panels;

import java.awt.Cursor;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.Collection;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.mail.internet.AddressException;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.wsdlextensions.email.validator.Mailbox;
import org.netbeans.modules.wsdlextensions.email.validator.SMTPMailto;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author skini
 */
public class MailToConfigurationPanel extends javax.swing.JPanel {

    public static final String PROP_ACTION_APPLY = "PROP_ACTION_APPLY";
    private int errorIndex;
    private boolean isValid;
    private int position;
    private JTextField fieldWithError;

    /** Creates new form MailToConfigurationPanel */
    public MailToConfigurationPanel(String mailtoValue) {
        initComponents();
        mailtoText.setText(mailtoValue);
        setInitialValues();
        addDocumentListeners();
        validateMailto(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLabel = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        toTextField = new javax.swing.JTextField();
        ccLabel = new javax.swing.JLabel();
        ccTextField = new javax.swing.JTextField();
        bccLabel = new javax.swing.JLabel();
        bccTextField = new javax.swing.JTextField();
        subjectLabel = new javax.swing.JLabel();
        subjectTextField = new javax.swing.JTextField();
        mailtoScrollpane = new javax.swing.JScrollPane();
        mailtoText = new javax.swing.JTextArea();
        mailtoValueLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        headerLabel.setFont(headerLabel.getFont().deriveFont(headerLabel.getFont().getStyle() | java.awt.Font.BOLD));
        org.openide.awt.Mnemonics.setLocalizedText(headerLabel, org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.headerLabel.text")); // NOI18N
        headerLabel.setName("headerLabel"); // NOI18N

        toLabel.setLabelFor(toTextField);
        org.openide.awt.Mnemonics.setLocalizedText(toLabel, org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.toLabel.text")); // NOI18N
        toLabel.setName("toLabel"); // NOI18N

        toTextField.setText(org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.toTextField.text")); // NOI18N
        toTextField.setToolTipText(org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.toTextField.toolTipText")); // NOI18N
        toTextField.setName("toTextField"); // NOI18N

        ccLabel.setLabelFor(ccTextField);
        org.openide.awt.Mnemonics.setLocalizedText(ccLabel, org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.ccLabel.text")); // NOI18N
        ccLabel.setName("ccLabel"); // NOI18N

        ccTextField.setText(org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.ccTextField.text")); // NOI18N
        ccTextField.setToolTipText(org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.ccTextField.toolTipText")); // NOI18N
        ccTextField.setName("ccTextField"); // NOI18N

        bccLabel.setLabelFor(bccTextField);
        org.openide.awt.Mnemonics.setLocalizedText(bccLabel, org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.bccLabel.text")); // NOI18N
        bccLabel.setName("bccLabel"); // NOI18N

        bccTextField.setText(org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.bccTextField.text")); // NOI18N
        bccTextField.setToolTipText(org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.bccTextField.toolTipText")); // NOI18N
        bccTextField.setName("bccTextField"); // NOI18N

        subjectLabel.setLabelFor(subjectTextField);
        org.openide.awt.Mnemonics.setLocalizedText(subjectLabel, org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.subjectLabel.text")); // NOI18N
        subjectLabel.setName("subjectLabel"); // NOI18N

        subjectTextField.setText(org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.subjectTextField.text")); // NOI18N
        subjectTextField.setToolTipText(org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.subjectTextField.toolTipText")); // NOI18N
        subjectTextField.setName("subjectTextField"); // NOI18N

        mailtoScrollpane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mailtoScrollpane.setName("mailtoScrollpane"); // NOI18N

        mailtoText.setBackground(getBackground());
        mailtoText.setColumns(20);
        mailtoText.setEditable(false);
        mailtoText.setFont(mailtoText.getFont().deriveFont((mailtoText.getFont().getStyle() | java.awt.Font.ITALIC)));
        mailtoText.setLineWrap(true);
        mailtoText.setRows(5);
        mailtoText.setWrapStyleWord(true);
        mailtoText.setBorder(null);
        mailtoText.setName("mailtoText"); // NOI18N
        mailtoScrollpane.setViewportView(mailtoText);

        mailtoValueLabel.setFont(mailtoValueLabel.getFont().deriveFont(mailtoValueLabel.getFont().getStyle() | java.awt.Font.BOLD));
        org.openide.awt.Mnemonics.setLocalizedText(mailtoValueLabel, org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.mailtoValueLabel.text")); // NOI18N
        mailtoValueLabel.setName("mailtoValueLabel"); // NOI18N

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(errorLabel, org.openide.util.NbBundle.getMessage(MailToConfigurationPanel.class, "MailToConfigurationPanel.errorLabel.text")); // NOI18N
        errorLabel.setToolTipText(errorLabel.getText());
        errorLabel.setName("errorLabel"); // NOI18N
        errorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                errorLabelMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, errorLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, mailtoScrollpane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, mailtoValueLabel)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, headerLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(toLabel)
                            .add(ccLabel)
                            .add(subjectLabel)
                            .add(bccLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(bccTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                            .add(subjectTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                            .add(ccTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, toTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(headerLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(toLabel)
                    .add(toTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ccLabel)
                    .add(ccTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bccLabel)
                    .add(bccTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(subjectLabel)
                    .add(subjectTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(mailtoValueLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mailtoScrollpane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(errorLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void errorLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_errorLabelMouseClicked
        focusFieldWithError();
    }//GEN-LAST:event_errorLabelMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bccLabel;
    private javax.swing.JTextField bccTextField;
    private javax.swing.JLabel ccLabel;
    private javax.swing.JTextField ccTextField;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JScrollPane mailtoScrollpane;
    private javax.swing.JTextArea mailtoText;
    private javax.swing.JLabel mailtoValueLabel;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JTextField subjectTextField;
    private javax.swing.JLabel toLabel;
    private javax.swing.JTextField toTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the mailtoValue
     */
    public String getMailtoValue() {
        return mailtoText.getText();
    }

    private void addDocumentListeners() {
        DocumentListener dListener = new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                changed(e);
            }

            public void removeUpdate(DocumentEvent e) {
                changed(e);
            }

            public void changedUpdate(DocumentEvent e) {
                changed(e);
            }
        };
        toTextField.getDocument().addDocumentListener(dListener);
        ccTextField.getDocument().addDocumentListener(dListener);
        bccTextField.getDocument().addDocumentListener(dListener);
        subjectTextField.getDocument().addDocumentListener(dListener);
    }

    private void changed(DocumentEvent e) {
        StringBuilder builder = new StringBuilder();
        String to = toTextField.getText().trim();
        String cc = ccTextField.getText().trim();
        String bcc = bccTextField.getText().trim();
        String subject = subjectTextField.getText().trim();

        if (to.length() > 0) {
            builder.append(to);
        }

        if (cc.length() > 0 || bcc.length() > 0 || subject.length() > 0) {

            builder.append("?");
            if (cc.length() > 0) {
                if (!builder.toString().endsWith("?")) {
                    builder.append("&");
                }
                builder.append("cc=" + cc);
            }

            if (bcc.length() > 0) {
                if (!builder.toString().endsWith("?")) {
                    builder.append("&");
                }
                builder.append("bcc=" + bcc);
            }

            if (subject.length() > 0) {
                if (!builder.toString().endsWith("?")) {
                    builder.append("&");
                }
                try {
                    builder.append("subject=" + URLEncoder.encode(subject, "UTF-8"));
                } catch (UnsupportedEncodingException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }

        }
        if (builder.toString().length() > 0) {
            builder.insert(0, "mailto:");
        }
        mailtoText.setText(builder.toString());
        validateMailto(false);

    }

    @Override
    public void addNotify() {
        firePropertyChange(PROP_ACTION_APPLY, !isValid, isValid);
        super.addNotify();
    }

    private void setInitialValues() {
        SMTPMailto url = new SMTPMailto();
        try {
            url.unmarshal(mailtoText.getText());
            toTextField.setText(createCommaSeperatedAddresses(url.getMailboxes()));
            ccTextField.setText(createCommaSeperatedAddresses(url.getCCMailboxes()));
            bccTextField.setText(createCommaSeperatedAddresses(url.getBCCMailboxes()));
            subjectTextField.setText(URLDecoder.decode(url.getSubject(), "UTF-8"));
        } catch (UnsupportedEncodingException ex) {
            //ignore
        } catch (URISyntaxException ex) {
            handleWrongFormat();
        } catch (AddressException ex) {
            handleWrongFormat();
        }
    }

    private void validateMailto(boolean focus) {
        SMTPMailto url = new SMTPMailto();
        errorIndex = -1;
        String errorMessage = "";
        isValid = true;
        errorLabel.setCursor(Cursor.getDefaultCursor());
        fieldWithError = null;
        position = -1;
        try {
            url.unmarshal(mailtoText.getText());
        } catch (URISyntaxException ex) {
            isValid = false;
            errorIndex = ex.getIndex();
            errorMessage = createErrorMessage(errorIndex, focus);
        } catch (AddressException ex) {
            isValid = false;
            if (ex.getRef() != null) {
                int refPos = mailtoText.getText().indexOf(ex.getRef());
                errorIndex = refPos;
                if (ex.getPos() != -1 && refPos != -1) {
                    errorIndex = refPos + ex.getPos();
                }
                createErrorMessage(errorIndex, focus);
            }
            errorMessage = ex.getLocalizedMessage() != null ? ex.getLocalizedMessage() : ex.getMessage();
        }

        errorLabel.setText(errorMessage);

        firePropertyChange(PROP_ACTION_APPLY, !isValid, isValid);
    }

    private String createCommaSeperatedAddresses(
            Collection<Mailbox> mailBoxes) {
        StringBuilder csaBuilder = new StringBuilder();
        for (Mailbox mailBox : mailBoxes) {
            csaBuilder.append(mailBox.getNormalizedAddressSpec()).append(",");
        }

        if (!mailBoxes.isEmpty()) {
            csaBuilder.deleteCharAt(csaBuilder.length() - 1);
        }

        return csaBuilder.toString();
    }

    private void handleWrongFormat() {
        String mailtoValue = mailtoText.getText();
        String tempSubject = mailtoValue;
        Matcher matcher = ccPattern.matcher(tempSubject);
        if (matcher.find()) {
            ccTextField.setText(matcher.group(1));
            tempSubject = tempSubject.substring(0, matcher.start()) + tempSubject.substring(matcher.end());
        }

        matcher = bccPattern.matcher(tempSubject);
        if (matcher.find()) {
            bccTextField.setText(matcher.group(1));
            tempSubject = tempSubject.substring(0, matcher.start()) + tempSubject.substring(matcher.end());
        }

        matcher = toPattern.matcher(tempSubject);
        String to = "";
        if (matcher.find()) {
            to += matcher.group(1);
            tempSubject = tempSubject.substring(0, matcher.start()) + tempSubject.substring(matcher.end());
        }

        matcher = mailtoPattern.matcher(tempSubject);
        if (matcher.find()) {
            to += matcher.group(1);
            tempSubject = tempSubject.substring(0, matcher.start()) + tempSubject.substring(matcher.end());
        }

        toTextField.setText(to);

        matcher = subjectPattern.matcher(tempSubject);
        String subject = "";
        if (matcher.find()) {
            subject += matcher.group(1);
            tempSubject = tempSubject.substring(0, matcher.start()) + tempSubject.substring(matcher.end());
        }


        if (tempSubject.length() != 0) {
            matcher = bodyPattern.matcher(tempSubject);
            if (!matcher.find()) {
                subject += tempSubject;
            }
        }
        try {
            subjectTextField.setText(URLDecoder.decode(subject, "UTF-8"));
        } catch (UnsupportedEncodingException ex) {
            Exceptions.printStackTrace(ex);
        }

    }
    Pattern ccPattern = Pattern.compile("cc=([^?&]*)&?");
    Pattern bccPattern = Pattern.compile("bcc=([^?&]*)&?");
    Pattern subjectPattern = Pattern.compile("subject=([^?&]*)&?");
    Pattern bodyPattern = Pattern.compile("body=([^?&]*)&?");
    Pattern toPattern = Pattern.compile("to=([^?&]*)&?");
    Pattern mailtoPattern = Pattern.compile("mailto:([^?]*)");

    private String createErrorMessage(
            int errorIndex, boolean focus) {
        String mailtoValue = mailtoText.getText();
        if (errorIndex == -1) {
            return null;
        }

        String part = null;
        Matcher matcher = ccPattern.matcher(mailtoValue);
        if (matcher.find()) {
            if (errorIndex >= matcher.start(1) && errorIndex < matcher.end(1)) {
                fieldWithError = ccTextField;
                position = errorIndex - matcher.start(1);
                part = "cc";
            }
        }

        matcher = bccPattern.matcher(mailtoValue);
        if (matcher.find()) {
            if (errorIndex >= matcher.start(1) && errorIndex < matcher.end(1)) {
                fieldWithError = bccTextField;
                position = errorIndex - matcher.start(1);
                part = "bcc";
            }
        }

        matcher = toPattern.matcher(mailtoValue);
        String to = "";
        if (matcher.find()) {
            to = matcher.group(1);
            if (errorIndex >= matcher.start(1) && errorIndex < matcher.end(1)) {
                fieldWithError = toTextField;
                position = errorIndex - matcher.start(1);
                part = "to";
            }
        }

        matcher = mailtoPattern.matcher(mailtoValue);
        if (matcher.find()) {
            if (errorIndex >= matcher.start(1) && errorIndex < matcher.end(1)) {
                fieldWithError = toTextField;
                position = to.length() + errorIndex - matcher.start(1);
                part = "to";
            }
        }


        matcher = subjectPattern.matcher(mailtoValue);
        if (matcher.find()) {
            if (errorIndex >= matcher.start(1) && errorIndex < matcher.end(1)) {
                fieldWithError = subjectTextField;
                position = errorIndex - matcher.start(1);
                part = "subject";
            }

        }

        if (fieldWithError != null) {
            errorLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }

        if (focus && fieldWithError != null) {
            focusFieldWithError();
        }




        return NbBundle.getMessage(MailToConfigurationPanel.class, "ERR_INVALID_CHARACTERS_AT_POSITION", part, Integer.valueOf(position));
    }

    private void focusFieldWithError() {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                if (fieldWithError != null) {
                    fieldWithError.setCaretPosition(position);
                    fieldWithError.requestFocusInWindow();
                }

            }
        });
    }
}

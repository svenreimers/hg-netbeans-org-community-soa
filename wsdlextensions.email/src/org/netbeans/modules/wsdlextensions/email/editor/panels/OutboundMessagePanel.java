/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */

/*
 * OutboundMessagePanel.java
 *
 * Created on 12 May, 2009, 11:05:11 AM
 */
package org.netbeans.modules.wsdlextensions.email.editor.panels;

import java.awt.Cursor;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.util.Map.Entry;
import java.util.SortedMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.internet.AddressException;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import org.netbeans.api.project.Project;
import org.netbeans.modules.wsdlextensions.email.editor.EmailError;
import org.netbeans.modules.xml.wsdl.bindingsupport.spi.ExtensibilityElementConfigurationEditorComponent;
import org.netbeans.modules.wsdlextensions.email.EmailConstants;
import org.netbeans.modules.wsdlextensions.email.smtp.SMTPInput;
import org.netbeans.modules.wsdlextensions.email.validator.SMTPMailto;
import org.netbeans.modules.xml.schema.model.GlobalElement;
import org.netbeans.modules.xml.schema.model.GlobalType;
import org.netbeans.modules.soa.wsdl.bindingsupport.ui.util.BindingComponentUtils;
import org.netbeans.modules.xml.wsdl.model.WSDLModel;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.Mnemonics;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author gauthami
 */
public class OutboundMessagePanel extends javax.swing.JPanel {
    private static final String BOTH_TEXT_AND_HTML = "Both Text and HTML";

    /** Creates new form OutboundMessagePanel */
    public OutboundMessagePanel() {
        initComponents();
        populateView();
        initListeners();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mServerIconLabel = new javax.swing.JLabel();
        mSMTPServerLabel = new javax.swing.JLabel();
        mSMTPServerTextField = new javax.swing.JTextField();
        mPortIconLabel = new javax.swing.JLabel();
        mPortLabel = new javax.swing.JLabel();
        mPortTextField = new javax.swing.JTextField();
        mUserNameIconLabel = new javax.swing.JLabel();
        mUserNameLabel = new javax.swing.JLabel();
        mUserNameTextField = new javax.swing.JTextField();
        mPasswordIconLabel = new javax.swing.JLabel();
        mPasswordLabel = new javax.swing.JLabel();
        mPasswordField = new javax.swing.JPasswordField();
        mUseSSLIconLabel = new javax.swing.JLabel();
        mUseSSLLabel = new javax.swing.JLabel();
        mUseSSLCheckBox = new javax.swing.JCheckBox();
        mLocationIconLabel = new javax.swing.JLabel();
        mLocationLabel = new javax.swing.JLabel();
        mLocationTextField = new javax.swing.JTextField();
        mCharEncodingLabel = new javax.swing.JLabel();
        mMessageTypeLabel = new javax.swing.JLabel();
        mMessageTypeComboBox = new javax.swing.JComboBox();
        mEncodingStyleLabel = new javax.swing.JLabel();
        mEncodingStyleTextField = new javax.swing.JTextField();
        mSendOpIconLabel = new javax.swing.JLabel();
        mSendOptionLabel = new javax.swing.JLabel();
        mSendOptionComboBox = new javax.swing.JComboBox();
        mEmbedImgIconLabel = new javax.swing.JLabel();
        mEmbedImgHtmlLabel = new javax.swing.JLabel();
        mEmbedImgCheckBox = new javax.swing.JCheckBox();
        mHandleNMAttLabel = new javax.swing.JLabel();
        mHandleNMAttCheckBox = new javax.swing.JCheckBox();
        mEmailConnectionHeaderLabel = new javax.swing.JLabel();
        mEmailConnectionSeparator = new javax.swing.JSeparator();
        mEmailPayloadHeaderLabel = new javax.swing.JLabel();
        mCharEncodingComboBox = new javax.swing.JComboBox();
        mEmailPayloadSeparator = new javax.swing.JSeparator();
        mXsdElementTypeLabel = new javax.swing.JLabel();
        mXsdElementTypeTextField = new javax.swing.JTextField();
        mXsdEleTypeButton = new javax.swing.JButton();
        mDescriptionPanel = new javax.swing.JPanel();
        mDescriptionDisplayScrollPane = new javax.swing.JScrollPane();
        mDescriptionDisplayTextPane = new javax.swing.JTextPane();
        mTestConnectionButton = new javax.swing.JButton();
        mEditMailtoAttributesButton = new javax.swing.JButton();

        setName("Form"); // NOI18N

        mServerIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mServerIconLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mServerIconLabel.text")); // NOI18N
        mServerIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mServerIconLabel.setName("mServerIconLabel"); // NOI18N

        mSMTPServerLabel.setLabelFor(mSMTPServerTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mSMTPServerLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mSMTPServerLabel.text")); // NOI18N
        mSMTPServerLabel.setName("mSMTPServerLabel"); // NOI18N

        mSMTPServerTextField.setText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mSMTPServerTextField.text")); // NOI18N
        mSMTPServerTextField.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mSMTPServerTextField.toolTipText")); // NOI18N
        mSMTPServerTextField.setName("mSMTPServerTextField"); // NOI18N
        mSMTPServerTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mSMTPServerTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mSMTPServerTextFieldFocusLost(evt);
            }
        });

        mPortIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mPortIconLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mPortIconLabel.text")); // NOI18N
        mPortIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mPortIconLabel.setName("mPortIconLabel"); // NOI18N

        mPortLabel.setLabelFor(mPortTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mPortLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mPortLabel.text")); // NOI18N
        mPortLabel.setName("mPortLabel"); // NOI18N

        mPortTextField.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mPortTextField.toolTipText")); // NOI18N
        mPortTextField.setName("mPortTextField"); // NOI18N
        mPortTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mPortTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mPortTextFieldFocusLost(evt);
            }
        });

        mUserNameIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mUserNameIconLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mUserNameIconLabel.text")); // NOI18N
        mUserNameIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mUserNameIconLabel.setName("mUserNameIconLabel"); // NOI18N

        mUserNameLabel.setLabelFor(mUserNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mUserNameLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mUserNameLabel.text")); // NOI18N
        mUserNameLabel.setName("mUserNameLabel"); // NOI18N

        mUserNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mUserNameTextField.toolTipText")); // NOI18N
        mUserNameTextField.setName("mUserNameTextField"); // NOI18N
        mUserNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mUserNameTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mUserNameTextFieldFocusLost(evt);
            }
        });

        mPasswordIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mPasswordIconLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mPasswordIconLabel.text")); // NOI18N
        mPasswordIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mPasswordIconLabel.setName("mPasswordIconLabel"); // NOI18N

        mPasswordLabel.setLabelFor(mPasswordField);
        org.openide.awt.Mnemonics.setLocalizedText(mPasswordLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mPasswordLabel.text")); // NOI18N
        mPasswordLabel.setName("mPasswordLabel"); // NOI18N

        mPasswordField.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mPasswordField.toolTipText")); // NOI18N
        mPasswordField.setName("mPasswordField"); // NOI18N
        mPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mPasswordFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mPasswordFieldFocusLost(evt);
            }
        });

        mUseSSLIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mUseSSLIconLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mUseSSLIconLabel.text")); // NOI18N
        mUseSSLIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mUseSSLIconLabel.setName("mUseSSLIconLabel"); // NOI18N

        mUseSSLLabel.setLabelFor(mUseSSLCheckBox);
        org.openide.awt.Mnemonics.setLocalizedText(mUseSSLLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mUseSSLLabel.text")); // NOI18N
        mUseSSLLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mUseSSLLabel.toolTipText")); // NOI18N
        mUseSSLLabel.setName("mUseSSLLabel"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mUseSSLCheckBox, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mUseSSLCheckBox.text")); // NOI18N
        mUseSSLCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mUseSSLCheckBox.toolTipText")); // NOI18N
        mUseSSLCheckBox.setName("mUseSSLCheckBox"); // NOI18N
        mUseSSLCheckBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mUseSSLCheckBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mUseSSLCheckBoxFocusLost(evt);
            }
        });

        mLocationIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/wsdlextensions/email/resources/service_composition_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mLocationIconLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mLocationIconLabel.text")); // NOI18N
        mLocationIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mLocationIconLabel.setName("mLocationIconLabel"); // NOI18N

        mLocationLabel.setLabelFor(mLocationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mLocationLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mLocationLabel.text")); // NOI18N
        mLocationLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mLocationLabel.toolTipText")); // NOI18N
        mLocationLabel.setName("mLocationLabel"); // NOI18N

        mLocationTextField.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mLocationTextField.toolTipText")); // NOI18N
        mLocationTextField.setName("mLocationTextField"); // NOI18N
        mLocationTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mLocationTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mLocationTextFieldFocusLost(evt);
            }
        });

        mCharEncodingLabel.setLabelFor(mCharEncodingComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(mCharEncodingLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mCharEncodingLabel.text")); // NOI18N
        mCharEncodingLabel.setName("mCharEncodingLabel"); // NOI18N

        mMessageTypeLabel.setLabelFor(mMessageTypeComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(mMessageTypeLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mMessageTypeLabel.text")); // NOI18N
        mMessageTypeLabel.setName("mMessageTypeLabel"); // NOI18N

        mMessageTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "text", "binary", "xml", "encoded data" }));
        mMessageTypeComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mMessageTypeComboBox.toolTipText")); // NOI18N
        mMessageTypeComboBox.setName("mMessageTypeComboBox"); // NOI18N
        mMessageTypeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mMessageTypeComboBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mMessageTypeComboBoxFocusLost(evt);
            }
        });

        mEncodingStyleLabel.setLabelFor(mEncodingStyleTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mEncodingStyleLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mEncodingStyleLabel.text")); // NOI18N
        mEncodingStyleLabel.setName("mEncodingStyleLabel"); // NOI18N

        mEncodingStyleTextField.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mEncodingStyleTextField.toolTipText")); // NOI18N
        mEncodingStyleTextField.setName("mEncodingStyleTextField"); // NOI18N
        mEncodingStyleTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mEncodingStyleTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mEncodingStyleTextFieldFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mSendOpIconLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mSendOpIconLabel.text")); // NOI18N
        mSendOpIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mSendOpIconLabel.setName("mSendOpIconLabel"); // NOI18N

        mSendOptionLabel.setLabelFor(mSendOptionComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(mSendOptionLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mSendOptionLabel.text")); // NOI18N
        mSendOptionLabel.setName("mSendOptionLabel"); // NOI18N

        mSendOptionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Text Only", "HTML Only", "XML Only", "Both Text and HTML", "Both Text and XML" }));
        mSendOptionComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mSendOptionComboBox.toolTipText")); // NOI18N
        mSendOptionComboBox.setName("mSendOptionComboBox"); // NOI18N
        mSendOptionComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mSendOptionComboBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mSendOptionComboBoxFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mEmbedImgIconLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mEmbedImgIconLabel.text")); // NOI18N
        mEmbedImgIconLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mImageIconLabel.toolTipText")); // NOI18N
        mEmbedImgIconLabel.setName("mEmbedImgIconLabel"); // NOI18N

        mEmbedImgHtmlLabel.setLabelFor(mEmbedImgCheckBox);
        org.openide.awt.Mnemonics.setLocalizedText(mEmbedImgHtmlLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mEmbedImgHtmlLabel.text")); // NOI18N
        mEmbedImgHtmlLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mEmbedImgHtmlLabel.toolTipText")); // NOI18N
        mEmbedImgHtmlLabel.setName("mEmbedImgHtmlLabel"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mEmbedImgCheckBox, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mEmbedImgCheckBox.text")); // NOI18N
        mEmbedImgCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mEmbedImgCheckBox.toolTipText")); // NOI18N
        mEmbedImgCheckBox.setName("mEmbedImgCheckBox"); // NOI18N
        mEmbedImgCheckBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mEmbedImgCheckBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mEmbedImgCheckBoxFocusLost(evt);
            }
        });

        mHandleNMAttLabel.setLabelFor(mHandleNMAttCheckBox);
        org.openide.awt.Mnemonics.setLocalizedText(mHandleNMAttLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mHandleNMAttLabel.text")); // NOI18N
        mHandleNMAttLabel.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mHandleNMAttLabel.toolTipText")); // NOI18N
        mHandleNMAttLabel.setName("mHandleNMAttLabel"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mHandleNMAttCheckBox, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mHandleNMAttCheckBox.text")); // NOI18N
        mHandleNMAttCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mHandleNMAttCheckBox.toolTipText")); // NOI18N
        mHandleNMAttCheckBox.setName("mHandleNMAttCheckBox"); // NOI18N
        mHandleNMAttCheckBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mHandleNMAttCheckBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mHandleNMAttCheckBoxFocusLost(evt);
            }
        });

        mEmailConnectionHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        org.openide.awt.Mnemonics.setLocalizedText(mEmailConnectionHeaderLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mEmailConnectionHeaderLabel.text")); // NOI18N
        mEmailConnectionHeaderLabel.setName("mEmailConnectionHeaderLabel"); // NOI18N

        mEmailConnectionSeparator.setName("mEmailConnectionSeparator"); // NOI18N

        mEmailPayloadHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        org.openide.awt.Mnemonics.setLocalizedText(mEmailPayloadHeaderLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mEmailPayloadHeaderLabel.text")); // NOI18N
        mEmailPayloadHeaderLabel.setName("mEmailPayloadHeaderLabel"); // NOI18N

        mCharEncodingComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mCharEncodingComboBox.toolTipText")); // NOI18N
        mCharEncodingComboBox.setName("mCharEncodingComboBox"); // NOI18N
        mCharEncodingComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mCharEncodingComboBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mCharEncodingComboBoxFocusLost(evt);
            }
        });

        mEmailPayloadSeparator.setName("mEmailPayloadSeparator"); // NOI18N

        mXsdElementTypeLabel.setLabelFor(mXsdElementTypeTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mXsdElementTypeLabel, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mXsdElementTypeLabel.text")); // NOI18N
        mXsdElementTypeLabel.setName("mXsdElementTypeLabel"); // NOI18N

        mXsdElementTypeTextField.setText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mXsdElementTypeTextField.text")); // NOI18N
        mXsdElementTypeTextField.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mXsdElementTypeTextField.toolTipText")); // NOI18N
        mXsdElementTypeTextField.setName("mXsdElementTypeTextField"); // NOI18N
        mXsdElementTypeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mXsdElementTypeTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mXsdElementTypeTextFieldFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mXsdEleTypeButton, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mXsdEleTypeButton.text")); // NOI18N
        mXsdEleTypeButton.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mXsdEleTypeButton.toolTipText")); // NOI18N
        mXsdEleTypeButton.setName("mXsdEleTypeButton"); // NOI18N
        mXsdEleTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mXsdEleTypeButtonActionPerformed(evt);
            }
        });

        mDescriptionPanel.setName("mDescriptionPanel"); // NOI18N

        mDescriptionDisplayScrollPane.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "mDescriptionPanel.mDescriptionDisplayScrollPane.toolTipText")); // NOI18N
        mDescriptionDisplayScrollPane.setName("mDescriptionDisplayScrollPane"); // NOI18N

        mDescriptionDisplayTextPane.setBackground(getBackground());
        mDescriptionDisplayTextPane.setEditable(false);
        mDescriptionDisplayTextPane.setFocusable(false);
        mDescriptionDisplayTextPane.setName("mDescriptionDisplayTextPane"); // NOI18N
        mDescriptionDisplayScrollPane.setViewportView(mDescriptionDisplayTextPane);
        mDescriptionDisplayTextPane.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mDescriptionDisplayTextPane.AccessibleContext.accessibleName")); // NOI18N

        org.jdesktop.layout.GroupLayout mDescriptionPanelLayout = new org.jdesktop.layout.GroupLayout(mDescriptionPanel);
        mDescriptionPanel.setLayout(mDescriptionPanelLayout);
        mDescriptionPanelLayout.setHorizontalGroup(
            mDescriptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mDescriptionDisplayScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
        );
        mDescriptionPanelLayout.setVerticalGroup(
            mDescriptionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mDescriptionDisplayScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
        );

        mDescriptionDisplayScrollPane.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "mDescriptionPanel.mDescriptionDisplayScrollPane.toolTipText")); // NOI18N
        mDescriptionDisplayScrollPane.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "mDescriptionPanel.mDescriptionDisplayScrollPane.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mTestConnectionButton, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mTestConnectionButton.text")); // NOI18N
        mTestConnectionButton.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mTestConnectionButton.toolTipText")); // NOI18N
        mTestConnectionButton.setName("mTestConnectionButton"); // NOI18N
        mTestConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mTestConnectionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mEditMailtoAttributesButton, org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mEditMailtoAttributesButton.text")); // NOI18N
        mEditMailtoAttributesButton.setToolTipText(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mEditMailtoAttributesButton.toolTipText")); // NOI18N
        mEditMailtoAttributesButton.setName("mEditMailtoAttributesButton"); // NOI18N
        mEditMailtoAttributesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mEditMailtoAttributesButtonActionPerformed(evt);
            }
        });
        mEditMailtoAttributesButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mEditMailtoAttributesButtonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mEditMailtoAttributesButtonFocusLost(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(mDescriptionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(mEmailConnectionHeaderLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mEmailConnectionSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(mLocationIconLabel)
                                    .add(mServerIconLabel)
                                    .add(mPortIconLabel)
                                    .add(mUserNameIconLabel)
                                    .add(mPasswordIconLabel)
                                    .add(mUseSSLIconLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(mPortLabel)
                                    .add(mUserNameLabel)
                                    .add(mPasswordLabel)
                                    .add(mSMTPServerLabel)
                                    .add(mLocationLabel)
                                    .add(mUseSSLLabel))
                                .add(82, 82, 82)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(mPortTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(mUserNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                                    .add(mPasswordField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                                    .add(mSMTPServerTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                                    .add(mUseSSLCheckBox)
                                    .add(mTestConnectionButton)
                                    .add(layout.createSequentialGroup()
                                        .add(mLocationTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(mEditMailtoAttributesButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mSendOpIconLabel)
                            .add(mEmbedImgIconLabel))
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(mEncodingStyleLabel)
                                    .add(mXsdElementTypeLabel)
                                    .add(mCharEncodingLabel)
                                    .add(mMessageTypeLabel)
                                    .add(mHandleNMAttLabel)
                                    .add(mEmbedImgHtmlLabel)
                                    .add(mSendOptionLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(mEmbedImgCheckBox)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, mCharEncodingComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, mMessageTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(mSendOptionComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(147, 147, 147))
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(mXsdElementTypeTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(mXsdEleTypeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(mHandleNMAttCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                                    .add(mEncodingStyleTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)))
                            .add(layout.createSequentialGroup()
                                .add(mEmailPayloadHeaderLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mEmailPayloadSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)))
                        .add(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(31, 31, 31)
                        .add(mSendOpIconLabel)
                        .add(11, 11, 11)
                        .add(mEmbedImgIconLabel))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(mEmailConnectionHeaderLabel))
                            .add(layout.createSequentialGroup()
                                .add(18, 18, 18)
                                .add(mEmailConnectionSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(mLocationLabel)
                            .add(mLocationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(mLocationIconLabel)
                            .add(mEditMailtoAttributesButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(mSMTPServerLabel)
                            .add(mServerIconLabel)
                            .add(mSMTPServerTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(9, 9, 9)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(mPortTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(mPortLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(mUserNameLabel)
                                    .add(mUserNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(mPasswordLabel)
                                    .add(mPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(mPortIconLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(mUserNameIconLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(mPasswordIconLabel)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(mUseSSLLabel)
                                .add(mUseSSLCheckBox))
                            .add(mUseSSLIconLabel))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mTestConnectionButton)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mEmailPayloadHeaderLabel)
                    .add(layout.createSequentialGroup()
                        .add(7, 7, 7)
                        .add(mEmailPayloadSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mMessageTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mMessageTypeLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mCharEncodingComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mCharEncodingLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mXsdElementTypeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mXsdElementTypeLabel)
                    .add(mXsdEleTypeButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mEncodingStyleTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mEncodingStyleLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mSendOptionComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mSendOptionLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mEmbedImgCheckBox)
                    .add(mEmbedImgHtmlLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mHandleNMAttCheckBox)
                    .add(mHandleNMAttLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(mDescriptionPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mXsdEleTypeButton.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mXsdEleTypeButton.AccessibleContext.accessibleName")); // NOI18N
        mXsdEleTypeButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "OutboundMessagePanel.mXsdEleTypeButton.AccessibleContext.accessibleDescription")); // NOI18N
        mDescriptionPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "mDescriptionPanel.toolTipText")); // NOI18N
        mDescriptionPanel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "mDescriptionPanel.toolTipText")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void mSMTPServerTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mSMTPServerTextFieldFocusGained
        updateDescription(evt);
}//GEN-LAST:event_mSMTPServerTextFieldFocusGained

    private void mSMTPServerTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mSMTPServerTextFieldFocusLost
        clearDescription();
}//GEN-LAST:event_mSMTPServerTextFieldFocusLost

    private void mPortTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mPortTextFieldFocusGained
        updateDescription(evt);
}//GEN-LAST:event_mPortTextFieldFocusGained

    private void mPortTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mPortTextFieldFocusLost
        clearDescription();
}//GEN-LAST:event_mPortTextFieldFocusLost

    private void mUserNameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mUserNameTextFieldFocusGained
        updateDescription(evt);
}//GEN-LAST:event_mUserNameTextFieldFocusGained

    private void mUserNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mUserNameTextFieldFocusLost
        clearDescription();
}//GEN-LAST:event_mUserNameTextFieldFocusLost

    private void mLocationTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mLocationTextFieldFocusGained
        updateDescription(evt);
}//GEN-LAST:event_mLocationTextFieldFocusGained

    private void mLocationTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mLocationTextFieldFocusLost
        clearDescription();
}//GEN-LAST:event_mLocationTextFieldFocusLost

    private void mMessageTypeComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mMessageTypeComboBoxFocusGained
        updateDescription(evt);
}//GEN-LAST:event_mMessageTypeComboBoxFocusGained

    private void mMessageTypeComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mMessageTypeComboBoxFocusLost
        clearDescription();
}//GEN-LAST:event_mMessageTypeComboBoxFocusLost

    private void mEncodingStyleTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mEncodingStyleTextFieldFocusGained
        updateDescription(evt);
}//GEN-LAST:event_mEncodingStyleTextFieldFocusGained

    private void mEncodingStyleTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mEncodingStyleTextFieldFocusLost
        clearDescription();
}//GEN-LAST:event_mEncodingStyleTextFieldFocusLost

    private void mSendOptionComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mSendOptionComboBoxFocusGained
        updateDescription(evt);
}//GEN-LAST:event_mSendOptionComboBoxFocusGained

    private void mSendOptionComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mSendOptionComboBoxFocusLost
        clearDescription();
}//GEN-LAST:event_mSendOptionComboBoxFocusLost

    private void mPasswordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mPasswordFieldFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mPasswordFieldFocusGained

    private void mPasswordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mPasswordFieldFocusLost
        clearDescription();
    }//GEN-LAST:event_mPasswordFieldFocusLost

    private void mCharEncodingComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mCharEncodingComboBoxFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mCharEncodingComboBoxFocusGained

    private void mCharEncodingComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mCharEncodingComboBoxFocusLost
        clearDescription();
    }//GEN-LAST:event_mCharEncodingComboBoxFocusLost

    private void mXsdEleTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mXsdEleTypeButtonActionPerformed
        showEncodedTypeDialog();
    }//GEN-LAST:event_mXsdEleTypeButtonActionPerformed

    private void mXsdElementTypeTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mXsdElementTypeTextFieldFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mXsdElementTypeTextFieldFocusGained

    private void mXsdElementTypeTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mXsdElementTypeTextFieldFocusLost
        clearDescription();
    }//GEN-LAST:event_mXsdElementTypeTextFieldFocusLost

    private void mUseSSLCheckBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mUseSSLCheckBoxFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mUseSSLCheckBoxFocusGained

    private void mUseSSLCheckBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mUseSSLCheckBoxFocusLost
        clearDescription();
    }//GEN-LAST:event_mUseSSLCheckBoxFocusLost

    private void mEmbedImgCheckBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mEmbedImgCheckBoxFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mEmbedImgCheckBoxFocusGained

    private void mEmbedImgCheckBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mEmbedImgCheckBoxFocusLost
        clearDescription();
    }//GEN-LAST:event_mEmbedImgCheckBoxFocusLost

    private void mHandleNMAttCheckBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mHandleNMAttCheckBoxFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mHandleNMAttCheckBoxFocusGained

    private void mHandleNMAttCheckBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mHandleNMAttCheckBoxFocusLost
        clearDescription();
    }//GEN-LAST:event_mHandleNMAttCheckBoxFocusLost

    private void mTestConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mTestConnectionButtonActionPerformed
        mTestConnectionButton.setEnabled(false);
        mTestConnectionButton.setText(NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mTestConnectionButton.testing"));
        new Thread(new Runnable() {

            public void run() {
                EmailError error = validateEmailServer(true);
                if (!error.isValid()) {
                    return;
                }
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                String portStr = mPortTextField.getText().trim();
                int port = 0;
                if (portStr.length() > 0) {
                    port = Integer.valueOf(mPortTextField.getText()).intValue();
                }
                SenderEmailConnection emailConnection = new SenderEmailConnection(
                        mSMTPServerTextField.getText(),
                        port,
                        mUserNameTextField.getText(),
                        String.valueOf(mPasswordField.getPassword()),
                        mUseSSLCheckBox.isSelected(),
                        "smtp");
                final EmailError errorMessage = emailConnection.validateOutbound();
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        ErrorPropagator.doFirePropertyChange(errorMessage, OutboundMessagePanel.this);
                        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        Mnemonics.setLocalizedText(mTestConnectionButton, NbBundle.getMessage(InboundMessagePanel.class, "InboundMessagePanel.mTestConnectionButton.text"));
                        mTestConnectionButton.setEnabled(true);
                    }
                });

            }
        }).start();
    }//GEN-LAST:event_mTestConnectionButtonActionPerformed

    private void mEditMailtoAttributesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mEditMailtoAttributesButtonActionPerformed
        final MailToConfigurationPanel mailtoConfPanel = new MailToConfigurationPanel(mLocationTextField.getText());
        final DialogDescriptor descriptor = new DialogDescriptor(mailtoConfPanel, NbBundle.getMessage(InboundMessagePanel.class, "MailToConfigurationPanel.Dialog.title"), true, null);
        final PropertyChangeListener pcl = new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getSource() == mailtoConfPanel && evt.getPropertyName().
                        equals(MailToConfigurationPanel.PROP_ACTION_APPLY)) {
                    descriptor.setValid(((Boolean) evt.getNewValue()).booleanValue());
                }
            }
        };
        mailtoConfPanel.addPropertyChangeListener(pcl);
        // dialog's action listener
        ActionListener al = new ActionListener() {

            public void actionPerformed(ActionEvent evt) {
                if (evt.getSource().equals(DialogDescriptor.OK_OPTION) ||
                        evt.getSource().equals(DialogDescriptor.CANCEL_OPTION) ||
                        evt.getSource().equals(DialogDescriptor.CLOSED_OPTION)) {
                    mailtoConfPanel.removePropertyChangeListener(pcl);
                }
                if (evt.getSource().equals(DialogDescriptor.OK_OPTION)) {
                    mLocationTextField.setText(mailtoConfPanel.getMailtoValue());
                }
            }
        };
        descriptor.setButtonListener(al);
        descriptor.setValid(true);
        Dialog dialog = DialogDisplayer.getDefault().createDialog(descriptor);
        dialog.getAccessibleContext().setAccessibleDescription(descriptor.getTitle());
        dialog.setVisible(true);
        dialog.toFront();
    }//GEN-LAST:event_mEditMailtoAttributesButtonActionPerformed

    private void mEditMailtoAttributesButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mEditMailtoAttributesButtonFocusGained
        updateDescription(evt);
    }//GEN-LAST:event_mEditMailtoAttributesButtonFocusGained

    private void mEditMailtoAttributesButtonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mEditMailtoAttributesButtonFocusLost
    }//GEN-LAST:event_mEditMailtoAttributesButtonFocusLost

    private void clearDescription() {
        mDescriptionDisplayTextPane.setText("");
    }

    private void updateDescription(FocusEvent evt) {
        mDescriptionDisplayTextPane.setText("");
        mDoc = mDescriptionDisplayTextPane.getStyledDocument();
        mStyles = new String[]{"bold", "regular"};
        Style def = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);
        Style regular = mDoc.addStyle("regular", def);
        Style bold = mDoc.addStyle("bold", regular);
        StyleConstants.setBold(bold, true);
        String[] desc = null;
        boolean casaEdited = false;

        if (evt.getSource() == mLocationTextField || evt.getSource() == mEditMailtoAttributesButton) {
            desc = new String[]{" Location ",
                        mLocationTextField.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mSMTPServerTextField) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "EMAIL_SERVER"),
                        mSMTPServerTextField.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mPortTextField) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "PORT"),
                        mPortTextField.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mUserNameTextField) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "USER_NAME"),
                        mUserNameTextField.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mPasswordField) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "PASSWORD"),
                        mPasswordField.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mUseSSLCheckBox) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "USE_SSL"),
                        mUseSSLCheckBox.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mCharEncodingComboBox) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "CHARACTER_ENCODING"),
                        mCharEncodingComboBox.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mMessageTypeComboBox) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "MESSAGE_TYPE"),
                        mMessageTypeComboBox.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mXsdElementTypeTextField) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "XSD_ELEMENT_TYPE"),
                        mXsdElementTypeTextField.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mEncodingStyleTextField) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "ENCODING_STYLE"),
                        mEncodingStyleTextField.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mSendOptionComboBox) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "SEND_OPTION"),
                        mSendOptionComboBox.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mEmbedImgCheckBox) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "EMBED_IMAGES_IN_HTML"),
                        mEmbedImgCheckBox.getToolTipText()};
            casaEdited = true;
        } else if (evt.getSource() == mHandleNMAttCheckBox) {
            desc = new String[]{org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class, "HANDLE_NM_ATTACHMENTS"),
                        mHandleNMAttCheckBox.getToolTipText()};
            casaEdited = true;
        }

        if (desc != null) {
            try {
                mDoc.insertString(mDoc.getLength(), desc[0] + " ",
                        mDoc.getStyle(mStyles[0]));
                mDoc.insertString(mDoc.getLength(), desc[1],
                        mDoc.getStyle(mStyles[1]));

                // Insert the image
                if (casaEdited) {
                }

                mDescriptionDisplayTextPane.setCaretPosition(0);
                mDescriptionDisplayTextPane.setToolTipText(desc[0] + " : " + desc[1]);
                mDescriptionDisplayTextPane.getAccessibleContext().setAccessibleName(desc[0]);
                mDescriptionDisplayTextPane.getAccessibleContext().setAccessibleDescription(desc[0] + " : " + desc[1]);
            } catch (BadLocationException ble) {
                mLogger.log(Level.FINER, ble.getMessage());
            }
            return;
        }
    }

    public EmailError validateEmailProperties() {
        return validateEmailProperties(false);
    }

    public EmailError validateEmailProperties(boolean fireEvent) {
        // Validate Email Server
        EmailError emailError = validateEmailServer(fireEvent);
        if (emailError.isValid()) {
            // Validate Port
            emailError = validatePort(fireEvent);
            if (emailError.isValid()) {
                // Validate XML Payload
                emailError = validateXMLPayload(fireEvent);
                if (emailError.isValid()) {
                    // Validate Encoded Payload
                    emailError = validateEncodedPayload(fireEvent);
                }
                if (emailError.isValid()) {
                    emailError = validateMailto(fireEvent);
                }
            }
        }

        return emailError;

    }

    private EmailError validatePort(boolean fireEvent) {
        EmailError emailError = new EmailError();
        String port = trimTextField(mPortTextField.getText());
        if (port != null) {
            for (int i = 0, len = port.length(); i < len; ++i) {
                if (!Character.isDigit(port.charAt(i))) {
                    emailError.setErrorMessage(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class,
                            "OutboundMessagePanel.mPortTextField.isNotInteger"));
                    emailError.setErrorMode(ExtensibilityElementConfigurationEditorComponent.PROPERTY_ERROR_EVT);
                }
            }
        }
        if (fireEvent) {
            ErrorPropagator.doFirePropertyChange(emailError, this);
        }
        return emailError;
    }

    private EmailError validateXMLPayload(boolean fireEvent) {
        EmailError emailError = new EmailError();
        String xsdElem = trimTextField(mXsdElementTypeTextField.getText());
        if (isXMLPayload() && (xsdElem == null || xsdElem.equals(""))) {
            emailError.setErrorMessage(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class,
                    "OutboundMessagePanel.mXsdElementTypeTextField.isEmpty"));
            emailError.setErrorMode(ExtensibilityElementConfigurationEditorComponent.PROPERTY_ERROR_EVT);
        }
        if (fireEvent) {
            ErrorPropagator.doFirePropertyChange(emailError, this);
        }
        return emailError;
    }

    private EmailError validateEncodedPayload(boolean fireEvent) {
        EmailError emailError = new EmailError();
        String encodStyle = trimTextField(mEncodingStyleTextField.getText());
        String xsdElem = trimTextField(mXsdElementTypeTextField.getText());
        if (isEncodedPayload()) {
            if (encodStyle == null || encodStyle.equals("") || xsdElem == null || xsdElem.equals("")) {
                emailError.setErrorMessage(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class,
                        "OutboundMessagePanel.mXsdElemEncodStyleTextFields.areEmpty"));
                emailError.setErrorMode(ExtensibilityElementConfigurationEditorComponent.PROPERTY_ERROR_EVT);
            }
        }
        if (fireEvent) {
            ErrorPropagator.doFirePropertyChange(emailError, this);
        }
        return emailError;
    }

    private EmailError validateEmailServer(boolean fireEvent) {
        EmailError emailError = new EmailError();
        String emailServer = trimTextField(mSMTPServerTextField.getText());
        if (emailServer == null || emailServer.equals("")) {
            emailError.setErrorMessage(org.openide.util.NbBundle.getMessage(OutboundMessagePanel.class,
                    "OutboundMessagePanel.mSMTPServerTextField.isEmpty"));
            emailError.setErrorMode(ExtensibilityElementConfigurationEditorComponent.PROPERTY_ERROR_EVT);
        }
        if (fireEvent) {
            ErrorPropagator.doFirePropertyChange(emailError, this);
        }
        return emailError;
    }

    private void initListeners() {
        if (mItemListener == null) {
            mItemListener = new MyItemListener();
        }

        if (mActionListener == null) {
            mActionListener = new MyActionListener();
        }

        if (mDocumentListener == null) {
            mDocumentListener = new MyDocumentListener();
        }
        mMessageTypeComboBox.addItemListener(mItemListener);
        mSMTPServerTextField.getDocument().addDocumentListener(mDocumentListener);
        mPortTextField.getDocument().addDocumentListener(mDocumentListener);
        mXsdElementTypeTextField.getDocument().addDocumentListener(mDocumentListener);
        mEncodingStyleTextField.getDocument().addDocumentListener(mDocumentListener);
        mLocationTextField.getDocument().addDocumentListener(mDocumentListener);
        mSendOptionComboBox.addItemListener(mItemListener);
    }

    private void handleActionPerformed(ActionEvent evt) {
    }

    private void handleMessageType() {
        String msgType = (String) mMessageTypeComboBox.getSelectedItem();
        if (msgType != null) {
            boolean isBinary = msgType.equalsIgnoreCase(EmailConstants.BINARY);
            boolean charEncodingCompsVisible = msgType.equalsIgnoreCase(EmailConstants.TEXT);
            boolean xsdElementTypeVisible = msgType.equalsIgnoreCase(EmailConstants.XML);
            boolean encodedVisible = msgType.equalsIgnoreCase(EmailConstants.ENCODED_DATA);

            mCharEncodingComboBox.setVisible(charEncodingCompsVisible);
            mCharEncodingLabel.setVisible(charEncodingCompsVisible);


            mXsdElementTypeTextField.setVisible(xsdElementTypeVisible || encodedVisible);
            mXsdElementTypeLabel.setVisible(xsdElementTypeVisible || encodedVisible);
            mXsdEleTypeButton.setVisible(xsdElementTypeVisible || encodedVisible);

            mEncodingStyleTextField.setVisible(encodedVisible);
            mEncodingStyleLabel.setVisible(encodedVisible);

            mSendOpIconLabel.setVisible(!isBinary);
            mSendOptionComboBox.setVisible(!isBinary);
            mSendOptionLabel.setVisible(!isBinary);
        } else {
            // default to Text Type
            mCharEncodingComboBox.setVisible(true);
            mCharEncodingLabel.setVisible(true);

            mEncodingStyleTextField.setVisible(false);
            mEncodingStyleLabel.setVisible(false);

            mXsdElementTypeTextField.setVisible(false);
            mXsdElementTypeLabel.setVisible(false);
            mXsdEleTypeButton.setVisible(false);

            mSendOpIconLabel.setVisible(true);
            mSendOptionComboBox.setVisible(true);
            mSendOptionLabel.setVisible(true);
        }
        handleSendOptionType();
        validateEmailProperties(true);
    }

    private void handleSendOptionType() {
        String selectedItem = (String) mSendOptionComboBox.getSelectedItem();
        boolean embedImgCompsVisible = !((String) mMessageTypeComboBox.getSelectedItem()).equalsIgnoreCase(EmailConstants.BINARY) && selectedItem.equalsIgnoreCase(EmailConstants.HTML_ONLY) ||
                selectedItem.equalsIgnoreCase(EmailConstants.BOTH_TEXT_AND_HTML);
        mEmbedImgCheckBox.setVisible(embedImgCompsVisible);
        mEmbedImgHtmlLabel.setVisible(embedImgCompsVisible);
        mEmbedImgIconLabel.setVisible(embedImgCompsVisible);
    }

    private void showEncodedTypeDialog() {
        if (mProject != null) {
            boolean ok = BindingComponentUtils.browseForElementOrType(mProject,
                    mWSDLModel, null);
            if (ok) {
                mType = BindingComponentUtils.getElementOrType();
                mElement = BindingComponentUtils.getSchemaComponent();
                String partTypeStr = BindingComponentUtils.getPrefixNameSpace();
                if (isEncodedPayload()) {
                    if (mElement == null) {
                        // encoded must be of element type only
                        NotifyDescriptor d = new NotifyDescriptor.Message(
                                NbBundle.getMessage(OutboundMessagePanel.class,
                                "OutboundMessagePanel.invalidType"));
                        DialogDisplayer.getDefault().notify(d);
                        return;
                    }
                }
                mXsdElementTypeTextField.setText(partTypeStr);
            }
        } else {
            NotifyDescriptor d = new NotifyDescriptor.Message(
                    NbBundle.getMessage(OutboundMessagePanel.class,
                    "OutboundMessagePanel.UnknownProject"));
            DialogDisplayer.getDefault().notify(d);
            return;
        }
    }

    private void populateView() {
        mCharEncodingComboBox.removeAllItems();
        mCharEncodingComboBox.addItem("");
        SortedMap<String, Charset> charsetMap = Charset.availableCharsets();
        if (charsetMap != null) {
            for (Entry<String, Charset> charSetEntry : charsetMap.entrySet()) {
                mCharEncodingComboBox.addItem(charSetEntry.getValue());
            }
        }
        mMessageTypeComboBox.removeAllItems();
        mMessageTypeComboBox.addItem(EmailConstants.TEXT);
        mMessageTypeComboBox.addItem(EmailConstants.BINARY);
        mMessageTypeComboBox.addItem(EmailConstants.XML);
        mMessageTypeComboBox.addItem(EmailConstants.ENCODED_DATA);
        handleMessageType();
        mCharEncodingComboBox.setVisible(true);
        mCharEncodingLabel.setVisible(true);
        mEncodingStyleTextField.setVisible(false);
        mEncodingStyleLabel.setVisible(false);
        mXsdElementTypeTextField.setVisible(false);
        mXsdElementTypeLabel.setVisible(false);
        mXsdEleTypeButton.setVisible(false);

        handleSendOptionType();

    }

    private EmailError validateMailto(boolean fireEvent) {
        EmailError error = new EmailError();
        SMTPMailto mailto = new SMTPMailto();
        try {
            mailto.unmarshal(mLocationTextField.getText());
        } catch (URISyntaxException ex) {
            error.setErrorMode(ExtensibilityElementConfigurationEditorComponent.PROPERTY_ERROR_EVT);
            error.setErrorMessage(ex.getLocalizedMessage());
        } catch (AddressException ex) {
            error.setErrorMode(ExtensibilityElementConfigurationEditorComponent.PROPERTY_ERROR_EVT);
            error.setErrorMessage(ex.getLocalizedMessage());
        }
        if (fireEvent) {
            ErrorPropagator.doFirePropertyChange(error, this);
        }

        return error;
    }

    public class MyActionListener implements ActionListener {

        public void actionPerformed(ActionEvent evt) {
            handleActionPerformed(evt);
        }
    }

    public class MyDocumentListener implements DocumentListener {
        // Handle insertions into the text field

        public void insertUpdate(DocumentEvent event) {
            validateEmailProperties(true);
        }

        // Handle deletions	from the text field
        public void removeUpdate(DocumentEvent event) {
            validateEmailProperties(true);
        }

        // Handle changes to the text field
        public void changedUpdate(DocumentEvent event) {
            validateEmailProperties(true);
        }
    }

    public class MyItemListener implements ItemListener {

        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            handleItemStateChanged(evt);
        }
    }

    private void handleItemStateChanged(ItemEvent evt) {
        if (evt.getSource() == mMessageTypeComboBox) {
            handleMessageType();
        } else if (evt.getSource() == mSendOptionComboBox) {
            handleSendOptionType();
        }
    }

    /**
     * Route the property change event to this panel
     */
    public void doFirePropertyChange(String name, Object oldValue, Object newValue) {
        firePropertyChange(name, oldValue,
                newValue);
    }

    /**
     * Trims input text and returns null, if blank.
     *
     * @param text
     * @return trimmed text, if blank returns null.
     */
    private String trimTextField(String text) {
        if (text == null) {
            return text;
        }
        String trimmedText = text.trim();
        if (trimmedText.length() == 0) {
            return null;
        }
        return text.trim();
    }

    public void setProjectinPanel(Project project) {
        mProject = project;
    }

    public void setWSDLModelinPanel(WSDLModel wsdlmodel) {
        mWSDLModel = wsdlmodel;
    }

    /**
     * Checks if the encoded type payload is selected
     * @return boolean true if the encoded type payload is selected
     */
    public boolean isEncodedPayload() {
        if (EmailConstants.ENCODED_DATA.equals(mMessageTypeComboBox.getSelectedItem().toString())) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Return message type.  Options are EmailConstants.XML_MESSAGE_TYPE,
     * EmailConstants.TEXT_MESSAGE_TYPE, EmailConstants.ENCODED_MESSAGE_TYPE
     *
     * @return
     */
    public int getMessageType() {
        // default is text
        Object typeObj = mMessageTypeComboBox.getSelectedItem();
        int msgType = EmailConstants.TEXT_MESSAGE_TYPE;
        if (typeObj != null) {
            if (EmailConstants.TEXT.equals(typeObj.toString())) {
                msgType = EmailConstants.TEXT_MESSAGE_TYPE;
            } else if (EmailConstants.XML.equals(typeObj.toString())) {
                msgType = EmailConstants.XML_MESSAGE_TYPE;
            } else if (EmailConstants.BINARY.equals(typeObj.toString())) {
                msgType = EmailConstants.BINARY_MESSAGE_TYPE;
            } else if (EmailConstants.ENCODED_DATA.equals(typeObj.toString())) {
                return EmailConstants.ENCODED_MESSAGE_TYPE;
            }
        }
        return msgType;
    }

    /**
     * get character encoding for the message type selected
     * must be "text"
     * @return
     */
    public String getCharEncoding() {
        return mCharEncodingComboBox.getSelectedItem() != null ? mCharEncodingComboBox.getSelectedItem().toString() : null;
    }

    /**
     * Return the encoding style value
     * @return String encoding style
     */
    public String getEncodingStyle() {
        return mEncodingStyleTextField.getText() != null ? mEncodingStyleTextField.getText().trim() : null;
    }

    /**
     * Checks if the xml payload selected
     * @return boolean true if the XML payload is selected
     */
    public boolean isXMLPayload() {
        Object typeObj = mMessageTypeComboBox.getSelectedItem();
        if (typeObj != null && EmailConstants.XML.equals(typeObj.toString())) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Returns the selected part type
     * @return Type
     */
    public GlobalType getSelectedPartType() {
        return mType;
    }

    /**
     * Returns the selected part type
     * @return Element
     */
    public GlobalElement getSelectedElementType() {
        return mElement;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox mCharEncodingComboBox;
    private javax.swing.JLabel mCharEncodingLabel;
    private javax.swing.JScrollPane mDescriptionDisplayScrollPane;
    private javax.swing.JTextPane mDescriptionDisplayTextPane;
    private javax.swing.JPanel mDescriptionPanel;
    private javax.swing.JButton mEditMailtoAttributesButton;
    private javax.swing.JLabel mEmailConnectionHeaderLabel;
    private javax.swing.JSeparator mEmailConnectionSeparator;
    private javax.swing.JLabel mEmailPayloadHeaderLabel;
    private javax.swing.JSeparator mEmailPayloadSeparator;
    protected javax.swing.JCheckBox mEmbedImgCheckBox;
    private javax.swing.JLabel mEmbedImgHtmlLabel;
    private javax.swing.JLabel mEmbedImgIconLabel;
    private javax.swing.JLabel mEncodingStyleLabel;
    public javax.swing.JTextField mEncodingStyleTextField;
    protected javax.swing.JCheckBox mHandleNMAttCheckBox;
    public javax.swing.JLabel mHandleNMAttLabel;
    private javax.swing.JLabel mLocationIconLabel;
    private javax.swing.JLabel mLocationLabel;
    public javax.swing.JTextField mLocationTextField;
    public javax.swing.JComboBox mMessageTypeComboBox;
    private javax.swing.JLabel mMessageTypeLabel;
    public javax.swing.JPasswordField mPasswordField;
    private javax.swing.JLabel mPasswordIconLabel;
    private javax.swing.JLabel mPasswordLabel;
    private javax.swing.JLabel mPortIconLabel;
    private javax.swing.JLabel mPortLabel;
    public javax.swing.JTextField mPortTextField;
    private javax.swing.JLabel mSMTPServerLabel;
    public javax.swing.JTextField mSMTPServerTextField;
    private javax.swing.JLabel mSendOpIconLabel;
    public javax.swing.JComboBox mSendOptionComboBox;
    private javax.swing.JLabel mSendOptionLabel;
    private javax.swing.JLabel mServerIconLabel;
    private javax.swing.JButton mTestConnectionButton;
    protected javax.swing.JCheckBox mUseSSLCheckBox;
    private javax.swing.JLabel mUseSSLIconLabel;
    private javax.swing.JLabel mUseSSLLabel;
    private javax.swing.JLabel mUserNameIconLabel;
    private javax.swing.JLabel mUserNameLabel;
    public javax.swing.JTextField mUserNameTextField;
    public javax.swing.JButton mXsdEleTypeButton;
    private javax.swing.JLabel mXsdElementTypeLabel;
    public javax.swing.JTextField mXsdElementTypeTextField;
    // End of variables declaration//GEN-END:variables
    // Style Document for Description Area
    private StyledDocument mDoc = null;
    private String[] mStyles = null;
    private MyActionListener mActionListener = null;
    private MyDocumentListener mDocumentListener = null;
    private MyItemListener mItemListener = null;
    private static final Logger mLogger = Logger.getLogger(OutboundMessagePanel.class.getName());
    private WSDLModel mWSDLModel = null;
    private Project mProject = null;
    private GlobalType mType = null;
    private GlobalElement mElement = null;
}

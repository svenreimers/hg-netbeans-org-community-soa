/*
 * OperationMethodChooserPanel.java
 *
 * Created on September 8, 2008, 2:29 PM
 */

package org.netbeans.modules.soa.pojo.wizards;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.xml.namespace.QName;
import org.netbeans.modules.soa.pojo.model.api.OperationMetadata;
import org.netbeans.modules.soa.pojo.model.api.PortTypeMetadata;
import org.netbeans.modules.soa.pojo.model.api.WSDLMetadata;
import org.netbeans.modules.soa.pojo.util.GeneratorUtil;
import org.netbeans.modules.soa.pojo.util.POJOSupportedDataTypes;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;

/**
 *
 * @author  sgenipudi
 */
public class OperationMethodChooserPanel extends javax.swing.JPanel {
    private POJOProviderAdvancedPanel mAdvancedPanel = null;
    private boolean mDisplayedAdvancedPanel = false;
    private WizardDescriptor mWizDesc = null;
    private List listeners = new ArrayList();
    
    /** Creates new form OperationMethodChooserPanel */
    public OperationMethodChooserPanel() {
        initComponents();
        jGenerateWSDL.setVisible(false);
    }
    
    public void setWizardDescriptor(WizardDescriptor wiz) {
        this.mWizDesc = wiz;
        Boolean boolObj = (Boolean) mWizDesc.getProperty(GeneratorUtil.HIDE_ADVANCED);
        if ( boolObj != null) {
            this.jAdvancedButton.setVisible(!boolObj.booleanValue());
        }
        
    }
    
    public String getMethodName() {
        return this.jTxtMethodName.getText();
    }

    public void setMethodName(String methodName) {
        this.jTxtMethodName.setText(methodName);
    }
    
    public boolean generateWSDL() {
        return this.jGenerateWSDL.isSelected();
    }
    
    
    public void addChangeListener(ChangeListener cl) {
        listeners.add(cl);
    }
    public void removeChangeListener(ChangeListener arg0) {
        listeners.remove(arg0);
    }
    
    private void fireChange()
    {
        ChangeEvent e = new ChangeEvent(this);
        for(Iterator it = listeners.iterator(); it.hasNext(); ((ChangeListener)it.next()).stateChanged(e));
    }       

    public POJOSupportedDataTypes getInputType() {
        return GeneratorUtil.POJO_IN_TYPES[this.cmbOpInType.getSelectedIndex()];
    }

    public POJOSupportedDataTypes getOutputType() {
        return GeneratorUtil.POJO_OUT_TYPES[this.cmbOpOutType.getSelectedIndex()];
    }    
    
    public boolean isAdvancedPanelLaunched() {
        return mAdvancedPanel != null;
    }
    public POJOProviderAdvancedPanel getAdvancedPanel() {
        if ( this.mAdvancedPanel == null) {
            mAdvancedPanel = new POJOProviderAdvancedPanel();
            mAdvancedPanel.addChangeListener(new POJOAdvancedChangeListener());
        }
        return this.mAdvancedPanel;
    }

    public boolean isInOut() {
        return (!isInOnly());
    }
    
    public boolean isInOnly() {
        return getOutputType().equals(POJOSupportedDataTypes.Void);
    }

    void enableOutputType() {
         cmbOpOutType.setEnabled(true);
    }
    
    void showAdvancedButton(boolean bool) {
        this.jAdvancedButton.setVisible(bool);
    }

    void setOutputType(String string) {
        if (string != null) {
            cmbOpOutType.setEnabled(true);
            this.cmbOpOutType.setSelectedItem(string);
            this.cmbOpOutType.setEnabled(false);
        } 
    }
        
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jTxtMethodName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTxtDescription = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jAdvancedButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jGenerateWSDL = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setLabelFor(jTxtMethodName);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jLabel1.text")); // NOI18N
        jLabel1.setToolTipText(org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jLabel1.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(jLabel1, gridBagConstraints);
        jLabel1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jLabel1.AccessibleContext.accessibleName")); // NOI18N

        jTxtMethodName.setText(org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jTxtMethodName.text")); // NOI18N
        jTxtMethodName.setToolTipText(org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jTxtMethodName.toolTipText")); // NOI18N
        jTxtMethodName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTxtMethodNameFocusGained(evt);
            }
        });
        jTxtMethodName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtMethodNameKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(jTxtMethodName, gridBagConstraints);

        jLabel6.setLabelFor(cmbOpInType);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jLabel6.text")); // NOI18N
        jLabel6.setToolTipText(org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jLabel6.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(jLabel6, gridBagConstraints);
        jLabel6.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jLabel6.AccessibleContext.accessibleName")); // NOI18N

        cmbOpInType.setModel(new javax.swing.DefaultComboBoxModel(GeneratorUtil.POJO_IN_TYPES));
        cmbOpInType.setToolTipText(org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.cmbOpInType.toolTipText")); // NOI18N
        cmbOpInType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbOpInTypeFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(cmbOpInType, gridBagConstraints);

        jLabel7.setLabelFor(cmbOpOutType);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jLabel7.text")); // NOI18N
        jLabel7.setToolTipText(org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jLabel7.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(jLabel7, gridBagConstraints);

        cmbOpOutType.setModel(new javax.swing.DefaultComboBoxModel(GeneratorUtil.POJO_OUT_TYPES));
        cmbOpOutType.setToolTipText(org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.cmbOpOutType.toolTipText")); // NOI18N
        cmbOpOutType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbOpOutTypeFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(cmbOpOutType, gridBagConstraints);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setFocusable(false);
        jTextArea1.setOpaque(false);
        jTextArea1.setVerifyInputWhenFocusTarget(false);
        jTxtDescription.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(jTxtDescription, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jAdvancedButton, org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jAdvancedButton.text")); // NOI18N
        jAdvancedButton.setToolTipText(org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jAdvancedButton.toolTipText")); // NOI18N
        jAdvancedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAdvancedButtonActionPerformed(evt);
            }
        });
        jAdvancedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jAdvancedButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(jAdvancedButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(jSeparator1, gridBagConstraints);

        jGenerateWSDL.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jGenerateWSDL, org.openide.util.NbBundle.getMessage(OperationMethodChooserPanel.class, "OperationMethodChooserPanel.jGenerateWSDL.text")); // NOI18N
        jGenerateWSDL.setFocusPainted(false);
        jGenerateWSDL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jGenerateWSDLFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 0);
        add(jGenerateWSDL, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void cmbOpInTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbOpInTypeFocusGained
// TODO add your handling code here:
this.jTextArea1.setText(NbBundle.getMessage (OperationMethodChooserPanel.class, "LBL_Operation_In_Type"));//NOI18N
}//GEN-LAST:event_cmbOpInTypeFocusGained

private void cmbOpOutTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbOpOutTypeFocusGained
// TODO add your handling code here:
this.jTextArea1.setText(NbBundle.getMessage (OperationMethodChooserPanel.class, "LBL_Operation_Out_Type"));//NOI18N
}//GEN-LAST:event_cmbOpOutTypeFocusGained

private void jAdvancedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAdvancedButtonActionPerformed
        POJOProviderAdvancedPanel adwPanel;
// TODO add your handling code here:
        //  if (! mAdvancedPanel.isEnabled()) {
        if ( this.mAdvancedPanel == null) {
            mAdvancedPanel = new POJOProviderAdvancedPanel();
        }
        if ( mWizDesc != null) {
            WizardDescriptor wizDesc = this.mWizDesc;
            MultiTargetChooserPanelGUI multiPanelGUI = (MultiTargetChooserPanelGUI) mWizDesc.getProperty(MultiTargetChooserPanel.MULTI_TARGET_GUI_INSTANCE);
            String className = multiPanelGUI.getTargetName();
            if ( className != null) {
                String pkgName = multiPanelGUI.getPackageName();
                String defaultNS = GeneratorUtil.getNamespace(pkgName, className);
                adwPanel = this.getAdvancedPanel();
                if (adwPanel.useDefaultValues() ) {
                    adwPanel.setEndpointName(className);
                    adwPanel.setInterfaceName(className + GeneratorUtil.POJO_INTERFACE_SUFFIX);
                    adwPanel.setInterfaceNameNS(defaultNS);
                    adwPanel.setOutMessageType(className + GeneratorUtil.POJO_OUT_MESSAGE_SUFFIX);
                    adwPanel.setOutMessageTypeNS(defaultNS);
                    adwPanel.setServiceName(className + GeneratorUtil.POJO_SERVICE_SUFFIX);
                    adwPanel.setServiceNameNS(defaultNS);
                    adwPanel.disableEdit(true);
                }
            }
        }
        mAdvancedPanel.setPOJOPanel(this);
        mAdvancedPanel.setWizDesc(this.mWizDesc);
        final POJOProviderAdvancedPanel advncPanel = this.mAdvancedPanel;
        final OperationMethodChooserPanel thisPanel = this;
            java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                advncPanel.setPreferredSize(thisPanel.getPreferredSize());
                advncPanel.setMaximumSize(thisPanel.getMaximumSize());
                advncPanel.setMinimumSize(thisPanel.getMinimumSize());
                
                
                JDialog dialog = new JDialog();
                Dimension dim  = new Dimension();
                dim.setSize(thisPanel.getPreferredSize().getWidth()+300, thisPanel.getPreferredSize().getHeight()+260);
                dialog.setPreferredSize(dim);
                dim  = new Dimension();
                dim.setSize(thisPanel.getMinimumSize().getWidth()+300, thisPanel.getMinimumSize().getHeight()+260);
                dialog.setMinimumSize(dim);
                dim  = new Dimension();
                dim.setSize(thisPanel.getMaximumSize().getWidth()+300, thisPanel.getMaximumSize().getHeight()+260);
                dialog.setMaximumSize(dim);
                dialog.setAlwaysOnTop(true);
                dialog.setResizable(false);
                dialog.setDefaultCloseOperation(
                    JDialog.DISPOSE_ON_CLOSE);
                dialog.addWindowListener(new WindowListener() {
                    public void windowOpened(WindowEvent e) {
                    }

                    public void windowClosing(WindowEvent e) {

                    }

                    public void windowClosed(WindowEvent e) {
                        advncPanel.rollbackUserEntries();
                    }

                    public void windowIconified(WindowEvent e) {
                                            }

                    public void windowDeiconified(WindowEvent e) {

                    }

                    public void windowActivated(WindowEvent e) {
                    }

                    public void windowDeactivated(WindowEvent e) {
                    }
                    
                });
                dialog.setSize(thisPanel.getSize());
                dialog.getContentPane().add(mAdvancedPanel);
                dialog.setModal(true);
                dialog.enableInputMethods(true);
                int w = (int) (thisPanel.getPreferredSize().getWidth());
                int h = (int) (thisPanel.getPreferredSize().getHeight());
                Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                dialog.setLocation(screenSize.width/2 - w/2, screenSize.height/2 - h/2);
                advncPanel.setParent(dialog);
                String title = NbBundle.getMessage (OperationMethodChooserPanel.class, "LBL_ProviderAdvanced_Dialog"); //NOI18N
                dialog.setTitle(title);
                dialog.getAccessibleContext().setAccessibleName(title);
                dialog.getAccessibleContext().setAccessibleDescription(title);
                dialog.pack();
                thisPanel.mDisplayedAdvancedPanel= true;
                dialog.setResizable(true);
                dialog.setVisible(true);
            }
       });
}//GEN-LAST:event_jAdvancedButtonActionPerformed

private void jAdvancedButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jAdvancedButtonMouseClicked

}//GEN-LAST:event_jAdvancedButtonMouseClicked

private void jTxtMethodNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtMethodNameFocusGained
// TODO add your handling code here:
this.jTextArea1.setText(NbBundle.getMessage (OperationMethodChooserPanel.class, "LBL_Method_Name"));    //NOI18N
}//GEN-LAST:event_jTxtMethodNameFocusGained

private void jGenerateWSDLFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jGenerateWSDLFocusGained
// TODO add your handling code here:
this.jTextArea1.setText(NbBundle.getMessage (OperationMethodChooserPanel.class, "LBL_Choose_GenWSDL"));   //NOI18N     
}//GEN-LAST:event_jGenerateWSDLFocusGained

void populateAdvancedPanel(WSDLMetadata wsdlMetadata) {
            
            this.jGenerateWSDL.setSelected(false);
            //this.jAdvancedButton.setEnabled(false);
            String serviceName = null;
            PortTypeMetadata ptMetadata = wsdlMetadata.getPortTypeMetadaList().get(0);
            String namespace = null;
            namespace = ptMetadata.getPortType().getNamespaceURI();            
            serviceName = ptMetadata.getPortType().getLocalPart()+GeneratorUtil.POJO_SERVICE_SUFFIX;
            //Set the method name as Operation Name.
            List<OperationMetadata> opnMtDtList = ptMetadata.getOperationMetadataList();
            if ( opnMtDtList != null && opnMtDtList.size()  > 0) {
                OperationMetadata opm1 = opnMtDtList.get(0);
                if ( opm1 != null){
                    String methodName = opm1.getOperationName();
                    this.jTxtMethodName.setText(methodName);
                }
            }
            
               
            this.getAdvancedPanel().setServiceName(serviceName);
            this.mAdvancedPanel.setServiceNameNS(namespace);
            this.mAdvancedPanel.setDefaultValues(false);
            
            this.mAdvancedPanel.setInterfaceName(ptMetadata.getPortType().getLocalPart());
            this.mAdvancedPanel.setInterfaceNameNS(namespace);
            QName outMessageName = ptMetadata.getOperationMetadataList().get(0).getOutputMessageName();
            if ( outMessageName != null) {
                this.mAdvancedPanel.setOutMessageType(outMessageName.getLocalPart());
                this.mAdvancedPanel.setOutMessageTypeNS(outMessageName.getNamespaceURI());
            }else {
                this.cmbOpOutType.setSelectedItem(POJOSupportedDataTypes.Void);//NOI18N
                this.cmbOpOutType.setEditable(false);
                this.cmbOpOutType.setEnabled(false);
                this.mAdvancedPanel.setOutMessageType("");
                this.mAdvancedPanel.setOutMessageTypeNS("");
            }
            
            mAdvancedPanel.setDefaultValues(false);
          //  this.jAdvancedButton.setVisible(false);
            this.mWizDesc.putProperty(GeneratorUtil.POJO_ADVANCED_SAVED, GeneratorUtil.POJO_ADVANCED_SAVED);
    
}
private void jTxtMethodNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtMethodNameKeyReleased
// TODO add your handling code here:
    fireChange();
}//GEN-LAST:event_jTxtMethodNameKeyReleased

private void undoBCWizard() {
            mAdvancedPanel.setDefaultValues(false);
            this.jAdvancedButton.setEnabled(true);
            this.jAdvancedButton.setVisible(true);
            this.cmbOpOutType.setEditable(true);
            this.cmbOpOutType.setEnabled(true);
            this.mWizDesc.putProperty(GeneratorUtil.POJO_ADVANCED_SAVED, GeneratorUtil.POJO_ADVANCED_SAVED);
    
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final javax.swing.JComboBox cmbOpInType = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbOpOutType = new javax.swing.JComboBox();
    private javax.swing.JButton jAdvancedButton;
    private javax.swing.JCheckBox jGenerateWSDL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JScrollPane jTxtDescription;
    private javax.swing.JTextField jTxtMethodName;
    // End of variables declaration//GEN-END:variables

    class POJOAdvancedChangeListener implements ChangeListener {

        public void stateChanged(ChangeEvent e) {
            fireChange();
        }
        
    }
    
}

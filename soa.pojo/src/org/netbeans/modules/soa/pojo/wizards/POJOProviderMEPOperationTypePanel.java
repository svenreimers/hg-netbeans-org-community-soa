/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.soa.pojo.wizards;

import java.awt.Dimension;
import javax.swing.JDialog;
import javax.swing.JPanel;
import org.netbeans.modules.soa.pojo.util.GeneratorUtil;
import org.netbeans.modules.soa.pojo.util.POJOSupportedDataTypes;
import org.openide.util.NbBundle;


public final class POJOProviderMEPOperationTypePanel extends JPanel {
    private POJOProviderAdvancedPanel mAdvancedPanel = new POJOProviderAdvancedPanel();
    
    /** Creates new form POJOProviderVisualPanel1 */
    public POJOProviderMEPOperationTypePanel() {
        initComponents();
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.name");//NOI18N
    }
    
    public boolean isInOut() {
        return this.jRbInOut.isSelected();
    }
    
    public boolean isInOnly() {
        return this.jRbInOnly.isSelected();
    }    
    
    
    public POJOSupportedDataTypes getInputType() {
        return GeneratorUtil.POJO_IN_TYPES[this.cmbOpInType.getSelectedIndex()];
    }

    public POJOSupportedDataTypes getOutputType() {
        return GeneratorUtil.POJO_OUT_TYPES[this.cmbOpOutType.getSelectedIndex()];
    }
    
    
    public POJOProviderAdvancedPanel getAdvancedPanel() {
        return this.mAdvancedPanel;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel5 = new javax.swing.JLabel();
        jRbInOut = new javax.swing.JRadioButton();
        jRbInOnly = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jAdvancedButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTxtDescription = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setMinimumSize(new java.awt.Dimension(416, 255));
        setPreferredSize(new java.awt.Dimension(416, 255));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.jLabel5.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 0);
        add(jLabel5, gridBagConstraints);

        jRbInOut.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jRbInOut, org.openide.util.NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.jRbInOut.text")); // NOI18N
        jRbInOut.setToolTipText(org.openide.util.NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.jRbInOut.toolTipText")); // NOI18N
        jRbInOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbInOutActionPerformed(evt);
            }
        });
        jRbInOut.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jRbInOutFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 12, 0);
        add(jRbInOut, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jRbInOnly, org.openide.util.NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.jRbInOnly.text")); // NOI18N
        jRbInOnly.setToolTipText(org.openide.util.NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.jRbInOnly.toolTipText")); // NOI18N
        jRbInOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbInOnlyActionPerformed(evt);
            }
        });
        jRbInOnly.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jRbInOnlyFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 0);
        add(jRbInOnly, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.jLabel6.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 0);
        add(jLabel6, gridBagConstraints);

        cmbOpInType.setModel(new javax.swing.DefaultComboBoxModel(GeneratorUtil.POJO_IN_TYPES));
        cmbOpInType.setToolTipText(org.openide.util.NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.cmbOpInType.toolTipText")); // NOI18N
        cmbOpInType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbOpInTypeFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 12, 0);
        add(cmbOpInType, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.jLabel7.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 0);
        add(jLabel7, gridBagConstraints);

        cmbOpOutType.setModel(new javax.swing.DefaultComboBoxModel(GeneratorUtil.POJO_OUT_TYPES));
        cmbOpOutType.setToolTipText(org.openide.util.NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.cmbOpOutType.toolTipText")); // NOI18N
        cmbOpOutType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbOpOutTypeFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 12, 0);
        add(cmbOpOutType, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jAdvancedButton, org.openide.util.NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.jAdvancedButton.text")); // NOI18N
        jAdvancedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAdvancedButtonActionPerformed(evt);
            }
        });
        jAdvancedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jAdvancedButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jAdvancedButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(POJOProviderMEPOperationTypePanel.class, "POJOProviderMEPOperationTypePanel.jLabel1.text_1")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 0);
        add(jLabel1, gridBagConstraints);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setFocusable(false);
        jTxtDescription.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 12, 0);
        add(jTxtDescription, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void jRbInOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbInOutActionPerformed
 jRbInOnly.setSelected(false);
}//GEN-LAST:event_jRbInOutActionPerformed

private void jRbInOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbInOnlyActionPerformed
// TODO add your handling code here:
    jRbInOut.setSelected(false);
}//GEN-LAST:event_jRbInOnlyActionPerformed

private void jAdvancedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAdvancedButtonActionPerformed
// TODO add your handling code here:
        //  if (! mAdvancedPanel.isEnabled()) {
        final POJOProviderAdvancedPanel advncPanel = this.mAdvancedPanel;
        final POJOProviderMEPOperationTypePanel thisPanel = this;
            java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              /*  if (! advncPanel.isSaved()) {
                    advncPanel.rollbackUserEntries();
                }*/
                advncPanel.setPreferredSize(thisPanel.getPreferredSize());
                advncPanel.setMaximumSize(thisPanel.getMaximumSize());
                advncPanel.setMinimumSize(thisPanel.getMinimumSize());

                
                JDialog dialog = new JDialog();
                dialog.setLocation(thisPanel.getX(),thisPanel.getY());
                Dimension dim  = new Dimension();
                dim.setSize(thisPanel.getPreferredSize().getWidth()+200, thisPanel.getPreferredSize().getHeight()+200);
                dialog.setPreferredSize(dim);
                dim  = new Dimension();
                dim.setSize(thisPanel.getMinimumSize().getWidth()+200, thisPanel.getMinimumSize().getHeight()+200);
                dialog.setMinimumSize(dim);
                 dim  = new Dimension();
                dim.setSize(thisPanel.getMaximumSize().getWidth()+200, thisPanel.getMaximumSize().getHeight()+200);
                dialog.setMaximumSize(dim);
                dialog.setAlwaysOnTop(true);
                dialog.setResizable(false);
                dialog.setDefaultCloseOperation(
                    JDialog.DISPOSE_ON_CLOSE);

                dialog.setSize(thisPanel.getSize());
                dialog.add(mAdvancedPanel);
                dialog.setModal(true);
                dialog.setLocationRelativeTo(null);
                advncPanel.setParent(dialog);
                dialog.pack();
                dialog.setVisible(true);
            }
       });
}//GEN-LAST:event_jAdvancedButtonActionPerformed

private void jAdvancedButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jAdvancedButtonMouseClicked
    
}//GEN-LAST:event_jAdvancedButtonMouseClicked

private void jRbInOutFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jRbInOutFocusGained
// TODO add your handling code here:
    this.jTextArea1.setText(NbBundle.getMessage (POJOProviderMEPOperationTypePanel.class, "LBL_In_Out_MEP_Info"));
}//GEN-LAST:event_jRbInOutFocusGained

private void jRbInOnlyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jRbInOnlyFocusGained
// TODO add your handling code here:
    this.jTextArea1.setText(NbBundle.getMessage (POJOProviderMEPOperationTypePanel.class, "LBL_In_Only_MEP_Info"));
}//GEN-LAST:event_jRbInOnlyFocusGained

private void cmbOpInTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbOpInTypeFocusGained
// TODO add your handling code here:
this.jTextArea1.setText(NbBundle.getMessage (POJOProviderMEPOperationTypePanel.class, "LBL_Operation_In_Type"));    
}//GEN-LAST:event_cmbOpInTypeFocusGained

private void cmbOpOutTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbOpOutTypeFocusGained
// TODO add your handling code here:
this.jTextArea1.setText(NbBundle.getMessage (POJOProviderMEPOperationTypePanel.class, "LBL_Operation_Out_Type"));    
}//GEN-LAST:event_cmbOpOutTypeFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private final javax.swing.JComboBox cmbOpInType = new javax.swing.JComboBox();
    private final javax.swing.JComboBox cmbOpOutType = new javax.swing.JComboBox();
    private javax.swing.JButton jAdvancedButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JRadioButton jRbInOnly;
    private javax.swing.JRadioButton jRbInOut;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JScrollPane jTxtDescription;
    // End of variables declaration//GEN-END:variables
}


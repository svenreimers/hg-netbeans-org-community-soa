package org.netbeans.modules.etl.ui.view.wizardsloader;

import javax.swing.JPanel;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.util.HashMap;
import javax.swing.ButtonModel;
import net.java.hulp.i18n.Logger;
import org.netbeans.modules.etl.logger.Localizer;
import org.netbeans.modules.etl.ui.view.wizards.ETLCollaborationWizard;
import org.openide.WizardDescriptor;

public final class SelectLoaderTypeVisualPanel extends JPanel {

    private static transient final Logger mLogger = Logger.getLogger(SelectLoaderTypeVisualPanel.class.getName());
    private static transient final Localizer mLoc = Localizer.get();
    HashMap loaderTypeMap = new HashMap();
    private String ACTION_LBL_BASIC_ETL = "LBL_BASIC_ETL";
    private String ACTION_LBL_BULKLOADER = "LBL_BULKLOADER";
    private String ACTION_LBL_ADV_ETL = "LBL_ADV_ETL";

    /**
     * Creates new form ChooseTableVisualPanel
     */
    public SelectLoaderTypeVisualPanel(SelectLoaderTypePanel panel) {
        initComponents();

        loaderTypeMap.put("LBL_BASIC_ETL", new Integer(0));
        loaderTypeMap.put("LBL_ADV_ETL", new Integer(1));
        loaderTypeMap.put("LBL_BULKLOADER", new Integer(2));
        descriptionTextArea.setText(desc_basicetl);
        
        setMinimumSize(new Dimension(100, 100));
        setMaximumSize(new Dimension(100, 100));
        setPreferredSize(new Dimension(100, 100));
    }

    @Override
    public String getName() {
        String nbBundle1 = mLoc.t("BUND751: Select Type of ETL Loader");
        return nbBundle1.substring(15);
    }

    protected int getLoaderType() {
        ButtonModel buttonmodel = loadertypebuttonGroup.getSelection();
        return ((Integer) loaderTypeMap.get(buttonmodel.getActionCommand())).intValue();

    }

    protected void setLoaderChoice(int loadertype, WizardDescriptor wiz) {
        switch (loadertype) {
            case 0:
                basicetlradiobutton.setSelected(true);
                wiz.putProperty(ETLCollaborationWizard.IS_BULK_LOADER, new Boolean(false));
                wiz.putProperty(ETLCollaborationWizard.IS_BASIC_ETL_LOADER, new Boolean(true));
                break;
            case 1:
                sourceextractorRadioButton.setSelected(true);
                wiz.putProperty(ETLCollaborationWizard.IS_BULK_LOADER, new Boolean(false));
                wiz.putProperty(ETLCollaborationWizard.IS_BASIC_ETL_LOADER, new Boolean(false));
                break;
            case 2:
                bulkloaderRadioButton.setSelected(true);
                wiz.putProperty(ETLCollaborationWizard.IS_BULK_LOADER, new Boolean(true));
                wiz.putProperty(ETLCollaborationWizard.IS_BASIC_ETL_LOADER, new Boolean(false));
                break;
            default:
                basicetlradiobutton.setSelected(true);
        }
    }

    protected void initLoaderTypeSelection(Integer typecode) {
        switch (typecode.intValue()) {
            case 0:
                basicetlradiobutton.setSelected(true);
                break;
            case 1:
                sourceextractorRadioButton.setSelected(true);
                break;
            case 2:
                bulkloaderRadioButton.setSelected(true);
                break;
            default:
                basicetlradiobutton.setSelected(true);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadertypebuttonGroup = new javax.swing.ButtonGroup();
        sourceextractorRadioButton = new javax.swing.JRadioButton();
        bulkloaderRadioButton = new javax.swing.JRadioButton();
        basicetlradiobutton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        String nbBundle1 = mLoc.t("BUND900: Brief Description for Selected Option");
        descriptionTextArea = new javax.swing.JTextArea();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Select Loader Type"));
        setMaximumSize(new java.awt.Dimension(450, 350));
        setMinimumSize(new java.awt.Dimension(100, 100));
        setPreferredSize(new java.awt.Dimension(450, 350));

        loadertypebuttonGroup.add(sourceextractorRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(sourceextractorRadioButton, "Advanced Extract - Transform - Load (ETL)");
        sourceextractorRadioButton.setToolTipText("ETL from File or JDBC Source to JDBC Target");
        sourceextractorRadioButton.setActionCommand(ACTION_LBL_ADV_ETL);
        sourceextractorRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                advancedEtlItemStateChanges(evt);
            }
        });

        loadertypebuttonGroup.add(bulkloaderRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(bulkloaderRadioButton, "Bulk Loader");
        bulkloaderRadioButton.setToolTipText("Loading into JDBC Target from files having same delimiter structure.\nRecommended for loading Master Index Data into MIDM Database");
        bulkloaderRadioButton.setActionCommand(ACTION_LBL_BULKLOADER);
        bulkloaderRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bulkLoaderItemStateChanged(evt);
            }
        });

        loadertypebuttonGroup.add(basicetlradiobutton);
        basicetlradiobutton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(basicetlradiobutton, "Basic Extract - Transform - Load (ETL)");
        basicetlradiobutton.setToolTipText("ETL from JDBC Source to JDBC Target");
        basicetlradiobutton.setActionCommand(ACTION_LBL_BASIC_ETL);
        basicetlradiobutton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                basicEtlItemStateChanged(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(406, 155));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(406, 155));

        descriptionTextArea.setColumns(10);
        descriptionTextArea.setEditable(false);
        descriptionTextArea.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setWrapStyleWord(true);
        descriptionTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Brief Description for Selected Option"));
        descriptionTextArea.setMaximumSize(new java.awt.Dimension(406, 155));
        descriptionTextArea.setMinimumSize(new java.awt.Dimension(396, 151));
        descriptionTextArea.setPreferredSize(new java.awt.Dimension(400, 150));
        jScrollPane1.setViewportView(descriptionTextArea);
        descriptionTextArea.getAccessibleContext().setAccessibleName(nbBundle1.substring(15));
        descriptionTextArea.getAccessibleContext().setAccessibleDescription(nbBundle1.substring(15));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(bulkloaderRadioButton)
                    .add(sourceextractorRadioButton)
                    .add(basicetlradiobutton)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 406, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(basicetlradiobutton)
                .add(15, 15, 15)
                .add(sourceextractorRadioButton)
                .add(18, 18, 18)
                .add(bulkloaderRadioButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 31, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 155, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void basicEtlItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_basicEtlItemStateChanged
    setSelectionDescription(evt);
    this.descriptionTextArea.setPreferredSize(new Dimension(406,150));
    this.jScrollPane1.setPreferredSize(new Dimension(406,155));    
}//GEN-LAST:event_basicEtlItemStateChanged

private void advancedEtlItemStateChanges(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_advancedEtlItemStateChanges
    setSelectionDescription(evt);
    this.descriptionTextArea.setPreferredSize(new Dimension(406,195));
    this.jScrollPane1.setPreferredSize(new Dimension(406,200));
}//GEN-LAST:event_advancedEtlItemStateChanges

private void bulkLoaderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bulkLoaderItemStateChanged
    setSelectionDescription(evt);
    this.descriptionTextArea.setPreferredSize(new Dimension(406,150));
    this.jScrollPane1.setPreferredSize(new Dimension(406,155));    
}//GEN-LAST:event_bulkLoaderItemStateChanged
    

private void setSelectionDescription(ItemEvent e){
    javax.swing.JRadioButton selectedloadertype = (javax.swing.JRadioButton)e.getItemSelectable();
    Integer loadertype = (Integer)loaderTypeMap.get(selectedloadertype.getActionCommand());
        switch (loadertype.intValue()) {
            case 0:
                descriptionTextArea.setText(desc_basicetl);
                break;
            case 1:
                descriptionTextArea.setText(desc_advetl);
                break;
            case 2:
                descriptionTextArea.setText(desc_bulkloader);
                break;
            default:
                descriptionTextArea.setText(desc_basicetl);
        }    
}

public boolean canAdvance() {
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton basicetlradiobutton;
    private javax.swing.JRadioButton bulkloaderRadioButton;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup loadertypebuttonGroup;
    private javax.swing.JRadioButton sourceextractorRadioButton;
    // End of variables declaration//GEN-END:variables
    private final String desc_basicetl = "Basic Extract - Transform - Load (ETL) option facilitates data movement between selected Relational Data Sources.\n\n" +
            "These relational data sources must be registerd with Database Explorer (Services Tab). Virtual Databases created from " +
            "flat files, using \"Tools > Virtual Database\" option from the NetBeans IDE, gets registered with Database Explorer." +
            "\n\nThis option supports data movement between most of the standard databases." ;
    private final String desc_advetl = "Advanced Extract - Transform - Load (ETL) option build on top of Basic option. The wizard will allow you to create a project private virtual database " +
            "from flat files such as Delimited/Fixed-Width, Spreadsheets etc., which can be used as Source or Target.\n\n" +
            "This option also facilitates generating virtual database for staging Master Index data, for a given Master Index Object Model (object.xml)." +
            "\n\nThis option may produce one or more collaborations based on number of target tables selected.";
    private final String desc_bulkloader = "Bulk Loader option is useful for loading delimited flatfiles, which is structurally same as the selected target database tables." +
            "\n\nThis option specifically facilitates loading Master Index Image files into MIDM database." +
            "\n\nThis option may produces multiple collaborations based on number of target tables selected for loading.";
}


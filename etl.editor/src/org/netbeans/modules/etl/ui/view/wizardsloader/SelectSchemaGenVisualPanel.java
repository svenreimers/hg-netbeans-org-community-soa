package org.netbeans.modules.etl.ui.view.wizardsloader;

import java.io.File;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import net.java.hulp.i18n.Logger;
import org.netbeans.modules.dm.virtual.db.model.VirtualDBTable;
import org.netbeans.modules.dm.virtual.db.model.VirtualDatabaseModel;
import org.netbeans.modules.etl.logger.Localizer;
import org.netbeans.modules.masterindex.schemagenerator.TargetDBSchemaGenerator;

public final class SelectSchemaGenVisualPanel extends JPanel {

    private static transient final Logger mLogger = Logger.getLogger(SelectSchemaGenVisualPanel.class.getName());
    private static transient final Localizer mLoc = Localizer.get();
    private boolean canProceed = true;
    TargetDBSchemaGenerator dbgen;
    private SelectSchemaGenPanel owner;
    private VirtualDatabaseModel currentModel;
    private VirtualDBTable currentTable;
    private String url;
    private static Map<String, String> encodingMap = new HashMap<String, String>();
    private static Map<String, String> typeMap = new HashMap<String, String>();

    /**
     * Creates new form ChooseTableVisualPanel
     */
    public SelectSchemaGenVisualPanel(SelectSchemaGenPanel panel) {
        owner = panel;
        initComponents();
        setMinimumSize(new Dimension(100, 100));
        setMaximumSize(new Dimension(100, 100));
        setPreferredSize(new Dimension(100, 100));
    }

    @Override
    public String getName() {
        String nbBundle1 = mLoc.t("BUND526: Generate Target Database Master Index Model");
        return nbBundle1.substring(15);
    }

    public void setDBModel(VirtualDatabaseModel model) {
        currentModel = model;
    }

    public void setCurrentTable(VirtualDBTable table) {
        currentTable = table;
    }

    public void setJDBCUrl(String jdbcURL) {
        url = jdbcURL;
    }

    private void setError(String errorText) {
        error.setText(errorText);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        error = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        objectdefinput = new javax.swing.JTextField();
        schemagenloc = new javax.swing.JTextField();
        masterindexdbname = new javax.swing.JTextField();
        selectObjDefButton = new javax.swing.JButton();
        objectdeflocButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        isjdbctarget = new javax.swing.JCheckBox();
        generatedbbutton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        sysfieldsize = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        pkfieldsize = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Create Target Database from Master Index Object Definition"));
        setMaximumSize(new java.awt.Dimension(450, 350));
        setMinimumSize(new java.awt.Dimension(100, 100));
        setPreferredSize(new java.awt.Dimension(515, 350));

        error.setForeground(new java.awt.Color(255, 0, 0));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Object Definition File");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "Target Database Folder");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, "Target Database Name");

        objectdefinput.setEnabled(false);

        schemagenloc.setEnabled(false);

        masterindexdbname.setEnabled(false);
        masterindexdbname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masterindexdbnameActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(selectObjDefButton, "Select File");
        selectObjDefButton.setEnabled(false);
        selectObjDefButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectObjectDefFileActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(objectdeflocButton, "Select Dir");
        objectdeflocButton.setEnabled(false);
        objectdeflocButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectGenSchemaDirActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, "Use Existing Database Target Tables:");

        isjdbctarget.setSelected(true);
        isjdbctarget.setToolTipText("Uncheck this to generate staging database for Master Index Projects.");
        isjdbctarget.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                isJdbcTargetItemStateChaned(evt);
            }
        });
        isjdbctarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isjdbctargetActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(generatedbbutton, "Generate DB");
        generatedbbutton.setEnabled(false);
        generatedbbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateMasterIndexDBActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, "System Fields Size");

        sysfieldsize.setColumns(3);
        sysfieldsize.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sysfieldsize.setText("32");
        sysfieldsize.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, "Generated PK Field Size");

        pkfieldsize.setColumns(3);
        pkfieldsize.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pkfieldsize.setText("32");
        pkfieldsize.setEnabled(false);
        pkfieldsize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pkfieldsizeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(10);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Generates Axion Database for staging Master Index source data, based on the given object.xml.\n\nGenerated Staging database can be used as the Target Database for this ETL project.\n\nUn-check the checkbox to enable the staging database generation option.  ");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));
        jScrollPane1.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(isjdbctarget)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(jLabel4)
                        .addContainerGap(402, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(error, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                        .add(109, 109, 109))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel2)
                            .add(jLabel3))
                        .add(14, 14, 14)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, objectdefinput, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, masterindexdbname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, schemagenloc, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(sysfieldsize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(46, 46, 46)
                                .add(jLabel6)
                                .add(18, 18, 18)
                                .add(pkfieldsize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(objectdeflocButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .add(selectObjDefButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .add(generatedbbutton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                        .add(10, 10, 10))
                    .add(layout.createSequentialGroup()
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                        .addContainerGap(10, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jLabel5)
                    .add(isjdbctarget))
                .add(7, 7, 7)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(objectdefinput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(selectObjDefButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(objectdeflocButton)
                    .add(schemagenloc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(masterindexdbname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(generatedbbutton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(sysfieldsize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pkfieldsize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(error)
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void isjdbctargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isjdbctargetActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_isjdbctargetActionPerformed

private void isJdbcTargetItemStateChaned(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_isJdbcTargetItemStateChaned
// TODO add your handling code here:
    if (evt.getStateChange() == ItemEvent.DESELECTED) {
        //Check Box De-selected
        canProceed = false;
        objectdefinput.setEnabled(true);
        selectObjDefButton.setEnabled(true);
        schemagenloc.setEnabled(true);
        objectdeflocButton.setEnabled(true);
        masterindexdbname.setEnabled(true);
        generatedbbutton.setEnabled(true);
        sysfieldsize.setEnabled(true);
        sysfieldsize.setText("32");
        pkfieldsize.setEnabled(true);
        pkfieldsize.setText("32");
        SelectSchemaGenVisualPanel.this.owner.fireChangeEvent();
    } else {
        //Check Box Selected
        canProceed = true;
        objectdefinput.setText("");
        objectdefinput.setEnabled(false);
        selectObjDefButton.setEnabled(false);
        schemagenloc.setText("");
        schemagenloc.setEnabled(false);
        objectdeflocButton.setEnabled(false);
        masterindexdbname.setText("");
        masterindexdbname.setEnabled(false);
        generatedbbutton.setEnabled(false);
        sysfieldsize.setEnabled(false);
        sysfieldsize.setText("32");
        pkfieldsize.setEnabled(false);
        pkfieldsize.setText("32");
        SelectSchemaGenVisualPanel.this.owner.fireChangeEvent();
    }
}//GEN-LAST:event_isJdbcTargetItemStateChaned

private void generateMasterIndexDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateMasterIndexDBActionPerformed
// TODO add your handling code here:
    // Do some basic validation here    
    boolean isValid = true;
    int pksize = 32;
    int defsystemfieldsize = 32;
    error.setForeground(new java.awt.Color(255, 0, 0));
    /* Check if System Field size is fine */
    if ((this.sysfieldsize.getText().trim() != null) || (this.sysfieldsize.getText().trim().length() != 0)) {
        //Check if the field is an integer.
        try {
            int input = Integer.parseInt(this.sysfieldsize.getText());
            // Check that input > 0
            if (input > 0) {
                defsystemfieldsize = input;
            } else {
                this.error.setText("System Fields Size should be greater than 0");
                isValid = false;
            }
        } catch (NumberFormatException nfe) {
            this.error.setText("System Fields Size should be an integer");
            isValid = false;
        }
    } else {
        this.error.setText("System Field Size cannot be null");
        isValid = false;
    }

    /* Check if Generated PK Field size is fine */
    if ((this.pkfieldsize.getText().trim() != null) || (this.pkfieldsize.getText().trim().length() != 0)) {
        //Check if the field is an integer.
        try {
            int input = Integer.parseInt(this.pkfieldsize.getText());
            // Check that input > 0
            if (input > 0) {
                pksize = input;
            } else {
                this.error.setText("Primary Key Fields Size should be greater than 0");
                isValid = false;
            }
        } catch (NumberFormatException nfe) {
            this.error.setText("Primary Key Size should be an integer");
            isValid = false;
        }
    } else {
        this.error.setText("Primary Key Size cannot be null");
        isValid = false;
    }

    if (isValid) {
        dbgen = TargetDBSchemaGenerator.getTargetDBSchemaGenerator();
        String deffilename = objectdefinput.getText();
        File mimodel = new File(deffilename);
        String dbloc = schemagenloc.getText();
        String newdbname = masterindexdbname.getText();
        //boolean fileIsValid = dbgen.setEViewConfigFilePath(dbloc, deffilename);//("C:/temp/eviewconfig", "objectdef.xml");
        boolean fileIsValid = dbgen.setEViewConfigFilePath(mimodel.getParent(), mimodel.getName(), pksize, defsystemfieldsize);//("C:/temp/eviewconfig", "objectdef.xml");

        if (fileIsValid) {
            File file = new File(dbloc);
            if (!file.exists()) {
                file.mkdirs();
            }
            String status = dbgen.createTargetDB(dbloc, newdbname); //C:\temp\AAADB

            String msg = "";
            if (status.equals("success")) {
                msg = "Generated the Schema Successfully";
                canProceed = true;
                SelectSchemaGenVisualPanel.this.owner.fireChangeEvent();
                error.setForeground(new java.awt.Color(0, 100, 0));
                error.setText(msg);
            }
            mLogger.infoNoloc(mLoc.t(msg));
        } else {
            error.setText("File not found on the path : " + deffilename);
        }
    }
}//GEN-LAST:event_generateMasterIndexDBActionPerformed

private void selectObjectDefFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectObjectDefFileActionPerformed
// TODO add your handling code here:
    JFileChooser chooser = new JFileChooser();
    //chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    FileFilter currentFilter = chooser.getFileFilter();
    chooser.addChoosableFileFilter(new Filter(new String[]{".xml"}));
    chooser.setFileFilter(currentFilter);
    int value = chooser.showOpenDialog(this);
    if (value == JFileChooser.APPROVE_OPTION) {
        objectdefinput.setText(chooser.getSelectedFile().toString());//getCurrentDirectory().toString());
    }
}//GEN-LAST:event_selectObjectDefFileActionPerformed

private void selectGenSchemaDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectGenSchemaDirActionPerformed
// TODO add your handling code here:
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int value = chooser.showOpenDialog(this);
    if (value == JFileChooser.APPROVE_OPTION) {
        schemagenloc.setText(chooser.getSelectedFile().toString());
    }
}//GEN-LAST:event_selectGenSchemaDirActionPerformed

private void pkfieldsizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pkfieldsizeActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_pkfieldsizeActionPerformed

private void masterindexdbnameActionPerformed(java.awt.event.ActionEvent evt) {                                                  
    if (masterindexdbname.getText() != null || !masterindexdbname.getText().equals("")) {
        generatedbbutton.setEnabled(true);
    } else {
        generatedbbutton.setEnabled(false);
    }
}                                           

    public String getGeneratedSchemaDbConnectionURI() {
        if (dbgen != null) {
            return dbgen.getConnectionUri();
        }
        return null;
    }

    public List getGeneratedSchemaDbTables() {
        if (dbgen != null) {
            return dbgen.getTableList();
        }
        return null;
    }

    class Filter extends javax.swing.filechooser.FileFilter {

        private String[] extensions;

        public Filter(String[] extensions) {
            this.extensions = new String[extensions.length];
            for (int i = 0; i < extensions.length; i++) {
                this.extensions[i] = extensions[i].toUpperCase();
            }
        }

        @Override
        public boolean accept(File file) {
            //String filename = file.getName();
            //return filename.endsWith(".xml");
            if (file.isDirectory()) {
                return true;
            }
            for (int i = 0; i < extensions.length; i++) {
                if (file.getName().toUpperCase().endsWith(extensions[i])) {
                    return true;
                }
            }

            return false;
        }

        public String getDescription() {
            return "*.xml";
        }
    }

    public boolean canAdvance() {
        return canProceed;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel error;
    private javax.swing.JButton generatedbbutton;
    private javax.swing.JCheckBox isjdbctarget;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField masterindexdbname;
    private javax.swing.JTextField objectdefinput;
    private javax.swing.JButton objectdeflocButton;
    private javax.swing.JTextField pkfieldsize;
    private javax.swing.JTextField schemagenloc;
    private javax.swing.JButton selectObjDefButton;
    private javax.swing.JTextField sysfieldsize;
    // End of variables declaration//GEN-END:variables
}
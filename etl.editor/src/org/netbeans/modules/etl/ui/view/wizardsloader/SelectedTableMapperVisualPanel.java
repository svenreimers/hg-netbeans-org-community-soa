package org.netbeans.modules.etl.ui.view.wizardsloader;

import com.sun.etl.utils.StringUtil;
import javax.swing.JPanel;


import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import net.java.hulp.i18n.Logger;
import org.netbeans.modules.etl.logger.Localizer;
import org.netbeans.modules.sql.framework.model.TargetTable;
import org.netbeans.modules.sql.framework.model.impl.AbstractDBTable;

public final class SelectedTableMapperVisualPanel extends JPanel {

    private static transient final Logger mLogger = Logger.getLogger(SelectedTableMapperVisualPanel.class.getName());
    private static transient final Localizer mLoc = Localizer.get();
    private SelectedTableMapperPanel owner;
    private JPanel trgtmappanel = null;
    private SelectedTableMapperModeller mappermodel = new SelectedTableMapperModeller(this);

    /**
     * Creates new form ChooseTableVisualPanel
     */
    public SelectedTableMapperVisualPanel(SelectedTableMapperPanel panel) {
        owner = panel;
        initComponents();

        setMinimumSize(new Dimension(100, 100));
        setMaximumSize(new Dimension(100, 100));
        setPreferredSize(new Dimension(100, 100));
    }

    @Override
    public String getName() {
        String nbBundle1 = mLoc.t("BUND601: Map Selected Collaboration Tables");
        return nbBundle1.substring(15);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapperstatus = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        disableconstraintslbl = new javax.swing.JLabel();
        constrainttoggle = new javax.swing.JCheckBox();
        stmttypelbl = new javax.swing.JLabel();
        stmtTypejComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        topscrollpane = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Collaboration Table Mapper"));
        setAutoscrolls(getAutoscrolls());
        setMaximumSize(new java.awt.Dimension(450, 350));
        setMinimumSize(new java.awt.Dimension(100, 100));
        setPreferredSize(new java.awt.Dimension(462, 300));
        setLayout(new java.awt.BorderLayout(0, 5));

        mapperstatus.setForeground(new java.awt.Color(0, 102, 0));
        add(mapperstatus, java.awt.BorderLayout.PAGE_END);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(disableconstraintslbl, "Disable Target Table Constraints");
        jPanel1.add(disableconstraintslbl);

        constrainttoggle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                constrainToggleItemStateChanged(evt);
            }
        });
        jPanel1.add(constrainttoggle);
        constrainttoggle.getAccessibleContext().setAccessibleName("ConstraintToggle CheckBox");
        constrainttoggle.getAccessibleContext().setAccessibleDescription("ConstraintToggle CheckBox");

        org.openide.awt.Mnemonics.setLocalizedText(stmttypelbl, "Statement Type");
        jPanel1.add(stmttypelbl);

        stmtTypejComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Insert", "Insert Or Update", "Update" }));
        stmtTypejComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statementTypeActionPerformed(evt);
            }
        });
        jPanel1.add(stmtTypejComboBox);
        stmtTypejComboBox.getAccessibleContext().setAccessibleName("StatementType ComboBox");
        stmtTypejComboBox.getAccessibleContext().setAccessibleDescription("StatementType ComboBox");

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.BorderLayout());

        topscrollpane.setWheelScrollingEnabled(false);
        jPanel2.add(topscrollpane, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Source Tables");
        jPanel3.add(jLabel1);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "Target Tables");
        jPanel3.add(jLabel2);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void constrainToggleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_constrainToggleItemStateChanged
    if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        //Disable All Target Table constraints
        setAllTargetTblConstraints(true);
    } else { // DE-SELECTED
        //Enable all target table constrains
        setAllTargetTblConstraints(false);
    }
}//GEN-LAST:event_constrainToggleItemStateChanged

private void statementTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statementTypeActionPerformed
    setAllTargetTblStatementType(((JComboBox) evt.getSource()).getSelectedIndex());
}//GEN-LAST:event_statementTypeActionPerformed

    public boolean canAdvance() {
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox constrainttoggle;
    private javax.swing.JLabel disableconstraintslbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel mapperstatus;
    private javax.swing.JComboBox stmtTypejComboBox;
    private javax.swing.JLabel stmttypelbl;
    private javax.swing.JScrollPane topscrollpane;
    // End of variables declaration//GEN-END:variables
    public void createComponentGraphics(List srcmodellist, List targetmodellist, String collabname, boolean isBulkLoader) {
        // Build Target Table List
        mappermodel.initModelMapper(srcmodellist, targetmodellist, owner, collabname, isBulkLoader);

        JPanel mappanel = createComponents(mappermodel.getSortedTargetTables());      
        this.topscrollpane.add(mappanel);
        this.topscrollpane.setViewportView(mappanel);
        this.setPreferredSize(new Dimension(300, 50));
    }

    private JPanel createComponents(List<AbstractDBTable> trgttables) {
        trgtmappanel = new JPanel();
        GridLayout gl = new GridLayout(0, 1);
        gl.setVgap(10);

        trgtmappanel.setLayout(gl);
        for (AbstractDBTable trgttbl : trgttables) {
            trgtmappanel.add(createTrgtSplitPane(trgttbl));
        }

        trgtmappanel.setVisible(true);
        int panelheight = trgttables.size() * 75;
        trgtmappanel.setPreferredSize(new Dimension(270, panelheight));
        return trgtmappanel;
    }

    private JSplitPane createTrgtSplitPane(AbstractDBTable trgttbl) {
        String trgttbllbl = null;
        if (StringUtil.isNullString(trgttbl.getSchema())) {
            trgttbllbl = trgttbl.getName().toUpperCase() +"(" + trgttbl.getAliasName() + ") " ;
        } else {
            trgttbllbl = "Schema : " + trgttbl.getSchema().toUpperCase() + "\n" + trgttbl.getName().toUpperCase() + " (" + trgttbl.getAliasName() + ")";
        }

        JTextPane jtpforlabel = new JTextPane();
        StyledDocument doc = jtpforlabel.getStyledDocument();
        MutableAttributeSet standard = new SimpleAttributeSet();
        StyleConstants.setAlignment(standard, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, 0, standard, true);
        jtpforlabel.setText(trgttbllbl);
        jtpforlabel.setEditable(false);       
        jtpforlabel.setFont(new Font("Arial", Font.BOLD, 11));
        jtpforlabel.setMinimumSize(new Dimension(200, jtpforlabel.getHeight()));
        jtpforlabel.setMaximumSize(new Dimension(240, jtpforlabel.getHeight()));
        jtpforlabel.setPreferredSize(new Dimension(240, jtpforlabel.getHeight()));
        

        JSplitPane jsp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, getList(trgttbl), jtpforlabel);
        //int i = (int)((jsp.getBounds().getWidth()-jsp.getDividerSize())/2);
        jsp.setDividerLocation(285);      
        jsp.setOneTouchExpandable(false);
        
        jsp.setSize(new Dimension(10, 2));
        jsp.setPreferredSize(new Dimension(10, 2));
        return jsp;
    }

    private JScrollPane getList(AbstractDBTable trgttbl) {
        String trgttblkey = mappermodel.getSearchKey(trgttbl);
        final JList jlist = new JList();
        jlist.setName(trgttblkey);
        jlist.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    boolean status = true;
                    status = mappermodel.updateSelectedSourceIndexFromPanel(jlist.getName(), jlist.getSelectedIndices());
                }
            }
        });       
        JScrollPane listscroll = new JScrollPane();        
        jlist.setModel(new javax.swing.AbstractListModel() {

            public int getSize() {
                return mappermodel.getTableNames(true).size();
            }

            public Object getElementAt(int i) {
                return ((List) mappermodel.getTableNames(true)).get(i);
            }
        });

        jlist.setBounds(0, 0, 10, 3);
        if (owner.isWizardInBulkLoadMode()) {
            jlist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        } else {
            jlist.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        }
        predictSourceTblMatch(jlist, trgttbl);    
        listscroll.setMinimumSize(new Dimension(200, listscroll.getHeight()));
        listscroll.setMaximumSize(new Dimension(240, listscroll.getHeight()));        
        listscroll.setPreferredSize(new Dimension(240, listscroll.getHeight()));
        listscroll.setViewportView(jlist);
        return listscroll;
    }

    public SelectedTableMapperModeller getMapperModel() {
        return mappermodel;
    }

    private void predictSourceTblMatch(JList jlist, AbstractDBTable targettbl) {
        String targettblname = targettbl.getName().toUpperCase();
        List<String> srcnames = mappermodel.getTableNames(true);
        String basesrc = null;
        for (int i = 0; i < srcnames.size(); i++) {
            int dotindex = srcnames.get(i).lastIndexOf(".");
            if (dotindex != -1) {
                basesrc = srcnames.get(i).substring(0, dotindex).toUpperCase();
            }
            if (basesrc != null) {
                mLogger.fine("Trying to Match [ " + basesrc + " ]  with : " + targettblname);
                //if (basesrc.indexOf(targettblname) != -1) {
                if (basesrc.equalsIgnoreCase(targettblname)) {
                    jlist.setSelectedIndex(i);                    
                    mappermodel.updateSelectedSourceIndexFromPanel(jlist.getName(), jlist.getSelectedIndices());
                }
            }
        }
    }

    protected void reportMapStatus(String status, boolean isSuccessMsg) {
        if (isSuccessMsg) {
            mapperstatus.setForeground(new java.awt.Color(0, 100, 0));
        } else {
            mapperstatus.setForeground(new java.awt.Color(255, 0, 0));
        }
        mapperstatus.setText(status);
    }

    protected void setVisualConstraintsDisable(boolean disable) {
        if (disable) {
            mLogger.infoNoloc("Disabling all target table constrains");
            constrainttoggle.setSelected(true);
        } else {
            mLogger.infoNoloc("Enabling all target table constrains");
            constrainttoggle.setSelected(false);
        }
    }

    private void setAllTargetTblConstraints(boolean disable) {
        List<AbstractDBTable> trgttbls = (List) mappermodel.getSortedTargetTables();
        if (trgttbls != null) {
            for (AbstractDBTable trgttbl : trgttbls) {
                mLogger.infoNoloc("Disable constraint on target table [" + trgttbl.getFullyQualifiedName() + "] : " + disable);
                ((TargetTable) trgttbl).setDisableConstraints(disable);
            }
        }
    }

    /**
     * Sets the statement type for all the target tables selected
     * SQLConstants : (Insert - 0), (Inser/Update - 1), (Update - 2)
     * @param stmttype
     */
    private void setAllTargetTblStatementType(int stmttype) {
        List<AbstractDBTable> trgttbls = (List) mappermodel.getSortedTargetTables();
        for (AbstractDBTable trgttbl : trgttbls) {
            ((TargetTable) trgttbl).setStatementType(stmttype);
        }
    }  
}

package org.netbeans.modules.etl.ui.view.wizardsloader;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import net.java.hulp.i18n.Logger;
import org.netbeans.modules.etl.logger.Localizer;

public final class BulkLoaderFileSelectionVisualPanel extends JPanel {

    private static transient final Logger mLogger = Logger.getLogger(BulkLoaderFileSelectionVisualPanel.class.getName());
    private static transient final Localizer mLoc = Localizer.get();
    private String[] flddlms_windows = {"|", ",", "\t", ";", ""};
    private String[] flddlms_unix = {"|", ",", "\t", ";", ""};
    private String[] recdlms_windows = {"$$$", "\n", "\r", "\r\n", "\r\n \n", ";", ",", "\t", "|"};
    private String[] recdlms_unix = {"$$$", "\n", "\r", "\r\n", "\r\n \n", ";", ",", "\t", "|"};
    private String osname = System.getProperty("os.name").toLowerCase();

    /**
     * PropertyChangeListener class listens to the selection of file
     */
    private class InPropertyListener implements java.beans.PropertyChangeListener {

        /**
         * This method gets called when a bound property is changed.
         * 
         * @param evt A PropertyChangeEvent object describing the event source and the
         *        property that has changed.
         */
        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            owner.fireChangeEvent();
        }
    }
    private static File currDir;
    private boolean canAdvance = false;
    private BulkLoaderFileSelectionPanel owner;

    /**
     * Creates new form BulkLoaderFileSelectionVisualPanel
     */
    public BulkLoaderFileSelectionVisualPanel(BulkLoaderFileSelectionPanel panel) {
        owner = panel;
        initComponents();

        requestFocus();

        fileChooser.addPropertyChangeListener(new InPropertyListener());
        disableCancelButton(fileChooser);
        fileChooser.setPreferredSize(new Dimension(500, 450));
        fileChooser.setApproveButtonMnemonic('A');
        // set file filter
        FlatfileFilter ffFilter = new FlatfileFilter();
        ffFilter.setDescription("Flat Files (DATA, CSV, TXT)");
        ffFilter.addType(".data");
        ffFilter.addType(".csv");
        ffFilter.addType(".txt");
        fileChooser.addChoosableFileFilter(ffFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);

        removeButton.setEnabled(false);
        setTableColumnSize();

    }

    @Override
    public String getName() {
        String nbBundle3 = mLoc.t("BUND290: Choose Bulk Loader Data source");
        return nbBundle3.substring(15);
    }

    public boolean canAdvance() {
        return canAdvance;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        String nbBundle3 = mLoc.t("BUND907: Selected files jTable");
        jTable1 = new javax.swing.JTable();
        removeButton = new javax.swing.JButton();
        error = new javax.swing.JLabel();
        flddelimiterlbl = new javax.swing.JLabel();
        recdelimiterlbl = new javax.swing.JLabel();
        String nbBundle1 = mLoc.t("BUND901: Fiels Delimiter ComboBox");
        flddelimitercombo = new javax.swing.JComboBox();
        String nbBundle2 = mLoc.t("BUND903: Record Delimiter ComboBox");
        recdelimitercombo = new javax.swing.JComboBox();

        fileChooser.setApproveButtonText("Add");
        fileChooser.setApproveButtonToolTipText("Add Bulk Load File");
        fileChooser.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        fileChooser.setToolTipText("Choose a file");
        fileChooser.setAutoscrolls(true);
        fileChooser.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose a file for Bulk Loading"));
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Bulk Load Files"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Table Source"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getAccessibleContext().setAccessibleName(nbBundle3.substring(15));
        jTable1.getAccessibleContext().setAccessibleDescription(nbBundle3.substring(15));

        removeButton.setMnemonic('r');
        org.openide.awt.Mnemonics.setLocalizedText(removeButton, "Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        error.setForeground(new java.awt.Color(255, 0, 51));
        error.setLabelFor(jTable1);

        org.openide.awt.Mnemonics.setLocalizedText(flddelimiterlbl, "Field Delimiter");

        org.openide.awt.Mnemonics.setLocalizedText(recdelimiterlbl, "Record Delimiter");

        flddelimitercombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "{pipe}", "{Comma}", "{tab}", "{semicolon}", "User Defined" }));
        flddelimitercombo.setToolTipText("Field Delimiter for the files selected");
        flddelimitercombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFieldDelimiterActionPerformed(evt);
            }
        });

        recdelimitercombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "{Triple Doller($$$)}", "{newline(LF)}", "{carriage return(CR)}", "{CR}{LF}", "{CR}{LF} or {LF}", "{semicolon(;)}", "{comma}", "{tab}", "{pipe(|)}", "User Defined" }));
        recdelimitercombo.setToolTipText("Record Delimiter for the files selected");
        recdelimitercombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRecordDelimiterActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(fileChooser, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(flddelimiterlbl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(flddelimitercombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(recdelimiterlbl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(recdelimitercombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane1, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(error, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(87, 87, 87))
                    .add(layout.createSequentialGroup()
                        .add(removeButton)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(fileChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 254, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(51, 51, 51)
                        .add(removeButton)
                        .add(11, 11, 11)
                        .add(error, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(flddelimiterlbl)
                            .add(recdelimiterlbl)
                            .add(flddelimitercombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(recdelimitercombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 15, Short.MAX_VALUE)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        flddelimitercombo.getAccessibleContext().setAccessibleName(nbBundle1.substring(15));
        flddelimitercombo.getAccessibleContext().setAccessibleDescription(nbBundle1.substring(15));
        recdelimitercombo.getAccessibleContext().setAccessibleName(nbBundle2.substring(15));
        recdelimitercombo.getAccessibleContext().setAccessibleDescription(nbBundle2.substring(15));
    }// </editor-fold>//GEN-END:initComponents
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        removeFromModel();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.APPROVE_SELECTION)) {
            File files[] = fileChooser.getSelectedFiles();
            if ((files == null) || (files.length <= 0)) {
                String nbBundle2 = mLoc.t("BUND291: Bad file selection. Please try again.");
                String msg = nbBundle2.substring(15);
                error.setText(msg);
                return;
            }

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            for (File file : files) {
                Object[] obj = new Object[2];
                obj[0] = model.getRowCount() + 1;
                obj[1] = file.getAbsolutePath();
                model.addRow(obj);
            }

            setTableModel(model);
            canAdvance = true;
            removeButton.setEnabled(true);
            setErrorText("");
            owner.fireChangeEvent();
        }
    }//GEN-LAST:event_fileChooserActionPerformed

private void selectFieldDelimiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFieldDelimiterActionPerformed
    String user_def_fld_del = ((JComboBox) evt.getSource()).getSelectedItem().toString();
    if (user_def_fld_del.startsWith("User")) {
        flddelimitercombo.setEditable(true);
        flddelimitercombo.setSelectedItem("");
    } else {
        flddelimitercombo.setEditable(false);
    }
}//GEN-LAST:event_selectFieldDelimiterActionPerformed

private void selectRecordDelimiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRecordDelimiterActionPerformed
    String user_def_rec_del = ((JComboBox) evt.getSource()).getSelectedItem().toString();
    if (user_def_rec_del.startsWith("User")) {
        recdelimitercombo.setEditable(true);
        recdelimitercombo.setSelectedItem("");
    } else {
        recdelimitercombo.setEditable(false);
    }
}//GEN-LAST:event_selectRecordDelimiterActionPerformed

    public void setErrorText(String string) {
        error.setText(string);
    }

    private void disableCancelButton(Component c) {
        if (c instanceof Container) {
            Component[] comps = ((Container) c).getComponents();
            for (int i = 0; i < comps.length; i++) {
                if (comps[i] instanceof JButton) {
                    if ("Cancel".equalsIgnoreCase(((JButton) comps[i]).getText())) {
                        ((Container) c).remove(comps[i]);
                        break;
                    }
                } else {
                    disableCancelButton(comps[i]);
                }
            }
        }
    }

    /**
     * Sets the root directory based on the value from last page
     * @param newDir root string
     */
    public void setCurrentDirectory(File newDir) {
        currDir = (newDir == null) ? new File(".") : newDir;
        fileChooser.setCurrentDirectory(currDir);
    }

    public DefaultTableModel getSelectedTables() {
        return (DefaultTableModel) jTable1.getModel();
    }

    private void addToModel(String urlAdd) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Object[] obj = new Object[2];
        obj[0] = model.getRowCount() + 1;
        obj[1] = urlAdd;
        model.addRow(obj);
        setTableModel(model);
        canAdvance = true;
        removeButton.setEnabled(true);
        owner.fireChangeEvent();
        setErrorText("");
    }

    private void removeFromModel() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (jTable1.isRowSelected(i)) {
                model.removeRow(i);
            }
        }

        // adjust the sequence number
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(i + 1, i, 0);
        }

        setTableModel(model);
        if (model.getRowCount() == 0) {
            canAdvance = false;
            removeButton.setEnabled(false);
            String nbBundle1 = mLoc.t("BUND292: No table available for processing.");
            setErrorText(nbBundle1.substring(15));
        }
        owner.fireChangeEvent();
    }

    private void removeAllFromModel() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            model.removeRow(i);
        }

        setTableModel(model);
        if (model.getRowCount() == 0) {
            canAdvance = false;
            removeButton.setEnabled(false);
            String nbBundle1 = mLoc.t("BUND292: No table available for processing.");
            setErrorText(nbBundle1.substring(15));
        }
        owner.fireChangeEvent();
    }

    private void setTableModel(final DefaultTableModel model) {
        Runnable run = new Runnable() {

            public void run() {
                Object[] obj = new Object[2];
                obj[0] = "#";
                obj[1] = "Table Source";
                model.setColumnIdentifiers(obj);
                jTable1.setModel(model);
                setTableColumnSize();
            }
        };
        SwingUtilities.invokeLater(run);
    }

    private void setTableColumnSize() {
        TableColumnModel tableColumnModel = jTable1.getColumnModel();
        tableColumnModel.getColumn(0).setMinWidth(5);
        tableColumnModel.getColumn(0).setMaxWidth(30);
        tableColumnModel.getColumn(0).setPreferredWidth(30);
    }

    protected String getSelectedFieldDelimiter() {
        int flddlm_index = flddelimitercombo.getSelectedIndex();
        String delimiter = "undetermined";
        if ((osname.indexOf("linux") != -1) || (osname.indexOf("sun") != -1) || (osname.indexOf("hp-ux") != -1)) {
            delimiter = flddlms_unix[flddlm_index];
        } else {
            delimiter = flddlms_windows[flddlm_index];
        }
        return delimiter;
    }

    protected String getSelectedRecordDelimiter() {
        int recdlm_index = recdelimitercombo.getSelectedIndex();
        String delimiter = "undetermined";
        if ((osname.indexOf("linux") != -1) || (osname.indexOf("sun") != -1) || (osname.indexOf("hp-ux") != -1)) {
            delimiter = recdlms_unix[recdlm_index];
        } else {
            delimiter = recdlms_windows[recdlm_index];
        }
        return delimiter;
    }

    public class FlatfileFilter extends javax.swing.filechooser.FileFilter {

        protected String description;
        protected ArrayList<String> exts = new ArrayList<String>();

        public void addType(String s) {
            exts.add(s);
        }

        /** Return true if the given file is accepted by this filter. */
        public boolean accept(File f) {
            // Little trick: if you don't do this, only directory names
            // ending in one of the extentions appear in the window.
            if (f.isDirectory()) {
                return true;
            } else if (f.isFile()) {
                for (String ext : exts) {
                    if (f.getName().endsWith(ext)) {
                        return true;
                    }
                }
            }
            // A file that didn't match, or a weirdo (e.g. UNIX device file?).
            return false;
        }

        /** Set the printable description of this filter. */
        public void setDescription(String s) {
            description = s;
        }

        /** Return the printable description of this filter. */
        public String getDescription() {
            return description;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel error;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JComboBox flddelimitercombo;
    private javax.swing.JLabel flddelimiterlbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox recdelimitercombo;
    private javax.swing.JLabel recdelimiterlbl;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
}


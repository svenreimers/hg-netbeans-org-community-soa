#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License.
# 
# You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
# 
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
# 
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
# Microsystems, Inc. All Rights Reserved.

OpenIDE-Module-Display-Category=SOA
OpenIDE-Module-Name=BC swift
OpenIDE-Module-Short-Description=BC swift.
OpenIDE-Module-Long-Description=BC swift.

WSDLEditor/Binding/swiftBinding= Swift Binding
WSDLEditor/BindingOperation/swiftBindingOperation= Swift Operation
WSDLEditor/BindingOperationInput/swiftMessage= Swift Message
DESC_Element_binding="binding" indicates a swift protocol based binding.
DESC_Element_operation="operation" indicates a swift protocol based operation.
DESC_Element_message="message" indicates a swift protocol based swift message to/from WSDL message mapping
DESC_Attribute_part=Defines the references to the abstract message part in the WSDL.
DESC_Attribute_use=The use type which affects how the message is interpreted. The default is "encoded"
DESC_Attribute_encodingStyle=when use is encoded, this attribute defines the encoding style
DESC_Element_address="address" indicates a swift protocol based service address.
DESC_Attribute_location=The connectivity information to connect to swift Server. Format swift://ip:portnumber
DESC_Attribute_transportProtocolName=The transport protocol to use to tranport the swift messages
DESC_Element_protocolproperties="protocolproperties" describes swift protocol properties.
DESC_Element_resourceadapter=Resource adapter
DESC_Element_config-property=Config property
DESC_Attribute_EwayResourceAdapterClass=Class which implements the EwayResourceAdapter interface.
DESC_Attribute_ConfigurationTemplate=Resource adapter configuration template
DESC_Attribute_ConfigurationInstance=Resource adapter configuration instance
DESC_Attribute_EwayResourceAdapterMBeanClass=General MBean Class for this eway adapter.
DESC_Attribute_EwayResourceAdapterMBeanName=MBean name for this eway adapter's general MBean.
DESC_Attribute_EwayName=Name of this eway.
DESC_Attribute_EwayDescription=Description of this eway.
DESC_Attribute_EwayVersion=version of this eway.
DESC_Attribute_SupportedModes=The inbound and/or outbound modes which the eway supports.
DESC_Element_outbound-resourceadapter=Outbound resource adapter
DESC_Element_connection-definition=Connection definition
DESC_Element_com.stc.connector.framework.jca.system.STCManagedConnectionFactory=Describes a <connection-definition> section in the ra.xml deployment descriptor
DESC_Attribute_managedconnectionfactory-class=Managed connection factory class
DESC_Attribute_connectionfactory-interface=Connection factory interface
DESC_Attribute_connectionfactory-impl-class=Connection factory implementation class
DESC_Attribute_connection-interface=Connection interface
DESC_Attribute_connection-impl-class=Connection implementation class
DESC_Element_authentication-mechanism=Authentication mechanism
DESC_Attribute_authentication-mechanism-type=Authentication mechanism type
DESC_Attribute_credential-interface=Credential interface
DESC_Attribute_transaction-support=Transaction support
DESC_Attribute_reauthentication-support=Reauthentication support
DESC_Element_inbound-resourceadapter=Inbound resource adapter
DESC_Element_messageadapter=Message adapter
DESC_Element_messagelistener=Message listener
DESC_Element_com.stc.connector.sagadapter.listener.SAGEwayListener=Describes a <messagelistener> section in the ra.xml deployment descriptor
DESC_Element_activationspec=Activation spec
DESC_Element_required-config-property=Required config property
DESC_Attribute_EwayEndpointClass=Class which implements the EwayEndpoint interface.
DESC_Attribute_EwayActivationSpecMBeanClass=ActivationSpec MBean Class for this eway adapter.
DESC_Attribute_EwayActivationSpecMBeanName=MBean name for this eway adapter's ActivationSpec MBean.
DESC_Attribute_activationspec-class=Activation spec class
DESC_Attribute_messagelistener-type=Message listener type
DESC_Attribute_resourceadapter-class=Resource adapter class
DESC_Attribute_description=Connector description
DESC_Attribute_vendor-name=Vendor name
DESC_Attribute_eis-type=External information system type
DESC_Attribute_resourceadapter-version=Resource adapter version
DESC_Attribute_EwayConnectionClass=Class which implements the EwayConnection interface.
DESC_Attribute_ApplicationConnectionFactoryClass=Class which implements the ApplicationConnectionFactory interface.
DESC_Attribute_EwayMCFMBeanClass=MBean Class for this eway adapter's Managed Connection Factory.
DESC_Attribute_EwayMCFMBeanName=MBean name for this eway adapter's Managed Connection Factory MBean.
DESC_Attribute_EwayManagedConnectionMBeanClass=MBean Class for a Managed Connection.
DESC_Element_configuration=Configuration of this Managed Connection Factory
DESC_Element_Envelope=Envelope
DESC_Attribute_ApplicationId=Application Id. It is the name of Application Interface/Message Partner. Mandatory.
DESC_Attribute_Sender=Sender. It is an SAG Operator name.
DESC_Attribute_SenderAuth=Sender Auth. It is the password for the SAG Operator.
DESC_Element_PrimitiveControl=Primitive Control
DESC_Attribute_IncludeXMLAttributes=It is used to control the construction/marshalling of SNL primitives. When SAG eWay constructs/marshals the SNL primitives, this flag indicates whether the eWay will include the XML attributes in the primitives. For example, for element SwInt:Requestor, it may be like <SwInt:Requestor type="Sw.Gbl.DN" version="4.0.0">o=swift,o=swift</SwInt:Requestor> if include XML attributes; and it may be like <SwInt:Requestor>o=swift,o=swift</SwInt:Requestor> if not include XML attributes. Note all XML attributes in SNL Primitives are defined in SNL Specification.
DESC_Element_RemoteApiBase=RemoteApi Base settings
DESC_Attribute_ClientHandleTimeout=Specifies the maximum time (in milliseconds) allowed between a request message and its corresponding response message
DESC_Attribute_ReadBlockingTimeout=Specifies the maximum time (in milliseconds) blocking a read operation
DESC_Element_SwInt_ExchangeRequest=SwInt_ExchangeRequest. This section maps to primitive SwInt:ExchangeRequest. For parameters SwXXX ubder this section, you can refer SNL Specification for more detailed description.
DESC_Element_Sw_AcquireSnFRequest=Sw_AcquireSnFRequest. This section maps to parameter Sw:AcquireSnFRequest of primitive Sw:ExchangeSnFRequest. For parameters SwXXX under this section, you can refer SNL Specification for more detailed description.
DESC_Attribute_SwInt_Queue=SwInt_Queue. The name of the queue. For example, ptsauszz_generic!x. Size limit: 30 bytes.
DESC_Attribute_SwSec_UserDN=SwSec_UserDN. The full distinguished name (DN) of the principal. Size limit: 100 bytes. For example, cn=harry,o=ptsauszz,o=swift
DESC_Attribute_SwInt_Requestor=SwInt_Requestor. Application entity name. Size limit: 100 bytes. For example, ou=management,o=ptsauszz,o=swift
DESC_Attribute_SwInt_Responder=SwInt_Responder. Name of the intended Responder. Size limit: 100 bytes. For example, cn=management,o=swift,o=swift
DESC_Attribute_SwInt_Service=SwInt_Service. Service name. Size limit: 30 bytes. For example, swift.cte, swift.generic.ia!x, swift.generic.iast!x, etc.
DESC_Attribute_SwInt_RequestType=SwInt_RequestType. Request type. Size limit: 30 bytes.
DESC_Attribute_SwInt_RequestRef=SwInt_RequestRef. Used to associate a request message with subsequent response or error messages. Size limit: 30 bytes.
DESC_Attribute_SwInt_NotifQueue=SwInt_NotifQueue. When present, indicates SnF Delivery Mode, and the queue is where SnF (non-)delivery notifications will be received. In case of non-delivery of a message ("Rejected" and "Failed"), an SnF failed delivery notification will always be generated in this notification queue. In case of delivery of a message ("Accepted" and "Duplicated"), an SnF delivery notification will be optionally generated in the queue (see Sw:DeliveryNotif). Size limit: 30 bytes. For example, ptsauszz_generic!x.
DESC_Element_Sw_ExchangeFileRequest=Sw_ExchangeFileRequest. This section maps to primitive Sw:ExchangeFileRequest. For parameters SwXXX under this section, you can refer SNL Specification for more detailed description.
DESC_Element_Sw_GetFileRequest=Sw_GetFileRequest. This section maps to parameter Sw:GetFileRequest of primitive Sw:ExchangeFileRequest. For parameters SwXXX under this section, you can refer SNL Specification for more detailed description.
DESC_Attribute_Sw_TransferDescription=Sw_TransferDescription. User information about the file transfer. Free text. Size limit: 256 bytes.
DESC_Attribute_Sw_TransferInfo=Sw_TransferInfo. User information about the file transfer. Structured data that can be analysed by the server. Size limit: 256 bytes.
DESC_Attribute_Sw_LogicalName=Sw_LogicalName. Logical name of the file to get. This name is communicated to the server application. By default, this name is the physical name without path. Size limit: 254 bytes.
DESC_Attribute_Sw_PhysicalName=Sw_PhysicalName. Full physical name where the file to get must be stored. If the file already exists it will be overwritten. Size limit: 254 bytes.
DESC_Attribute_Sw_MaxSize=Sw_MaxSize. 0 - 250 Mbytes. Optionally indicates the maximum accepted file size. When present, the maximum size is a field that is communicated from the client application to the server application.
DESC_Element_Sw_PutFileRequest=Sw_PutFileRequest. This section maps to parameter Sw:PutFileRequest of primitive Sw:ExchangeFileRequest. For parameters SwXXX under this section, you can refer SNL Specification for more detailed description.
DESC_Attribute_Sw_FileDescription=Sw_FileDescription. User information about the file. Free text. Size limit: 256 bytes.
DESC_Attribute_Sw_FileInfo=Sw_FileInfo. User information about the file. Structured data that can be analysed by the server. Size limit: 256 bytes.
DESC_Element_Sw_AckFileRequest=Sw_AckFileRequest. This section maps to parameter Sw:AckFileRequest of primitive Sw:ExchangeFileRequest. For parameters SwXXX under this section, you can refer SNL Specification for more detailed description.
DESC_Attribute_Sw_AckDescription=Sw_AckDescription. Size limit: 256 bytes.
DESC_Attribute_Sw_AckInfo=Sw_AckInfo. Size limit: 256 bytes.
DESC_Element_Sw_FetchFileRequest=Sw_FetchFileRequest. This section maps to primitive Sw:FetchFileRequest. For parameters SwXXX under this section, you can refer SNL Specification for more detailed description.
DESC_Attribute_Sw_TransferKey=Sw_TransferKey. Size limit: 30 bytes. Only when the control structure is for an Sw:PutFileRequest or Sw:GetFileRequest. When present, it protects the usage Sw:AbortFile function.
DESC_Attribute_Sw_TransferEP=Sw_TransferEP. Size limit: 30 bytes. It is the Transfer EndPoint name used for remote file handler. When absent, the file transfer will not use remote file handler; When present, the file transfer will use remote file handler, before the file transfer starts you need to start the remote file handler process with specified Transfer EndPoint name on your system. The command to start remote file handler (swfa_handler) takes command-line arguments as follows:\n\
\n\
 swfa_handler <HostName>:<PortNumber>[:ssl] <TransferEndpoint> [<Process ID>] \n\
\n\
Here are some examples: \n\
\n\
swfa_handler snlhost:48003:ssl MyUniqueEndpoint 23450 \n\
\n\
swfa_handler snlhost:48003 MyUniqueEndpoint 23450 \n\
\n\
swfa_handler snlhost:48003 MyUniqueEndpoint \n\
\n\
As for the syntax details and operational guidelines of remote file handler, you can refer SWIFTNet Service Design Guide or consult with your system person.
DESC_Element_Sw_ExchangeSnFRequest=Sw_ExchangeSnFRequest. This section maps to primitive Sw:ExchangeSnFRequest. For parameters SwXXX under this section, you can refer SNL Specification for more detailed description.
DESC_Element_ConnectionEstablishment=Defines configuration parameters used for controlling the connection establishment.
DESC_Attribute_TimeToWaitBeforeAttemptingConnection=This parameter specifies the length of time (in milli-seconds) that the eWay waits before attempting to connect to the external system.
DESC_Attribute_MaxConnectionRetries=The maximum number of times the eWay will attempt to connect to the specified external SAG destination before giving up.
DESC_Attribute_RetryConnectionInterval=The number of milli-seconds to wait between attempts to connect to the specified external SAG destination.
DESC_Attribute_AlwaysCreateNewConnection=This flag indicates whether to ALWAYS try to create a new connection for a connection establishment request. If it is false, an attempt to match an existing connection (managed by container) is made; if it is true, a new connection is always created without trying to match an existing connection.
DESC_Attribute_AutoReconnectUponMatchingFailure=Whether attempt to re-connect automatically after getting a matched connection from a container, but this connection is not valid due to different reasons. For example, the external side of the connection was closed/reset upon the external application's logic. A value of 'true' means that we will discard the invalid matched connection and try to re-establish a new connection automatically. A value of 'false' means that we won't try to re-establish a new connection automatically. Instead, we will simply leave/defer the control to users' business rules, which should detect this kind of failure and perform the desired operations.
DESC_Attribute_AutoDisconnectConnection=This flag indicates whether the eWay disconnects the connection automatically after the work finishes on the connection. If it is false, the connection will be returned back to pool for reuse; if it is true, the connection will not be re-used.
DESC_Attribute_EarlyConnectUponDeployment=This flag indicates whether the eWay will connect upon request or whether it will connect early. That is, the eWay can establish the connection either upon connection-request or deployment. If set to false, the eWay will try to connect to an external EIS only when some component requests the connection, which is a regular J2EE case; if set to true, the eWay will try to connect to an external EIS immediately after the project is deployed. Unless your use case requires this parameter to be modified, it is recommended that you keep the default setting,  which is false.
DESC_Element_environment-configuration=Environment Configuration of this Managed Connection Factory
DESC_Element_Transport=Transport
DESC_Attribute_ReadFromRaCfgFile=We can get RA transport information (i.e. Host Name, Port Number, etc) in two ways: \n\
\n\
1. Read them from an existing RA configuration file (for example, "sagta_ra.cfg") for your SAG RA environment. Probably this is the easiest way for most cases. \n\
\n\
2. Get them from e*Way configuration parameters defined in the rest of this section. \n\
\n\
If this parameter is specified with a value, that means you are choosing the first way, and the value of this parameter gives RA configuration file name (for example, "sagta_ra.cfg"), the other parameters (i.e. "Host Name", "Port Number", etc) in this section will be ignored. \n\
\n\
If this parameter is not specified, that means you are choosing the second way, the other parameters (i.e. "Host Name", "Port Number", etc) in this section should be specified and will be used.
DESC_Attribute_HostName=The name of the SAG host or its IP address. It is required if the previous configuration parameter ("Read From RA CFG File") is not specified.
DESC_Attribute_PortNumber=The number of the port on the SAG host to which RA connects.
DESC_Attribute_FtlaPortNumber=The number of the port on the SAG host through which File Transfers will take place.
DESC_Attribute_ServerDN=The Distinguished Name, used for SWIFTAlliance Gateway authentication.
DESC_Attribute_CACertificate=The file that contains the Certification Authority certificate.
DESC_Attribute_SSLMode=True or False depending upon whether data encryption is to be used.
DESC_Attribute_Reconnect=Reconnect
DESC_Attribute_HBInterval=Heartbeat Interval
DESC_Attribute_HBLimit=Heartbeat Limit
DESC_Attribute_DisplayName=Display Name
DESC_Element_ConnectionPoolSettings=Connection Pool Settings. It is specific for RA connection pool of Sun Java System Application Server (Sun One Application Server) or Sun SeeBeyond Integration Server only. The parameter settings in this section will go into sun-ra.xml. Please refer to the corresponding documentations along with your product for more details.
DESC_Attribute_SteadyPoolSize=It maps to parameter steady-pool-size in sun-ra.xml which is specific for Sun Java System Application Server (Sun One Application Server) or Sun SeeBeyond Integration Server, see the corresponding documentations for more information. It represents the minimum number of RA connections to be maintained. When it is set to greater than 0, the container not only pre-populates the RA connection pool with the specified number, but also attempts to ensure that there is always this many RA connections in the free pool. This ensures that there are enough RA connections in the ready to serve state to process user requests. This parameter does not necessarily guarantee that no more than steady-pool-size instances exist at a given time. It only governs the number of instances that are pooled over a long period of time. For example, suppose an idle stateless session container has a fully-populated pool with a steady-pool-size of 10. If 20 concurrent requests arrive for the RA connection component, the container creates 10 additional instances to satisfy the burst of requests. The advantage of this is that it prevents the container from blocking any of the incoming requests. However, if the activity dies down to 10 or fewer concurrent requests, the additional 10 instances are discarded.
DESC_Attribute_MaxPoolSize=It maps to parameter max-pool-size in sun-ra.xml which is specific for Sun Java System Application Server (Sun One Application Server) or Sun SeeBeyond Integration Server, see the correspondings documentations for more information. It represents the maximum number of RA connections in the pool. A value of 0 means the pool is unbounded.
DESC_Attribute_MaxWaitTimeInMillis=It maps to parameter max-wait-time-in-millis in sun-ra.xml which is specific for Sun Java System Application Server (Sun One Application Server) or Sun SeeBeyond Integration Server, see the corresponding documentations for more information. If a RA connection is not available, the caller will have to wait this long, before a RA connection is created. A value of 0 implies, if there is no RA connection available an exception will be thrown. If the pool is completely utilized and the timer expires, an exception will be delivered to the application. Note: This element is deprecated for bean pool container for newer Sun Java System Application Server.
DESC_Attribute_PoolIdleTimeoutInSeconds=It maps to parameter pool-idle-timeout-in-seconds in sun-ra.xml which is specific for Sun Java System Application Server (Sun One Application Server) or Sun SeeBeyond Integration Server, see the corresponding documentations for more information. This is a hint to the server. A timer thread periodically removes unused RA connections. This parameter defines the interval at which this thread runs. This thread removes unused RA connection that their timeout has expired. It allows the user to specify, through the amount of time a RA connection instance can be idle in the pool. When pool-idle-timeout-in-seconds is set to greater than 0,  the container removes or destroys any RA connection instance that is idle for this specified duration. It is the maximum time that a component can remain idle in the pool. After this amount of time, the pool can remove this bean. A value of 0 specifies that idle RA connections can remain in the pool indefinitely.

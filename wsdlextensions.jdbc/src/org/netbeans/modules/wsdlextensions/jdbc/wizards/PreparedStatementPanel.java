/*
 * PreparedStatementPanel.java
 *
 * Created on August 11, 2008, 11:37 AM
 */
package org.netbeans.modules.wsdlextensions.jdbc.wizards;

import java.awt.Component;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.openide.WizardDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.HelpCtx;

import org.netbeans.api.db.explorer.DatabaseConnection;
import org.netbeans.api.db.explorer.ConnectionManager;
import org.netbeans.modules.wsdlextensions.jdbc.builder.DBMetaData;
import org.netbeans.modules.wsdlextensions.jdbc.builder.PrepStmt;
import org.netbeans.modules.wsdlextensions.jdbc.builder.Parameter;
import org.netbeans.modules.wsdlextensions.jdbc.builder.ResultSetColumn;

/**
 *
 * @author  pponnala
 */
public class PreparedStatementPanel extends javax.swing.JPanel implements WizardDescriptor.Panel,TableModelListener {
    private DefaultTableModel paramsModel;
    private DefaultTableModel resultsetModel;
    PreparedStatementDescriptorPanel mWizardPanel = null;
    String mTitle = "";
    
    public PreparedStatementPanel(PreparedStatementDescriptorPanel wizardPanel) {
        this(wizardPanel, "");
        localizeText();
    }
    
    public PreparedStatementPanel(PreparedStatementDescriptorPanel wizardPanel,
            String title) {
        mWizardPanel = wizardPanel;
        mTitle = title;
        paramsModel = new DefaultTableModel(new Object[] {"Parameter Name", "Parameter Type"}, 0);
        resultsetModel = new DefaultTableModel(new Object[] {"Column Name", "Column Type"}, 0);
        initComponents();
        localizeText();
        if (title != null && title.trim().length() != 0) {
            this.setName(title);
        }        
    }       

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        preparedStmtTxtArea = new javax.swing.JTextArea();
        prepStmtLabel = new javax.swing.JLabel();
        jbtnFindParams = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        paramsTable = new javax.swing.JTable();
        prepStatementEditorLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        resultsetTable = new javax.swing.JTable();
        jbtnFindResultset = new javax.swing.JButton();
        paramsLabel = new javax.swing.JLabel();
        resultsetsLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        statusText = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        addParamsButton = new javax.swing.JButton();
        removeParamsButton = new javax.swing.JButton();

        preparedStmtTxtArea.setColumns(20);
        preparedStmtTxtArea.setFont(preparedStmtTxtArea.getFont());
        preparedStmtTxtArea.setRows(5);
        preparedStmtTxtArea.setText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.preparedStmtTxtArea.text")); // NOI18N
        preparedStmtTxtArea.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.preparedStmtTxtArea.toolTipText")); // NOI18N
        preparedStmtTxtArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                preparedStmtTxtAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(preparedStmtTxtArea);
        preparedStmtTxtArea.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.preparedStmtTxtArea.AccessibleContext.accessibleName")); // NOI18N
        preparedStmtTxtArea.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.preparedStmtTxtArea.AccessibleContext.accessibleDescription")); // NOI18N

        prepStmtLabel.setFont(prepStmtLabel.getFont().deriveFont(prepStmtLabel.getFont().getStyle() | java.awt.Font.BOLD, prepStmtLabel.getFont().getSize()+1));
        prepStmtLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        prepStmtLabel.setLabelFor(preparedStmtTxtArea);
        org.openide.awt.Mnemonics.setLocalizedText(prepStmtLabel, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.prepStmtLabel.text")); // NOI18N
        prepStmtLabel.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.prepStmtLabel.toolTipText")); // NOI18N

        jbtnFindParams.setFont(jbtnFindParams.getFont());
        org.openide.awt.Mnemonics.setLocalizedText(jbtnFindParams, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindParams.text")); // NOI18N
        jbtnFindParams.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindParams.toolTipText")); // NOI18N
        jbtnFindParams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findParamsActionPerformed(evt);
            }
        });

        paramsTable.setFont(paramsTable.getFont().deriveFont(paramsTable.getFont().getStyle() | java.awt.Font.BOLD, paramsTable.getFont().getSize()+1));
        paramsTable.setModel(paramsModel);
        paramsTable.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.paramsTable.toolTipText")); // NOI18N
        paramsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        paramsTable.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(paramsTable);
        paramsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        paramsTable.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.paramsTable.AccessibleContext.accessibleName")); // NOI18N
        paramsTable.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.paramsTable.AccessibleContext.accessibleDescription")); // NOI18N

        prepStatementEditorLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        prepStatementEditorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        prepStatementEditorLabel.setText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.prepStatementEditorLabel.text")); // NOI18N

        resultsetTable.setFont(resultsetTable.getFont().deriveFont(resultsetTable.getFont().getStyle() | java.awt.Font.BOLD, resultsetTable.getFont().getSize()+1));
        resultsetTable.setModel(resultsetModel);
        resultsetTable.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.resultsetTable.toolTipText")); // NOI18N
        resultsetTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        resultsetTable.setColumnSelectionAllowed(true);
        jScrollPane4.setViewportView(resultsetTable);
        resultsetTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        resultsetTable.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.resultsetTable.AccessibleContext.accessibleName")); // NOI18N
        resultsetTable.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.resultsetTable.AccessibleContext.accessibleDescription")); // NOI18N

        jbtnFindResultset.setFont(jbtnFindResultset.getFont());
        org.openide.awt.Mnemonics.setLocalizedText(jbtnFindResultset, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindResultset.text")); // NOI18N
        jbtnFindResultset.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindResultset.toolTipText")); // NOI18N
        jbtnFindResultset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnfindResultsetActionPerformed(evt);
            }
        });

        paramsLabel.setFont(paramsLabel.getFont().deriveFont(paramsLabel.getFont().getStyle() | java.awt.Font.BOLD, paramsLabel.getFont().getSize()+1));
        paramsLabel.setLabelFor(paramsTable);
        org.openide.awt.Mnemonics.setLocalizedText(paramsLabel, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.paramsLabel.text")); // NOI18N

        resultsetsLabel.setFont(resultsetsLabel.getFont().deriveFont(resultsetsLabel.getFont().getStyle() | java.awt.Font.BOLD, resultsetsLabel.getFont().getSize()+1));
        resultsetsLabel.setLabelFor(resultsetTable);
        org.openide.awt.Mnemonics.setLocalizedText(resultsetsLabel, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.resultsetsLabel.text")); // NOI18N

        statusText.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        statusText.setColumns(20);
        statusText.setFont(statusText.getFont());
        statusText.setRows(5);
        statusText.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.statusText.toolTipText")); // NOI18N
        jScrollPane3.setViewportView(statusText);
        statusText.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.statusText.AccessibleContext.accessibleName")); // NOI18N
        statusText.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.statusText.AccessibleContext.accessibleDescription")); // NOI18N

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+1));
        jLabel1.setLabelFor(statusText);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(addParamsButton, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.addParamsButton.text")); // NOI18N
        addParamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParamsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeParamsButton, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.removeParamsButton.text")); // NOI18N
        removeParamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeParamsButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(125, 125, 125)
                        .add(prepStatementEditorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 453, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(prepStmtLabel)
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(jScrollPane3)
                                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                            .add(layout.createSequentialGroup()
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(removeParamsButton))
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                                .add(27, 27, 27)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(addParamsButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                                    .add(jbtnFindResultset)
                                                    .add(jbtnFindParams, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, Short.MAX_VALUE))))))
                                .add(42, 42, 42))
                            .add(layout.createSequentialGroup()
                                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 153, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(paramsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 249, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(resultsetsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(prepStatementEditorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(prepStmtLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(paramsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(removeParamsButton)
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(layout.createSequentialGroup()
                        .add(99, 99, 99)
                        .add(jbtnFindParams, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(addParamsButton)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(8, 8, 8)
                                .add(resultsetsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(17, 17, 17)
                                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(layout.createSequentialGroup()
                        .add(72, 72, 72)
                        .add(jbtnFindResultset)))
                .addContainerGap())
        );

        jbtnFindParams.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindParams.AccessibleContext.accessibleName")); // NOI18N
        jbtnFindParams.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindParams.AccessibleContext.accessibleDescription")); // NOI18N
        jbtnFindResultset.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindResultset.AccessibleContext.accessibleName")); // NOI18N
        jbtnFindResultset.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindResultset.AccessibleContext.accessibleDescription")); // NOI18N
        addParamsButton.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jButton1.AccessibleContext.accessibleName")); // NOI18N
        addParamsButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.addParamsButton.AccessibleContext.accessibleDescription")); // NOI18N
        removeParamsButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.removeParamsButton.AccessibleContext.accessibleDescription")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

private void findParamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findParamsActionPerformed
    try {        
        //reset the parameters first
    	while(paramsModel.getRowCount() > 0){
    		paramsModel.removeRow(0);
        }
        statusText.setText("");
        sqlText = preparedStmtTxtArea.getText();
        if (conn.getJDBCConnection() != null) {
            prepStmt = DBMetaData.getPrepStmtMetaData(conn.getJDBCConnection().getCatalog(), conn.getSchema(), null, sqlText, conn.getJDBCConnection());
        } else {
            return;
        }
        params = prepStmt.getParameters();
        for (int i = 0; i < prepStmt.getNumParameters(); i++) {
            paramsModel.addRow(new Object[] {params[i].getName(), params[i].getJavaType()});
        }
        paramsTable.setVisible(true);
        if(!isValidSql()){
            statusText.setText("Status: Please enter a valid SQL. Only DML Statements are supported");
        }
		edited = false;
        fireChangeEvent();

    } catch (SQLException sqle) {
        statusText.setText("Status: Error executing the entered SQL:" + sqle.getMessage());
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}//GEN-LAST:event_findParamsActionPerformed

private void preparedStmtTxtAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_preparedStmtTxtAreaKeyPressed
        sqlText = preparedStmtTxtArea.getText();
        fireChangeEvent();
}//GEN-LAST:event_preparedStmtTxtAreaKeyPressed

private void jbtnfindResultsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnfindResultsetActionPerformed
        
    try {
        //reset the parameters first
        while(resultsetModel.getRowCount()>0 ) {
            resultsetModel.removeRow(0);
        }
        statusText.setText("");
        sqlText = preparedStmtTxtArea.getText();
        if (conn == null) {
            return;
        }
        if (conn.getJDBCConnection() != null) {
            prepStmt = dbMeta.getPrepStmtMetaData(conn.getJDBCConnection().getCatalog(), conn.getSchema(), null, sqlText, conn.getJDBCConnection());
        } else {
            return;
        }
        resultset = prepStmt.getResultSetColumns();
        for (int i = 0; i < prepStmt.getNumResultSetColumns(); i++) {
            resultsetModel.addRow(new Object[] {resultset[i].getName(), resultset[i].getJavaType()});
        }
        resultsetTable.setVisible(true);
        if(!isValidSql()){
            statusText.setText("Status: Please enter a valid SQL. Only DML Statements are supported");
        }
        fireChangeEvent();

    } catch (SQLException sqle) {
        statusText.setText("Status: Error executing the entered SQL:" + sqle.getMessage());
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}//GEN-LAST:event_jbtnfindResultsetActionPerformed

private void addParamsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParamsButtonActionPerformed
    TableModel tmod = paramsTable.getModel();
    ((DefaultTableModel) tmod).addRow(new Object[]{"paramName" + tmod.getRowCount(), "java.lang.String"});
    paramsTable.setModel(tmod);	
}//GEN-LAST:event_addParamsButtonActionPerformed

private void removeParamsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
    TableModel tmod = paramsTable.getModel();
    int[] remPos = paramsTable.getSelectedRows();
    for(int i=0; i < remPos.length; i++){
    ((DefaultTableModel) tmod).removeRow(remPos[i]);
    }
    paramsTable.setModel(tmod);                                                   
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addParamsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton jbtnFindParams;
    private javax.swing.JButton jbtnFindResultset;
    private javax.swing.JLabel paramsLabel;
    private javax.swing.JTable paramsTable;
    private javax.swing.JLabel prepStatementEditorLabel;
    private javax.swing.JLabel prepStmtLabel;
    private javax.swing.JTextArea preparedStmtTxtArea;
    private javax.swing.JButton removeParamsButton;
    private javax.swing.JTable resultsetTable;
    private javax.swing.JLabel resultsetsLabel;
    private javax.swing.JTextArea statusText;
    // End of variables declaration//GEN-END:variables
    private DatabaseConnection conn;
    private DBMetaData dbMeta;
    private PrepStmt prepStmt;
    private String sqlText;
    private StringBuffer paramOrder = new StringBuffer();
    private boolean edited = false;
    private final List /* <ChangeListener> */ listeners = new ArrayList();

    private ResultSetColumn[] resultset;
    private Parameter[] params;
    private boolean isValidSql = false;

    public Component getComponent() {
        localizeText();
        return this;
    }

    public HelpCtx getHelp() {
        return new HelpCtx(PreparedStatementPanel.class);
    }

    public void readSettings(Object settings) {
        WizardDescriptor wd = null;
        if (settings instanceof JDBCWizardContext) {
            final JDBCWizardContext wizardContext = (JDBCWizardContext) settings;
            wd = (WizardDescriptor) wizardContext.getProperty(JDBCWizardContext.WIZARD_DESCRIPTOR);

        } else if (settings instanceof WizardDescriptor) {
            wd = (WizardDescriptor) settings;
        }
           
        if (wd != null) {
            DatabaseConnection dbConnection = (DatabaseConnection) 
                    wd.getProperty(JDBCWizardContext.CONNECTION);
            if (dbConnection != null) {
                setConnection(dbConnection); 
            }    
            
            Boolean sqlSelected = (Boolean) wd.getProperty(WizardConstants.SQLFILE_SELECTED);
            if (sqlSelected.booleanValue()) {
                String sqlFromSQLPanel = 
                        (String) wd.getProperty(JDBCWizardContext.SQL_FROM_SQLFILE); 
                if (sqlFromSQLPanel != null) {
                    setTextArea(sqlFromSQLPanel);
                }
            }
        } 
        
        localizeText();
    }

    public void fireChangeEvent() {
        Iterator it;
        
        if (isValid()) {
            mWizardPanel.fireChange();
        }        
        synchronized (this.listeners) {
            it = new HashSet(this.listeners).iterator();
        }

        final ChangeEvent ev = new ChangeEvent(this);
        while (it.hasNext()) {
            ((ChangeListener) it.next()).stateChanged(ev);
        }
        
        localizeText();
    }

    public void storeSettings(Object arg0) {
        WizardDescriptor wd = null;
        if (arg0 instanceof JDBCWizardContext) {
            final JDBCWizardContext wizardContext = (JDBCWizardContext) arg0;
            wd = (WizardDescriptor) wizardContext.getProperty(JDBCWizardContext.WIZARD_DESCRIPTOR);

        } else if (arg0 instanceof WizardDescriptor) {
            wd = (WizardDescriptor) arg0;
        }
        
        if(params != null){
            readParamTable();
        }
        
        if(resultset != null){
            readResultsetTable();
        }
        
        wd.putProperty(JDBCWizardContext.SQL_FROM_PREPARED_STMT, getSQL());
        wd.putProperty(JDBCWizardContext.PREPARED_STMT, getPrepStmt());      
    }

    private void readParamTable() {
        TableModel dfm = paramsTable.getModel();
        Parameter[] params = prepStmt.getParameters();
		paramOrder = new StringBuffer();
        if(dfm.getRowCount() == params.length){
            for(int i=0; i < params.length; i++){
            params[i].setName((String)dfm.getValueAt(i, 0));
            params[i].setJavaType((String)dfm.getValueAt(i, 1));
            if(edited){				
                paramOrder.append((String)dfm.getValueAt(i, 0));
            if (i == params.length - 1) {
                paramOrder.append("");
            } else {
                paramOrder.append(",");
            }
            }
        }
        }else{
            params = new Parameter[dfm.getRowCount()];
            for (int i = 0; i < dfm.getRowCount(); i++) {
                params[i] = new Parameter((String) dfm.getValueAt(i, 0), (String) dfm.getValueAt(i, 1));
                if(edited){					
                    paramOrder.append((String)dfm.getValueAt(i, 0));
                    if (i == params.length - 1) {
                        paramOrder.append("");
                    } else {
                        paramOrder.append(",");
                    }
                }
            }
        }
        
        prepStmt.setParameters(params);
        prepStmt.setParamOrder(paramOrder.toString());
    }
    
    private void readResultsetTable() {
        TableModel dfm = resultsetTable.getModel();
        ResultSetColumn[] rscols = prepStmt.getResultSetColumns();
        if(rscols != null && dfm.getRowCount() == rscols.length){
            for(int i=0; i < rscols.length; i++){
            rscols[i].setName((String)dfm.getValueAt(i, 0));
            rscols[i].setJavaType((String)dfm.getValueAt(i, 1));
        }
        }else{
            rscols = new ResultSetColumn[dfm.getRowCount()];
            for (int i = 0; i < dfm.getRowCount(); i++) {
                rscols[i] = new ResultSetColumn((String) dfm.getValueAt(i, 0), (String) dfm.getValueAt(i, 1));
            }
        }
        
        prepStmt.setResultSetColumns(rscols);
    }
    
    public void addChangeListener(ChangeListener l) {
        this.listeners.add(l);
        localizeText();
    }

    public void removeChangeListener(ChangeListener l) {
        this.listeners.remove(l);
    }

    public void setConnection(DatabaseConnection dbConn) {
        this.conn = dbConn;
        localizeText();
    }

    @Override
    public boolean isValid() {
        if((sqlText != null) && !(sqlText.equalsIgnoreCase(""))) {
            return true;
        }
        return false;
    }
    
    public String getSQL(){
    	return sqlText;
    }
    
    public void setTextArea(String sql){
    	this.preparedStmtTxtArea.setText(sql);
    }
    
    public PrepStmt getPrepStmt(){
    	return this.prepStmt;
    }
    
    private boolean isValidSql(){
    	if(this.sqlText.trim()!= null){
        StringTokenizer st = new StringTokenizer(sqlText.toUpperCase());

        if (st.hasMoreTokens()) {
        	String token =st.nextToken();
        	if(token.equalsIgnoreCase("SELECT") || token.equalsIgnoreCase("INSERT") || token.equalsIgnoreCase("UPDATE") || token.equalsIgnoreCase("DELETE")){
        		isValidSql=true;
        	} else{
        		isValidSql=false;
        	}
        }
    	}
        return isValidSql;
    }
    
    private void localizeText(){
        //mnemonics
        org.openide.awt.Mnemonics.setLocalizedText(prepStmtLabel, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.prepStmtLabel.text")); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jbtnFindParams, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindParams.text")); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jbtnFindResultset, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindResultset.text")); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(paramsLabel, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.paramsLabel.text")); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(resultsetsLabel, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.resultsetsLabel.text")); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jLabel1.text")); // NOI18N
        //tooltips
        preparedStmtTxtArea.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.preparedStmtTxtArea.toolTipText")); // NOI18N
        jbtnFindParams.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindParams.toolTipText")); // NOI18N
        paramsTable.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.paramsTable.toolTipText")); // NOI18N
        jbtnFindResultset.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindResultset.toolTipText")); // NOI18N
        statusText.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.statusText.toolTipText")); // NOI18N
        resultsetTable.setToolTipText(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.resultsetTable.toolTipText")); // NOI18N
        //labels for
        prepStmtLabel.setLabelFor(preparedStmtTxtArea);
        paramsLabel.setLabelFor(paramsTable);
        resultsetsLabel.setLabelFor(resultsetTable);
        jLabel1.setLabelFor(statusText);
        //accessibility
        preparedStmtTxtArea.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.preparedStmtTxtArea.AccessibleContext.accessibleName")); // NOI18N
        preparedStmtTxtArea.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.preparedStmtTxtArea.AccessibleContext.accessibleDescription")); // NOI18N
        paramsTable.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.paramsTable.AccessibleContext.accessibleName")); // NOI18N
        paramsTable.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.paramsTable.AccessibleContext.accessibleDescription")); // NOI18N
        resultsetTable.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.resultsetTable.AccessibleContext.accessibleName")); // NOI18N
        resultsetTable.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.resultsetTable.AccessibleContext.accessibleDescription")); // NOI18N
        statusText.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.statusText.AccessibleContext.accessibleName")); // NOI18N
        statusText.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.statusText.AccessibleContext.accessibleDescription")); // NOI18N
        jbtnFindParams.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindParams.AccessibleContext.accessibleName")); // NOI18N
        jbtnFindParams.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindParams.AccessibleContext.accessibleDescription")); // NOI18N
        jbtnFindResultset.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindResultset.AccessibleContext.accessibleName")); // NOI18N
        jbtnFindResultset.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PreparedStatementPanel.class, "PreparedStatementPanel.jbtnFindResultset.AccessibleContext.accessibleDescription")); // NOI18N
        
    }

    public void tableChanged(TableModelEvent e) {
        edited = true;
    }
     
}

/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 * 
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 * 
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * 
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.wsdlextensions.mq.editor;

import java.util.Arrays;
import javax.swing.JComponent;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

import org.netbeans.modules.wsdlextensions.mq.editor.event.TextFieldFocusListener;
import org.netbeans.modules.wsdlextensions.mq.editor.panels.AdvancedQueueManagerPanel;

/**
 * Subclass of AdvancedQueueManagerPanel that adds controller connectives (event
 * handling et al). MAINTAINERS PLEASE NOTE: The superclass is a panel that is
 * tool-generated by the NetBeans Matisse tool.  To preserve maintainability,
 * you should not modify the superclass thru any other tool AND you should not
 * add any non layout-related code to it EVEN with the Matisse tool. All
 * concerns beyond layout, such as event-handling, input validation, focus cycle
 * customization, localization, etc., should be in this class instead!
 *
 * @author Noel.Ang@sun.com
 */
final class QueueManagerSettingsPanel
        extends AdvancedQueueManagerPanel
        implements Form.FormView {

    QueueManagerSettingsPanel() {
        super();
        init();
    }

    private void init() {
        initFocusListeners();
        initActionListeners();
        initDocumentListeners();
    }

    /** Creates and assigns focus listeners. */
    private void initFocusListeners() {
        TextFieldFocusListener listener;

        // 'queue manager' field focus listener
        listener = new TextFieldFocusListener(mQueueManagerTextField, null);
        mQueueManagerTextField.addFocusListener(listener);

        // 'username' field focus listener
        listener = new TextFieldFocusListener(mUsernameTextField, null);
        mUsernameTextField.addFocusListener(listener);

        // 'password' field focus listener
        listener = new TextFieldFocusListener(mPasswordField, null);
        mPasswordField.addFocusListener(listener);

        // 'SSL peer name' field focus listener
        listener = new TextFieldFocusListener(mSslPeerNameTextField, null);
        mSslPeerNameTextField.addFocusListener(listener);
    }

    /** Creates and assigns action listeners. */
    private void initActionListeners() {
        //None needed at this time.
    }

    /** Creates and assigns document listeners */
    private void initDocumentListeners() {
        // This document listener is for all the other fields
        // when the 'queue' field is empty.
        mQueueManagerTextField.getDocument()
                .addDocumentListener(new DocumentListener() {
                    private void evaluateAssociateFields(Document document) {
                        String text = "";
                        int length = document.getLength();
                        if (length != 0) {
                            try {
                                text = document.getText(0, length);
                            } catch (BadLocationException e1) {
                                text = "";
                            }
                        }
                        boolean enableAssociateFields = false;
                        for (int idx = 0; idx < length; ++idx) {
                            if (!Character.isWhitespace(text.charAt(idx))) {
                                enableAssociateFields = true;
                                break;
                            }
                        }
                        mCipherSpecComboBox.setEnabled(enableAssociateFields);
                        mSslPeerNameTextField.setEnabled(enableAssociateFields);
                        mUsernameTextField.setEnabled(enableAssociateFields);
                        mPasswordField.setEnabled(enableAssociateFields);
                    }

                    public void insertUpdate(DocumentEvent e) {
                        evaluateAssociateFields(e.getDocument());
                    }

                    public void removeUpdate(DocumentEvent e) {
                        evaluateAssociateFields(e.getDocument());
                    }

                    public void changedUpdate(DocumentEvent e) {
                        evaluateAssociateFields(e.getDocument());
                    }
                }
                );
    }
    
    JComponent getDefaultFocusComponent() {
        return mQueueManagerTextField;
    }
    
    /**
     * Populate the form's view with the information provided. If the supplied
     * model is not a type that is recognized or meaningful, it can be
     * disregarded.
     *
     * @param data A supported FormModel instance.
     */
    public synchronized void load(final Form.FormModel data) {
        if (!SwingUtilities.isEventDispatchThread()) {
            Utils.dispatchToSwingThread("load", new Runnable() {
                public void run() {
                    load(data);
                }
            });
        }
        if (data instanceof MqBindingsFormModel) {
            MqBindingsFormModel model = (MqBindingsFormModel) data;
            mQueueManagerTextField.setText(model.getQueueManager());
            mCipherSpecComboBox.setSelectedItem(model.getCipherSuite());
            mSslPeerNameTextField.setText(model.getSslPeerName());
            mUsernameTextField.setText(model.getUsername());

            char[] password = model.getPassword();
            mPasswordField.setText(new String(password));
            Arrays.fill(password, (char) 0);
        }
    }

    /**
     * Populate a model object with the data in the view. If the supplied model
     * is not a type that is recognized or meaningful, it can be disregarded.
     *
     * @param data A supported FormModel instance
     */
    public synchronized void write(final Form.FormModel data) {
        if (!SwingUtilities.isEventDispatchThread()) {
            Utils.dispatchToSwingThread("write", new Runnable() {
                public void run() {
                    write(data);
                }
            });
        }
        if (data instanceof MqBindingsFormModel) {
            MqBindingsFormModel model = (MqBindingsFormModel) data;
            // These fields may be disabled.
            // If they are disabled, do not change them in the model.
            model.setQueueManager(mQueueManagerTextField.getText());
            if (mCipherSpecComboBox.isEnabled()) {
                model.setCipherSuite(mCipherSpecComboBox.getSelectedItem().toString());
            }
            if (mSslPeerNameTextField.isEnabled()) {
                model.setSslPeerName(mSslPeerNameTextField.getText());
            }
            if (mUsernameTextField.isEnabled()) {
                model.setUsername(mUsernameTextField.getText());
            }
            if (mPasswordField.isEnabled()) {
                char[] password = mPasswordField.getPassword();
                model.setPassword(password);
                if (password != null) {
                    Arrays.fill(password, (char) 0);
                }
            }
        }
    }
}

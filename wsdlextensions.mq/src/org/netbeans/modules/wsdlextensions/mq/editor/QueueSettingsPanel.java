/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 * 
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 * 
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * 
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.wsdlextensions.mq.editor;

import javax.swing.SwingUtilities;
import javax.swing.JComponent;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

import org.netbeans.modules.wsdlextensions.mq.editor.event.TextFieldFocusListener;
import org.netbeans.modules.wsdlextensions.mq.editor.panels.AdvancedQueuePanel;

/**
 * Subclass of AdvancedQueuePanel that adds controller connectives (event
 * handling et al). MAINTAINERS PLEASE NOTE: The superclass is a panel that is
 * tool-generated by the NetBeans Matisse tool.  To preserve maintainability,
 * you should not modify the superclass thru any other tool AND you should not
 * add any non layout-related code to it EVEN with the Matisse tool. All
 * concerns beyond layout, such as event-handling, input validation, focus cycle
 * customization, localization, etc., should be in this class instead!
 *
 * @author Noel.Ang@sun.com
 */
final class QueueSettingsPanel
        extends AdvancedQueuePanel
        implements Form.FormView {

    QueueSettingsPanel() {
        super();
        init();
    }

    private void init() {
        initFocusListeners();
        initActionListeners();
        initDocumentListeners();
    }

    /** Creates and assigns focus listeners. */
    private void initFocusListeners() {
        TextFieldFocusListener listener;

        // 'queue' field focus listener
        listener = new TextFieldFocusListener(mQueueTextField, null);
        mQueueTextField.addFocusListener(listener);
    }

    /** Creates and assigns action listeners. */
    private void initActionListeners() {
        // None needed at this time.
    }

    /** Creates and assigns document listeners */
    private void initDocumentListeners() {
        // This document listener is for all the other fields
        // when the 'queue' field is empty.
        mQueueTextField.getDocument()
                .addDocumentListener(new DocumentListener() {
                    private void evaluateAssociateFields(Document document) {
                        String text = "";
                        int length = document.getLength();
                        if (length != 0) {
                            try {
                                text = document.getText(0, length);
                            } catch (BadLocationException e1) {
                                text = "";
                            }
                        }
                        boolean enableAssociateFields = false;
                        for (int idx = 0; idx < length; ++idx) {
                            if (!Character.isWhitespace(text.charAt(idx))) {
                                enableAssociateFields = true;
                                break;
                            }
                        }
                        mBindingOptionDefaultButton.setEnabled(enableAssociateFields);
                        mBindingOptionOnOpenButton.setEnabled(enableAssociateFields);
                        mBindingOptionNoBindButton.setEnabled(enableAssociateFields);
                        mReadOptionDefaultButton.setEnabled(enableAssociateFields);
                        mReadOptionSharedButton.setEnabled(enableAssociateFields);
                        mReadOptionExclusiveButton.setEnabled(enableAssociateFields);
                    }

                    public void insertUpdate(DocumentEvent e) {
                        evaluateAssociateFields(e.getDocument());
                    }

                    public void removeUpdate(DocumentEvent e) {
                        evaluateAssociateFields(e.getDocument());
                    }

                    public void changedUpdate(DocumentEvent e) {
                        evaluateAssociateFields(e.getDocument());
                    }
                }
                );
    }

    JComponent getDefaultFocusComponent() {
        return mQueueTextField;
    }
    
    /**
     * Populate the form's view with the information provided. If the supplied
     * model is not a type that is recognized or meaningful, it can be
     * disregarded.
     *
     * @param data A supported FormModel instance.
     */
    public synchronized void load(final Form.FormModel data) {
        if (!SwingUtilities.isEventDispatchThread()) {
            Utils.dispatchToSwingThread("load", new Runnable() {
                public void run() {
                    load(data);
                }
            });
        }
        if (data instanceof MqBindingsFormModel) {
            final MqBindingsFormModel model = (MqBindingsFormModel) data;
            mQueueTextField.setText(model.getQueue());
            mBindingOptionDefaultButton.setSelected(model.getIsDefaultBindingOption());
            mBindingOptionNoBindButton.setSelected(model.getIsNoBindingOption());
            mBindingOptionOnOpenButton.setSelected(model.getIsOnOpenBindingOption());
            mReadOptionDefaultButton.setSelected(model.getIsDefaultReadOption());
            mReadOptionExclusiveButton.setSelected(model.getIsExclusiveReadOption());
            mReadOptionSharedButton.setSelected(model.getIsSharedReadOption());
        }
    }

    /**
     * Populate a model object with the data in the view. If the supplied model
     * is not a type that is recognized or meaningful, it can be disregarded.
     *
     * @param data A supported FormModel instance
     */
    public synchronized void write(final Form.FormModel data) {
        if (!SwingUtilities.isEventDispatchThread()) {
            Utils.dispatchToSwingThread("write", new Runnable() {
                public void run() {
                    write(data);
                }
            });
        }
        if (data instanceof MqBindingsFormModel) {
            final MqBindingsFormModel model = (MqBindingsFormModel) data;
            model.setQueue(mQueueTextField.getText());
            // These fields may be disabled.
            // If they are disabled, do not change them in the model.
            if (mBindingOptionDefaultButton.isEnabled()) {
                model.setIsDefaultBindingOption(mBindingOptionDefaultButton.isSelected());
            }
            if (mBindingOptionNoBindButton.isEnabled()) {
                model.setIsNoBindingOption(mBindingOptionNoBindButton.isSelected());
            }
            if (mBindingOptionOnOpenButton.isEnabled()) {
                model.setIsOnOpenBindingOption(mBindingOptionOnOpenButton.isSelected());
            }
            if (mReadOptionDefaultButton.isEnabled()) {
                model.setIsDefaultReadOption(mReadOptionDefaultButton.isSelected());
            }
            if (mReadOptionExclusiveButton.isEnabled()) {
                model.setIsExclusiveReadOption(mReadOptionExclusiveButton.isSelected());
            }
            if (mReadOptionSharedButton.isEnabled()) {
                model.setIsSharedReadOption(mReadOptionSharedButton.isSelected());
            }
        }
    }
}

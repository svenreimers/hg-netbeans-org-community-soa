package org.netbeans.modules.soa.palette.java.constructs;

import java.util.List;
import java.util.Vector;

/**
 *
 * @author lyu
 */
public class XSD_DOMNode {
    // Member Variables
        private Vector mChildren;
        private String mElementName;
        private boolean mIsEnum;
        private String mName;
        private Class mNodeClass;
        private XSD_DOMNode mParent;
        private boolean mIsRepeating;
        private String mValueType;

    // Constructor
        /**
         * Default constructor for the XSD_DOMNode class
         */
        public XSD_DOMNode() {
            clear();
        }

    // Private Functions
        /**
         * Returns this XSD_DOMNode represented as a string and indented by the 
         * amount of spaces specified by the indent parameter.  For example, to
         * indent the representation of this node by three spaces, call this 
         * function with an indent parameter of "   ".  This function is used
         * mainly for debug purposes.
         * 
         * @param  indent Amount of spaces to indent the string representation
         *                of this XSD_DOMNode by.
         * @return        String representation of this XSD_DOMNode
         */
        private String toStringIndented(String indent) {
            // Variables
                String s;
                String[] sa;
                
            // Create Stromg
                s = indent;
                s = s + getName();
                
            // Show Attributes and value and className
                s = s + " { ";
                if (mValueType.length() != 0) {
                    s = s + "*value*='" + mValueType + "' ";
                }                
                if (mNodeClass != null) {
                    s = s + "*className*='" + mNodeClass.getName() + "' ";
                } else {
                    s = s + "*className*='null' ";                        
                }
                if (mIsEnum) {
                    s = s + "*IsEnum* ";                    
                }
                if (mIsRepeating) {
                    s = s + "*IsRepeating* ";                                        
                }
                s = s + "}\n";
                
            // Show Children
                for (int i = 0; i < getChildCount(); i++) {
                    s = s + getChild(i).toStringIndented(indent + "   ");
                }
                                
            // Success!
                return s;
        }
        
    // Public Functions
        /**
         * Adds a child to this XSD_DOMNode.  The new child will be added as the
         * last child of this XSD_DOMNode.
         * 
         * @param node Instance of XSD_DOMNode to add as last child of this node
         */
        public void addChild(XSD_DOMNode node) {
            mChildren.add(node);
        }
        
        /**
         * Clears this XSD_DOMNode
         */
        public void clear() {
            mChildren = new Vector();
            mNodeClass= null;
            mIsEnum = false;
            mIsRepeating = false;
            mName = "";
            mValueType = "";
        }
        
        /**
         * Returns a child of this XSD_DOMNode specified by the index parameter.
         * 
         * @param  index  Index of the child to return
         * @return        The child of this XSD_DOMNode specified by the index parameter.
         */
        public XSD_DOMNode getChild(int index) {
            return (XSD_DOMNode) mChildren.get(index);
        }
        
        /**
         * Returns the number of children this XSD_DOMNode contains.
         * 
         * @return int
         */
        public int getChildCount() {
            return mChildren.size();
        }
        
        /**
         * Returns the element name of the XSD element that this XSD_DOMNode represents.
         * 
         * @return String 
         */
        public String getElementName() {
            return mElementName;
        }
        
        /**
         * Returns the name of the XSD object that this XSD_DOMNode represents.
         * This may return a different value then getElementName() since JAXB may
         * mangle the name to remove forbidden characters and impose casing rules.
         * 
         * @return String 
         */
        public String getName() {
            return mName;
        }

        /**
         * Returns the java class which is the implementation of the XSD Object
         * that this XSD_DOMNode represents.  The java class is generated by
         * JAXB.
         * 
         * @return class
         */
        public Class getNodeClass() {
            return mNodeClass;
        }
                        
        /**
         * Returns the parent of this XSD_DOMNode.  The XSD_DOMNodes are organized
         * in a tree structure like the original XSD.
         * 
         * @return XSD_DOMNode
         */
        public XSD_DOMNode getParent() {
            return mParent;
        }
/*        
        public String getValueType() {
            return mValueType;
        }
*/        
        /**
         * Returns true if this XSD_DOMNode represents and XSD enumeration
         * 
         * @return boolean
         */
        public boolean isEnum() {
            return mIsEnum;
        }
        
        /**
         * Returns true if this XSD_DOMNode represents an XSD Object which has
         * a minOccurs or a maxOccurs value other then one.
         * 
         * @return boolean
         */
        public boolean isRepeating() {
            return mIsRepeating;
        }
        
        /**
         * Sets the ElementName of this XSD_DOMNode.
         * This should only be called when initializing this instance of the 
         * XSD_DOMNode.
         * 
         * @param newVal New ElementName for this XSD_DOMNode.
         */
        public void setElementName(String newVal) {
            mElementName = newVal;
        }

        /**
         * Sets whether this XSD_DOMNode represents an XSD enumeration.
         * This should only be called when initializing this instance of the 
         * XSD_DOMNode.
         * 
         * @param newVal True if this XSD_DOMNode repesents an XSD enumeration,
         *               False otherwise.
         */
        public void setIsEnum(boolean newVal) {
            mIsEnum = newVal;
        }
        
        /**
         * Sets whether this XSD_DOMNode repesents an XSD Object which has 
         * Returns true if this XSD_DOMNode represents an XSD Object which has
         * a minOccurs or a maxOccurs value other then one.
         * This should only be called when initializing this instance of the 
         * XSD_DOMNode.
         * 
         * @param newVal True if this XSD_DOMNode repesents an XSD Object which
         *               has a minOccurs or a maxOccurs value other then one,
         *               False otherwise.
         */
        public void setIsRepeating(boolean newVal) {
            mIsRepeating = newVal;
        }
        
        /**
         * Sets the name of this XSD_DOMNode.  This name is the name used by
         * codegen, not teh ElementName.
         * This should only be called when initializing this instance of the 
         * XSD_DOMNode.
         * 
         * @param newVal  New Name for this XSD_DOMNode.
         */
        public void setName(String newVal) {
            mName = newVal;
        }
      
        /**
         * Sets the java class which is the implementation of the XSD Object
         * that this XSD_DOMNode represents.  The java class is generated by
         * JAXB.
         * This should only be called when initializing this instance of the 
         * XSD_DOMNode.
         * 
         * @param newVal  The java class that this XSD_DOMNode is repesenting.
         */
        public void setNodeClass(Class newVal) {
            mNodeClass = newVal;
        }
        
        /**
         * Sets the parent of this XSD_DOMNode.  This must be called in
         * conjunction with addChild() on the parent.
         * This should only be called when initializing this instance of the 
         * XSD_DOMNode.
         * 
         * @param newVal NewParent of this XSD_DOMNode.
         */
        public void setParent(XSD_DOMNode newVal) {
            mParent = newVal;
        }
/*                
        public void setValueType(String newVal) {
            mValueType = newVal;
        }
*/
        /**
         * Returns a string representation of this XSD_DOMNode.  Used mainly
         * for debugging purposes.
         * 
         * @return String
         */
        public String toString() {
            return toStringIndented("");
        }               
        
        public XSD_DOMNode deepClone(){
            XSD_DOMNode copy = new XSD_DOMNode();
            copy.setElementName(this.mElementName);
            copy.setIsEnum(this.mIsEnum);
            copy.setIsRepeating(this.mIsRepeating);
            copy.setName(mName);
            copy.setNodeClass(mNodeClass);
            if (this.mChildren != null){
                List<XSD_DOMNode> origChildren = this.mChildren;
                XSD_DOMNode childCopy = null;
                for (XSD_DOMNode origChild: origChildren){
                    childCopy = origChild.deepClone();
                    childCopy.setParent(copy);
                    copy.addChild(childCopy);
                }
            }
            return copy;
        }
}
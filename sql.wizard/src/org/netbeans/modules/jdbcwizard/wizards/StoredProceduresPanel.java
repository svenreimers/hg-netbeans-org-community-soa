/*
 * StoredProceduresPanel.java
 *
 * Created on August 11, 2008, 3:50 PM
 */
package org.netbeans.modules.jdbcwizard.wizards;

import java.awt.Component;
import java.awt.Dialog;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import org.netbeans.api.db.explorer.DatabaseConnection;
import org.netbeans.modules.jdbcwizard.builder.DBMetaData;
import org.netbeans.modules.jdbcwizard.builder.Procedure;
import org.netbeans.modules.jdbcwizard.builder.ResultSetColumns;
import org.netbeans.modules.jdbcwizard.builder.util.Utils;
import org.openide.ErrorManager;
import org.openide.NotifyDescriptor;
import org.openide.WizardDescriptor;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;

/**
 *
 * @author  pponnala
 */
public class StoredProceduresPanel extends javax.swing.JPanel implements WizardDescriptor.Panel {

    private DefaultTableModel storedProcParamsModel;
    private DefaultTableModel storedProcResultsetModel;
    private DefaultTableModel storedProcTableListModel;
    private DefaultTableModel selectedStoredProcsModel;
    private ProcedureParametersDialog procedureParametersDialog;
    private ProcedureResultsetDialog procResultSetsDialog;
    private DatabaseConnection dbConn;
    private DBMetaData dbMeta;
    private Hashtable selectedProcList;
    private final List /* <ChangeListener> */ listeners = new ArrayList();
    private ArrayList<ResultSetColumns> resultsetMap; //ArrayList of resultsets.

    /** Creates new form StoredProceduresPanel */
    public StoredProceduresPanel() {
        storedProcTableListModel = new DefaultTableModel(new Object[]{"Name", "Catalog", "Schema", "Procedure Type"}, 0);
        selectedStoredProcsModel = new DefaultTableModel(new Object[]{"Name", "Catalog", "Schema", "Procedure Type"}, 0);
        storedProcParamsModel = new DefaultTableModel(new Object[]{"Parameter Name", "Parameter Type"}, 0);
        storedProcResultsetModel = new DefaultTableModel(new Object[]{"Resultset Name, Resultset"}, 0);
        selectedProcList = new Hashtable();
        resultsetMap = new ArrayList();
        initComponents();
        loadProcList();
    }

    void setConnection(DatabaseConnection connection) {
        this.dbConn = connection;
        this.dbMeta = new DBMetaData();
        loadProcList();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        storedProcEditorLabel = new javax.swing.JLabel();
        procListLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        storedProcStatusText = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        storedProcTable = new JTable() {
            public boolean isCellEditable(int x, int y) {
                return false;
            }
        };
        jScrollPane5 = new javax.swing.JScrollPane();
        tblSelectedStoredProcs = new JTable() {
            public boolean isCellEditable(int x, int y) {
                return false;
            }
        };
        btnSelectStoredProc = new javax.swing.JButton();
        lblProcNumParameters = new javax.swing.JLabel();
        editParamsButton = new javax.swing.JButton();
        lblProcNumResultsets = new javax.swing.JLabel();
        btnEditResultsets = new javax.swing.JButton();
        procListLabel1 = new javax.swing.JLabel();
        btnRemoveSP = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblSelectedProcName = new javax.swing.JLabel();

        setToolTipText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.toolTipText")); // NOI18N

        storedProcEditorLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        storedProcEditorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        storedProcEditorLabel.setText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.storedProcEditorLabel.text")); // NOI18N

        procListLabel.setFont(procListLabel.getFont().deriveFont(procListLabel.getFont().getStyle() | java.awt.Font.BOLD, procListLabel.getFont().getSize()+1));
        procListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        procListLabel.setLabelFor(storedProcTable);
        org.openide.awt.Mnemonics.setLocalizedText(procListLabel, org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.procListLabel.text")); // NOI18N
        procListLabel.setToolTipText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.procListLabel.toolTipText")); // NOI18N
        procListLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        storedProcStatusText.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        storedProcStatusText.setColumns(20);
        storedProcStatusText.setEditable(false);
        storedProcStatusText.setFont(storedProcStatusText.getFont());
        storedProcStatusText.setLineWrap(true);
        storedProcStatusText.setRows(5);
        storedProcStatusText.setToolTipText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.storedProcStatusText.toolTipText")); // NOI18N
        jScrollPane3.setViewportView(storedProcStatusText);
        storedProcStatusText.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.storedProcStatusText.AccessibleContext.accessibleName")); // NOI18N
        storedProcStatusText.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.storedProcStatusText.AccessibleContext.accessibleDescription")); // NOI18N

        storedProcTable.setModel(storedProcTableListModel);
        storedProcTable.setToolTipText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.storedProcTable.toolTipText")); // NOI18N
        storedProcTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(storedProcTable);
        storedProcTable.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.storedProcTable.AccessibleContext.accessibleName")); // NOI18N
        storedProcTable.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.storedProcTable.AccessibleContext.accessibleDescription")); // NOI18N

        tblSelectedStoredProcs.setFont(tblSelectedStoredProcs.getFont());
        tblSelectedStoredProcs.setModel(selectedStoredProcsModel);
        tblSelectedStoredProcs.setToolTipText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.tblSelectedStoredProcs.toolTipText")); // NOI18N
        tblSelectedStoredProcs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(tblSelectedStoredProcs);
        tblSelectedStoredProcs.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.tblSelectedStoredProcs.AccessibleContext.accessibleName")); // NOI18N
        tblSelectedStoredProcs.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.tblSelectedStoredProcs.AccessibleContext.accessibleDescription")); // NOI18N

        btnSelectStoredProc.setFont(btnSelectStoredProc.getFont());
        org.openide.awt.Mnemonics.setLocalizedText(btnSelectStoredProc, org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnSelectStoredProc.text")); // NOI18N
        btnSelectStoredProc.setToolTipText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnSelectStoredProc.toolTipText")); // NOI18N
        btnSelectStoredProc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectStoredProcActionPerformed(evt);
            }
        });

        lblProcNumParameters.setText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.lblProcNumParameters.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(editParamsButton, org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.editParamsButton.text")); // NOI18N
        editParamsButton.setToolTipText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.editParamsButton.toolTipText")); // NOI18N
        editParamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editParamsButtonActionPerformed(evt);
            }
        });

        lblProcNumResultsets.setText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.lblProcNumResultsets.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnEditResultsets, org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnEditResultsets.text")); // NOI18N
        btnEditResultsets.setToolTipText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnEditResultsets.toolTipText")); // NOI18N
        btnEditResultsets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditResultsetsActionPerformed(evt);
            }
        });

        procListLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        procListLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        procListLabel1.setLabelFor(tblSelectedStoredProcs);
        org.openide.awt.Mnemonics.setLocalizedText(procListLabel1, org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.procListLabel1.text")); // NOI18N
        procListLabel1.setToolTipText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.procListLabel1.toolTipText")); // NOI18N
        procListLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(btnRemoveSP, org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnRemoveSP.text")); // NOI18N
        btnRemoveSP.setToolTipText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnRemoveSP.toolTipText")); // NOI18N
        btnRemoveSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveSPActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setLabelFor(storedProcStatusText);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.jLabel1.text")); // NOI18N

        lblSelectedProcName.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblSelectedProcName.setText(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.lblSelectedProcName.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(procListLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 182, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, procListLabel)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 557, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                            .add(btnRemoveSP)
                                            .add(18, 18, 18)
                                            .add(lblSelectedProcName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(18, 18, 18)
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                .add(lblProcNumResultsets, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(lblProcNumParameters, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(btnEditResultsets)
                                                .add(editParamsButton))))))
                            .add(btnSelectStoredProc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 153, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(48, 48, 48)
                        .add(storedProcEditorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 453, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {btnRemoveSP, btnSelectStoredProc}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.linkSize(new java.awt.Component[] {jLabel1, procListLabel1}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(storedProcEditorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(procListLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnSelectStoredProc)
                .add(1, 1, 1)
                .add(procListLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnRemoveSP)
                    .add(editParamsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(lblProcNumParameters, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(lblSelectedProcName)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(46, 46, 46)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(btnEditResultsets)
                        .add(lblProcNumResultsets)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {lblProcNumParameters, lblProcNumResultsets, lblSelectedProcName}, org.jdesktop.layout.GroupLayout.VERTICAL);

        layout.linkSize(new java.awt.Component[] {btnEditResultsets, btnRemoveSP, btnSelectStoredProc, editParamsButton}, org.jdesktop.layout.GroupLayout.VERTICAL);

        layout.linkSize(new java.awt.Component[] {jLabel1, procListLabel1}, org.jdesktop.layout.GroupLayout.VERTICAL);

        btnSelectStoredProc.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnSelectStoredProc.AccessibleContext.accessibleName")); // NOI18N
        btnSelectStoredProc.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnSelectStoredProc.AccessibleContext.accessibleDescription")); // NOI18N
        editParamsButton.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.editParamsButton.AccessibleContext.accessibleName")); // NOI18N
        editParamsButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.editParamsButton.AccessibleContext.accessibleDescription")); // NOI18N
        btnEditResultsets.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnEditResultsets.AccessibleContext.accessibleName")); // NOI18N
        btnEditResultsets.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnEditResultsets.AccessibleContext.accessibleDescription")); // NOI18N
        procListLabel1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.procListLabel1.AccessibleContext.accessibleName")); // NOI18N
        procListLabel1.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.procListLabel1.AccessibleContext.accessibleDescription")); // NOI18N
        btnRemoveSP.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnRemoveSP.AccessibleContext.accessibleName")); // NOI18N
        btnRemoveSP.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.btnRemoveSP.AccessibleContext.accessibleDescription")); // NOI18N
        jLabel1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.jLabel1.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

private void btnSelectStoredProcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectStoredProcActionPerformed
    //Allow only single selection for now.
    if ((this.storedProcTable.getSelectedRow() != -1) && (this.selectedProcList.size() < 1)) {
        String storedProcName = getSelectedProcName();
        String catalog = getSelectedProcCatalog();
        String schema = getSelectedProcSchema();
        String storedProcType = getSelectedProcType();
        addStoredProcToList(storedProcName, catalog, schema, storedProcType);
    } else {
        if (this.selectedProcList.size() > 0) {
            storedProcStatusText.setText("Only single stored procedure is supported. \n Please remove the existing procedure and add again");
        }
    }

}//GEN-LAST:event_btnSelectStoredProcActionPerformed
    private String getSelectedProcName() {
        return (String) storedProcTableListModel.getValueAt(this.storedProcTable.getSelectedRow(), 0);
    }

    private String getSelectedProcCatalog() {
        return (String) storedProcTableListModel.getValueAt(this.storedProcTable.getSelectedRow(), 1);
    }

    private String getSelectedProcSchema() {
        return (String) storedProcTableListModel.getValueAt(this.storedProcTable.getSelectedRow(), 2);
    }

    private String getSelectedProcType() {
        return (String) storedProcTableListModel.getValueAt(this.storedProcTable.getSelectedRow(), 3);
    }

private void editParamsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editParamsButtonActionPerformed
    Procedure p = getCurrentProcedureSelected();
    if (p != null) {
        Dialog parent = (Dialog) SwingUtilities.getRoot(this.getComponent());
        ProcedureParametersDialog dlg = getProcedureParametersDialog();
        dlg.setSelectedProc(p);
        Utils.centerWindowOnScreen(dlg);
        dlg.setVisible(true);
    }
}//GEN-LAST:event_editParamsButtonActionPerformed

private void btnRemoveSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveSPActionPerformed
    removeStoredProcFromList();
    fireChangeEvent();
}//GEN-LAST:event_btnRemoveSPActionPerformed

private void btnEditResultsetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditResultsetsActionPerformed
    Procedure p = getCurrentProcedureSelected();
    if (p != null) {
        Dialog parent = (Dialog) SwingUtilities.getRoot(this.getComponent());
        ProcedureResultsetDialog dlg = getProcedureResultsetDialog();
        dlg.setSelectedProc(p);
        dlg.setResultsetColumnsList(p.getResultSetColumns());
        Utils.centerWindowOnScreen(dlg);
        dlg.setVisible(true);

    }
}//GEN-LAST:event_btnEditResultsetsActionPerformed

    private Procedure getCurrentProcedureSelected() {
        Procedure p = null;

        // find the current selected row
        int i = tblSelectedStoredProcs.getSelectedRow();
        if (i > -1) {
            // generate the key to get the procedure from the hashtable
            String name = (String) tblSelectedStoredProcs.getValueAt(i, 0);
            String catalog = (String) tblSelectedStoredProcs.getValueAt(i, 1);
            String schema = (String) tblSelectedStoredProcs.getValueAt(i, 2);
            String type = (String) tblSelectedStoredProcs.getValueAt(i, 3);
            String key = Utils.getKey(catalog, schema, name, type);

            p = (Procedure) selectedProcList.get(key);
        }
        return p;
    }

    private void addStoredProcToList(String spName, String catalog, String schema, String procType) {
        try {
            String key = Utils.getKey(catalog, schema, spName, procType);
            Procedure newProc = (Procedure) selectedProcList.get(key);
            if (newProc == null) {
                newProc = DBMetaData.getProcedureMetaData(catalog, schema, spName, procType, dbConn.getJDBCConnection());
                selectedProcList.put(key, newProc);
                addProcedure(newProc);
                //selectedStoredProcsModel.addRow(new Object[]{spName, catalog, schema, procType});
                int lastRow = tblSelectedStoredProcs.getRowCount() - 1;
                //tblSelectedStoredProcs.setRowSelectionInterval(lastRow, lastRow);
                //String paramsText = NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.procNumParametersLabel.text");
                //String resultsetText = NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.procNumResultsetsLabel.text");
                //lblProcNumParameters.setText(Utils.replaceAllChars(paramsText, '0', String.valueOf(newProc.getNumParameters())));
                //lblProcNumResultsets.setText(Utils.replaceAllChars(resultsetText, '0', String.valueOf(newProc.getResultSetColumns().size())));
                updateDescription(newProc);
                enableButtons();
                // now make sure this newly added row is visible - scroll to it
                java.awt.Rectangle rect = tblSelectedStoredProcs.getCellRect(lastRow, 0, true);
                scrollRectToVisible(rect);
            }
            //isValid();
            fireChangeEvent();

        } catch (Exception ex) {
            storedProcStatusText.setText(ex.getLocalizedMessage());
            ErrorManager.getDefault().log(ErrorManager.ERROR, ex.getMessage());
            ErrorManager.getDefault().notify(ErrorManager.ERROR, ex);
        }
    }

    /**
     * Adds a procedure to the selected list - for Edit button
     * 
     * @param Procedure
     */
    public void addProcedure(Procedure p) {
        if (null != p) {
            String key = Utils.getKey(p.getCatalog(), p.getSchema(), p.getName(), p.getType());
            //get procedure resultsets and add it.
            ArrayList rs = getProcResultsets(p);
            selectedProcList.put(key, p);

            // add it to the selected table
            String[] procInfo = {p.getName(), p.getCatalog(), p.getSchema(), p.getType()};
            DefaultTableModel dm = (DefaultTableModel) tblSelectedStoredProcs.getModel();
            dm.addRow(procInfo);

            // select the last row which should be what we just added
            int lastRow = tblSelectedStoredProcs.getRowCount() - 1;
            tblSelectedStoredProcs.setRowSelectionInterval(lastRow, lastRow);

        }
    }

    private ArrayList<ResultSetColumns> getProcResultsets(Procedure p) {
        ArrayList resultSetColumnsList = new ArrayList();

        try {
            discoverResultsets(p);
            // retrieve the array of ResultSetColumns objects
            ResultSetColumns[] result = p.getResultSetColumnsArray();
            // get the count of resultsets
            int numResultSets = result.length;
            int numRSCols = 0;

            // check if the ResultSetColumns array holds any valid ResultSetColumn objects
            for (int i = 0; i < numResultSets; i++) {
                numRSCols += result[i].getNumColumns();
            }

            // if the procedure does not return any resultsets
            if (numRSCols > 0) {
                for (int i = 0; i < numResultSets; i++) {
                    // add the resultset object to the hashtable
                    resultSetColumnsList.add(result[i]);
                }
            }
        } catch (NullPointerException npe) {
            ErrorManager.getDefault().log(npe.getLocalizedMessage());
            ErrorManager.getDefault().notify(npe);
        }
        return resultSetColumnsList;

    }

    private void removeStoredProcFromList() {
        try {
            // get the selected row
            int selRow = tblSelectedStoredProcs.getSelectedRow();
            if (selRow > -1) {
                // generate the key to remove it from the selection hashtable            
                String proc = (String) tblSelectedStoredProcs.getValueAt(selRow, 0);
                String catalog = (String) tblSelectedStoredProcs.getValueAt(selRow, 1);
                String schema = (String) tblSelectedStoredProcs.getValueAt(selRow, 2);
                String type = (String) tblSelectedStoredProcs.getValueAt(selRow, 3);
                String key = Utils.getKey(catalog, schema, proc, type);
                selectedProcList.remove(key);
                resultsetMap.clear();

                // remove this row from the table model
                selectedStoredProcsModel.removeRow(selRow);

                // now select the next row or previous row if any
                int newRow = -1;
                if (selRow < tblSelectedStoredProcs.getRowCount()) {
                    // select the next row following the deleted one
                    newRow = selRow;
                } else {
                    // select the previous row since the deleted one was 
                    // the last row
                    newRow = selRow - 1;
                }

                if (newRow > -1) {
                    // there are still row(s) to select, so select it
                    tblSelectedStoredProcs.setRowSelectionInterval(newRow, newRow);
                    Procedure p = getCurrentProcedureSelected();
                    updateDescription(p);
                } else {
                    // no more rows in the table, clear the description fields
                    clearDescriptionFields();
                }
            }
            //isValid();
            fireChangeEvent();
        } catch (Exception ex) {
            storedProcStatusText.setText(ex.getLocalizedMessage());
            ErrorManager.getDefault().log(ErrorManager.ERROR, ex.getMessage());
            ErrorManager.getDefault().notify(ErrorManager.ERROR, ex);
        }
    }

    public void clearDescriptionFields() {
        lblSelectedProcName.setText("");
        lblProcNumParameters.setText("");
        lblProcNumResultsets.setText("");
        storedProcStatusText.setText("");
        enableButtons();
    }

    private void enableButtons() {
        // enable/disable buttons based on procedure selected
        if (tblSelectedStoredProcs.getSelectedRow() > -1) {
            // enable buttons
            editParamsButton.setEnabled(true);
            btnRemoveSP.setEnabled(true);
        } else {
            // disable buttons
            editParamsButton.setEnabled(false);
            btnEditResultsets.setEnabled(false);
            btnRemoveSP.setEnabled(false);
            lblProcNumParameters.setText(NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.lblProcNumParameters.text"));
            lblProcNumResultsets.setText(NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.lblProcNumResultsets.text"));
            lblSelectedProcName.setText("");

        }
    }

    private void updateDescription(Procedure p) {
        // updates the description panel fields with the procedure p's information
        ResultSetColumns[] result = null;
        result = p.getResultSetColumnsArray();
        int rsCount = result.length;

        lblSelectedProcName.setText(p.getName());
        String selText = NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.lblProcNumParameters.text");
        selText = Utils.replaceAllChars(selText, '0', String.valueOf(p.getNumParameters()));
        lblProcNumParameters.setText(selText);
        selText = NbBundle.getMessage(StoredProceduresPanel.class, "StoredProceduresPanel.lblProcNumResultsets.text");
        selText = Utils.replaceAllChars(selText, '0', String.valueOf(rsCount));
        lblProcNumResultsets.setText(selText);
        if (rsCount > 0) {
            btnEditResultsets.setEnabled(true);
        }
    }

    @Override
    public boolean isValid() {
        if (selectedProcList.size() > 0) {
            return true;
        }
        return super.isValid();
    }

    private void loadProcList() {
        try {

            for (int i = 0; i < storedProcTableListModel.getRowCount(); i++) {
                storedProcTableListModel.removeRow(i);
            }
            storedProcStatusText.setText("");
            String[][] procs = null;
            if ((dbConn != null) && (dbConn.getJDBCConnection() != null)) {
                procs = DBMetaData.getProcedures(dbConn.getJDBCConnection().getCatalog(), dbConn.getSchema(), null, dbConn.getJDBCConnection());
                if (procs != null) {
                    for (int i = 0; i < procs.length; i++) {
                        String[] procedureItem = procs[i];
                        storedProcTableListModel.addRow(new Object[]{procedureItem[DBMetaData.NAME],
                                    procedureItem[DBMetaData.CATALOG],
                                    procedureItem[DBMetaData.SCHEMA],
                                    procedureItem[DBMetaData.TYPE]
                                });                        
                    }
                } else {
                    storedProcStatusText.setText("No stored procedures/functions exist in the schema selected");
                }

            }
            enableButtons();
        } catch (SQLException sqle) {
            storedProcStatusText.setText("Error getting list of Stored Procedures:" + sqle.getMessage());
            ErrorManager.getDefault().log(ErrorManager.ERROR, sqle.getMessage());
            ErrorManager.getDefault().notify(ErrorManager.ERROR, sqle);

        } catch (Exception ex) {
            storedProcStatusText.setText(ex.getMessage());
            ErrorManager.getDefault().log(ErrorManager.ERROR, ex.getMessage());
            ErrorManager.getDefault().notify(ErrorManager.ERROR, ex);
        }
    }

    /**
     * Constructs an appropriate name for the resultset
     * ensuring that names are not duplicated
     * 
     * @return String representation of the resultset name
     */
    private String createRSName() {
        // to store the highest index of resultset names
        int indexMax = 0;
        String tmpRSName = getSelectedProcName() + "_";

        int lenRSName = tmpRSName.length();

        // create an Integer array that contains the index part of resultset names
        // matching the pattern <<procedure name_index>>
        int[] arrRSNums = new int[resultsetMap.size()];

        if (resultsetMap.size() == 0) {
            return tmpRSName.concat(String.valueOf(indexMax));
        }

        for (int i = 0; i < resultsetMap.size(); i++) {
            String cboSelName = resultsetMap.get(i).getName();
            if (cboSelName.length() <= lenRSName) {
                continue;
            }
            String tmpSelName = cboSelName.substring(0, lenRSName);

            if (tmpSelName.equals(tmpRSName)) {
                String rsNum = cboSelName.substring(cboSelName.length() - 1);
                arrRSNums[i] = Integer.parseInt(rsNum);
            }
        }

        if (arrRSNums.length == 0) {
            return tmpRSName.concat(String.valueOf(indexMax));
        }

        // retrieve the highest index value stored in the array
        for (int i = 0; i < arrRSNums.length; i++) {
            int tmp = arrRSNums[i];
            if (tmp >= indexMax) {
                indexMax = tmp;
            }
        }

        indexMax += 1;
        return tmpRSName.concat(String.valueOf(indexMax));
    }
    /*
     * 
     * Executes the stored procedure and obtains the resultsets
     */

    private void discoverResultsets(Procedure storedProc) {
        String colName = "%";
        int numResultSets = 0;  // hold the count of resultsets

        int numRSCols = 0;      // hold the number of resultset columns

        ResultSetColumns[] result = null;
        Procedure proc = null;
        try {
            if (DBMetaData.getDBType(dbConn.getJDBCConnection()).equalsIgnoreCase(DBMetaData.SQLSERVER)) {
                proc = dbMeta.getSQLServerProcResultSetColumns(storedProc.getCatalog(),
                        storedProc.getSchema(),
                        storedProc.getName(),
                        colName,
                        dbConn.getJDBCConnection());

            } else if (DBMetaData.getDBType(dbConn.getJDBCConnection()).equalsIgnoreCase(DBMetaData.ORACLE)) {
                proc = dbMeta.getOracleProcResultSetColumns(storedProc,
                                                                colName,
                                                                dbConn.getJDBCConnection());

            } else {
                proc = DBMetaData.getProcResultSetColumns(storedProc.getCatalog(),
                        storedProc.getSchema(),
                        storedProc.getName(),
                        colName,
                        dbConn.getJDBCConnection());
            }
            // retrieve the array of ResultSetColumns objects
            result = proc.getResultSetColumnsArray();
            // get the count of resultsets
            numResultSets = result.length;

            // check if the ResultSetColumns array holds any valid ResultSetColumn objects
            for (int i = 0; i < numResultSets; i++) {
                numRSCols += result[i].getNumColumns();
            }

            // if the procedure does not return any resultsets
            if (numRSCols == 0) {
            } else {
                for (int i = 0; i < numResultSets; i++) {
                    // create the name of the resultset
                    //result[i].setName(createRSName());
                    // add the resultset object to the hashtable
                    resultsetMap.add(result[i]);
                }
                storedProc.setResultSetColumns(result);
            }
            storedProc.setCallableStmtString(proc.getCallableStmtString());
        } catch (SQLException e) {
            storedProcStatusText.setText(e.getLocalizedMessage());
        } catch (NullPointerException npe) {
            storedProcStatusText.setText(npe.getLocalizedMessage());
        } catch (Exception ex) {
           storedProcStatusText.setText(ex.getLocalizedMessage());
        }
    }

    private ProcedureParametersDialog getProcedureParametersDialog() {
        if (procedureParametersDialog == null) {
            Dialog parent = (Dialog) SwingUtilities.getRoot(this.getComponent());
            procedureParametersDialog = new ProcedureParametersDialog(parent, true);
        }
        procedureParametersDialog.setLocationRelativeTo(this);
        procedureParametersDialog.setCaller(this);
        procedureParametersDialog.setMetaDataObject(dbMeta);
        return procedureParametersDialog;
    }

    private ProcedureResultsetDialog getProcedureResultsetDialog() {
        if (procResultSetsDialog == null) {
            Dialog parent = (Dialog) SwingUtilities.getRoot(this.getComponent());
            procResultSetsDialog = new ProcedureResultsetDialog(parent, true);
        }
        procResultSetsDialog.setLocationRelativeTo(this);
        procResultSetsDialog.setCaller(this);
        procResultSetsDialog.setMetaDataObject(dbMeta);
        return procResultSetsDialog;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditResultsets;
    private javax.swing.JButton btnRemoveSP;
    private javax.swing.JButton btnSelectStoredProc;
    private javax.swing.JButton editParamsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblProcNumParameters;
    private javax.swing.JLabel lblProcNumResultsets;
    private javax.swing.JLabel lblSelectedProcName;
    private javax.swing.JLabel procListLabel;
    private javax.swing.JLabel procListLabel1;
    private javax.swing.JLabel storedProcEditorLabel;
    private javax.swing.JTextArea storedProcStatusText;
    private javax.swing.JTable storedProcTable;
    private javax.swing.JTable tblSelectedStoredProcs;
    // End of variables declaration//GEN-END:variables

    public Component getComponent() {
        return this;
    }

    public HelpCtx getHelp() {
        return new HelpCtx(PreparedStatementPanel.class);
    }

    public void readSettings(Object settings) {
        WizardDescriptor wd = null;
        if (settings instanceof JDBCWizardContext) {
            final JDBCWizardContext wizardContext = (JDBCWizardContext) settings;
            wd = (WizardDescriptor) wizardContext.getProperty(JDBCWizardContext.WIZARD_DESCRIPTOR);

        } else if (settings instanceof WizardDescriptor) {
            wd = (WizardDescriptor) settings;
        }

    }

    public void fireChangeEvent() {
        Iterator it;

        synchronized (this.listeners) {
            it = new HashSet(this.listeners).iterator();
        }

        final ChangeEvent ev = new ChangeEvent(this);
        while (it.hasNext()) {
            ((ChangeListener) it.next()).stateChanged(ev);
        }
    }

    public void storeSettings(final Object settings) {
        WizardDescriptor wd = null;
        if (settings instanceof JDBCWizardContext) {
            final JDBCWizardContext wizardContext = (JDBCWizardContext) settings;
            wd = (WizardDescriptor) wizardContext.getProperty(JDBCWizardContext.WIZARD_DESCRIPTOR);

        } else if (settings instanceof WizardDescriptor) {
            wd = (WizardDescriptor) settings;
        }

        final Object selectedOption = wd.getValue();
        if (NotifyDescriptor.CANCEL_OPTION == selectedOption || NotifyDescriptor.CLOSED_OPTION == selectedOption) {
            return;
        }

        if (wd != null) {
            wd.putProperty(WizardConstants.PROCEDURES_SELECTED, new Boolean(true));
            wd.putProperty(JDBCWizardContext.SELECTEDPROCEDURES, selectedProcList);
        }
    }

    public void addChangeListener(ChangeListener l) {
        this.listeners.add(l);
    }

    public void removeChangeListener(ChangeListener l) {
        this.listeners.remove(l);
    }
}

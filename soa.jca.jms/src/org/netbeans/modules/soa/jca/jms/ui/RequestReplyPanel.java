/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.soa.jca.jms.ui;

import org.netbeans.modules.soa.jca.base.generator.api.GeneratorUtil;
import org.netbeans.modules.soa.jca.base.generator.api.JavacTreeModel;
import org.netbeans.modules.soa.jca.base.generator.api.JndiBrowser;
import com.sun.source.tree.Scope;
import com.sun.source.tree.VariableTree;
import com.sun.source.util.TreePath;
import com.sun.source.util.Trees;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.AnnotationValue;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import org.netbeans.api.java.source.ElementHandle;
import org.netbeans.api.project.Project;
import org.openide.DialogDescriptor;

/**
 *
 * @author  echou
 */
public class RequestReplyPanel extends javax.swing.JPanel implements DocumentListener {

    private DialogDescriptor d;
    private Project project;
    private JavacTreeModel javacTreeModel;
    private int caretPosition;
    private MethodComboBoxModel methodComboBoxModel;
    private ConnectionFactoryComboBoxModel connectionFactoryComboBoxModel;
    private RequestMessageComboBoxModel requestMsgComboBoxModel;
    private RequestDestinationComboBoxModel requestDestinationComboBoxModel;

    /** Creates new form RequestReplyPanel */
    public RequestReplyPanel(Project project, JavacTreeModel javacTreeModel, int caretPosition) {
        this.project = project;
        this.javacTreeModel = javacTreeModel;
        this.caretPosition = caretPosition;
        methodComboBoxModel = new MethodComboBoxModel();
        connectionFactoryComboBoxModel = new ConnectionFactoryComboBoxModel();

        // Initialize with CF created by default in CAPS installed GF.jms/notx/default
        connectionFactoryComboBoxModel.addElement("jms/notx/default"); //NOI18N

        requestMsgComboBoxModel = new RequestMessageComboBoxModel();
        requestDestinationComboBoxModel = new RequestDestinationComboBoxModel();
        initComponents();

        connectionFactComboBox.addActionListener(new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                d.setValid(isPanelValid());
            }
        });

        ConnFactComboBoxEditor connFactEditor = new ConnFactComboBoxEditor();
        connectionFactComboBox.setEditor(connFactEditor);

        // set component names for easier testability
        methodComboBox.setName("methodCmb");  // NOI18N
        connectionFactComboBox.setName("connectionFactCmb");  // NOI18N
        requestMsgComboBox.setName("requestMsgCmb");  // NOI18N
        destinationComboBox.setName("destinationCmb");  // NOI18N
        timeoutSpinner.setName("timeoutSpn");  // NOI18N

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        methodLabel = new javax.swing.JLabel();
        methodComboBox = new javax.swing.JComboBox();
        connectionFactLabel = new javax.swing.JLabel();
        connectionFactComboBox = new javax.swing.JComboBox();
        destinationLabel = new javax.swing.JLabel();
        destinationComboBox = new javax.swing.JComboBox();
        timeoutLabel = new javax.swing.JLabel();
        timeoutSpinner = new javax.swing.JSpinner();
        errorLabel = new javax.swing.JLabel();
        requestMsgLabel = new javax.swing.JLabel();
        requestMsgComboBox = new javax.swing.JComboBox();
        browseButton = new javax.swing.JButton();

        methodLabel.setDisplayedMnemonic('S');
        methodLabel.setLabelFor(methodComboBox);
        methodLabel.setText(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.methodLabel.text")); // NOI18N

        methodComboBox.setModel(methodComboBoxModel);
        methodComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                methodItemChanged(evt);
            }
        });

        connectionFactLabel.setDisplayedMnemonic('N');
        connectionFactLabel.setLabelFor(connectionFactComboBox);
        connectionFactLabel.setText(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.connectionFactLabel.text")); // NOI18N

        connectionFactComboBox.setEditable(true);
        connectionFactComboBox.setModel(connectionFactoryComboBoxModel);
        connectionFactComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                connFactoryItemChanged(evt);
            }
        });

        destinationLabel.setDisplayedMnemonic('D');
        destinationLabel.setLabelFor(destinationComboBox);
        destinationLabel.setText(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.destinationLabel.text")); // NOI18N

        destinationComboBox.setModel(requestDestinationComboBoxModel);
        destinationComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                destinationItemChanged(evt);
            }
        });

        timeoutLabel.setDisplayedMnemonic('T');
        timeoutLabel.setLabelFor(timeoutSpinner);
        timeoutLabel.setText(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.timeoutLabel.text")); // NOI18N

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setText(" ");

        requestMsgLabel.setDisplayedMnemonic('R');
        requestMsgLabel.setLabelFor(requestMsgComboBox);
        requestMsgLabel.setText(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.requestMsgLabel.text")); // NOI18N

        requestMsgComboBox.setModel(requestMsgComboBoxModel);
        requestMsgComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                requestMsgItemChanged(evt);
            }
        });

        browseButton.setText(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(errorLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, requestMsgLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, methodLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                                .add(18, 18, 18))
                            .add(layout.createSequentialGroup()
                                .add(destinationLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                                .add(42, 42, 42))
                            .add(layout.createSequentialGroup()
                                .add(connectionFactLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(43, 43, 43))
                            .add(layout.createSequentialGroup()
                                .add(timeoutLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                .add(24, 24, 24)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, timeoutSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, destinationComboBox, 0, 293, Short.MAX_VALUE)
                            .add(requestMsgComboBox, 0, 293, Short.MAX_VALUE)
                            .add(methodComboBox, 0, 293, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(connectionFactComboBox, 0, 260, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(browseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(methodLabel)
                    .add(methodComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(requestMsgLabel)
                    .add(requestMsgComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(destinationLabel)
                    .add(destinationComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(connectionFactLabel)
                    .add(connectionFactComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(browseButton))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(timeoutLabel)
                    .add(timeoutSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 90, Short.MAX_VALUE)
                .add(errorLabel)
                .add(21, 21, 21))
        );

        methodLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.methodLabel.AccessibleContext.accessibleDescription")); // NOI18N
        methodComboBox.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.methodComboBox.AccessibleContext.accessibleName")); // NOI18N
        methodComboBox.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.methodComboBox.AccessibleContext.accessibleDescription")); // NOI18N
        connectionFactLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.connectionFactLabel.AccessibleContext.accessibleDescription")); // NOI18N
        connectionFactComboBox.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.connectionFactComboBox.AccessibleContext.accessibleName")); // NOI18N
        connectionFactComboBox.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.connectionFactComboBox.AccessibleContext.accessibleDescription")); // NOI18N
        destinationLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.destinationLabel.AccessibleContext.accessibleDescription")); // NOI18N
        destinationComboBox.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.destinationComboBox.AccessibleContext.accessibleName")); // NOI18N
        destinationComboBox.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.destinationComboBox.AccessibleContext.accessibleDescription")); // NOI18N
        timeoutLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.timeoutLabel.AccessibleContext.accessibleDescription")); // NOI18N
        timeoutSpinner.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.timeoutSpinner.AccessibleContext.accessibleName")); // NOI18N
        timeoutSpinner.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.timeoutSpinner.AccessibleContext.accessibleDescription")); // NOI18N
        requestMsgLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.requestMsgLabel.AccessibleContext.accessibleDescription")); // NOI18N
        requestMsgComboBox.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.requestMsgComboBox.AccessibleContext.accessibleName")); // NOI18N
        requestMsgComboBox.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.requestMsgComboBox.AccessibleContext.accessibleDescription")); // NOI18N
        browseButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.browseButton.AccessibleContext.accessibleDescription")); // NOI18N

        getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "a11y.name.requestreplypanel")); // NOI18N
        getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.AccessibleContext.accessibleDescription")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void methodItemChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_methodItemChanged
        requestMsgComboBox.setSelectedIndex(-1);
        requestMsgComboBoxModel.setMethodElement(methodComboBoxModel.getMethodAt(methodComboBox.getSelectedIndex()));
        if (requestMsgComboBox.getItemCount() > 0) {
            requestMsgComboBox.setSelectedIndex(0);
        }
        d.setValid(isPanelValid());
    }//GEN-LAST:event_methodItemChanged

    private void connFactoryItemChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_connFactoryItemChanged
        // TODO add your handling code here:
        d.setValid(isPanelValid());
    }//GEN-LAST:event_connFactoryItemChanged

private void destinationItemChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_destinationItemChanged
// TODO add your handling code here:
        d.setValid(isPanelValid());
}//GEN-LAST:event_destinationItemChanged

private void requestMsgItemChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_requestMsgItemChanged
// TODO add your handling code here:
    d.setValid(isPanelValid());
}//GEN-LAST:event_requestMsgItemChanged

private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
// TODO add your handling code here:
    String jndiStr = JndiBrowser.popupJndiBrowserDialog(project, JndiBrowser.Category.CONNECTOR_RESOURCE);
    if (jndiStr != null && jndiStr.length() > 0) {
        connectionFactoryComboBoxModel.addElement(jndiStr);
        connectionFactComboBox.setSelectedIndex(connectionFactComboBox.getItemCount() - 1);
    }
}//GEN-LAST:event_browseButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JComboBox connectionFactComboBox;
    private javax.swing.JLabel connectionFactLabel;
    private javax.swing.JComboBox destinationComboBox;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JComboBox methodComboBox;
    private javax.swing.JLabel methodLabel;
    private javax.swing.JComboBox requestMsgComboBox;
    private javax.swing.JLabel requestMsgLabel;
    private javax.swing.JLabel timeoutLabel;
    private javax.swing.JSpinner timeoutSpinner;
    // End of variables declaration//GEN-END:variables

    public void setDialogDescriptor(DialogDescriptor d) {
        this.d = d;
        Scope scope = javacTreeModel.getCompilationInfo().getTreeUtilities().scopeFor(caretPosition);
        if (scope != null) {
            ExecutableElement enclosingMethod = scope.getEnclosingMethod();
            if (enclosingMethod != null) {
                int index = methodComboBoxModel.getMethodIndexOf(enclosingMethod);
                methodComboBox.setSelectedIndex(index);
            }
        }
        if (connectionFactComboBox.getItemCount() > 0) {
            connectionFactComboBox.setSelectedIndex(0);
        }
        if (destinationComboBox.getItemCount() > 0) {
            destinationComboBox.setSelectedIndex(0);
        }
        if (timeoutSpinner.getModel() instanceof SpinnerNumberModel) {
            ((SpinnerNumberModel) timeoutSpinner.getModel()).setValue(1000);
            ((SpinnerNumberModel) timeoutSpinner.getModel()).setMinimum(0);
        }

    }


    class MethodComboBoxModel extends DefaultComboBoxModel {

        private List<ExecutableElement> data = new ArrayList<ExecutableElement> ();

        public MethodComboBoxModel() {
            for (ExecutableElement method : javacTreeModel.getMethods()) {
                if (method.getSimpleName().toString().startsWith("_invoke_")) {  // NOI18N
                    continue;
                }
                data.add(method);
            }
        }

        @Override
        public Object getElementAt(int index) {
            ExecutableElement method = data.get(index);
            String str = method.getReturnType().toString() + " " + method.getSimpleName().toString() + " (";  // NOI18N
            for (int i = 0; i < method.getParameters().size(); i++) {
                VariableElement variable = method.getParameters().get(i);
                str = str + variable.asType().toString() + " " + variable.getSimpleName().toString();  // NOI18N
                if (i != method.getParameters().size() - 1) {
                    str = str + ", ";  // NOI18N
                }
            }
            str = str + ")";  // NOI18N
            return str;
        }

        @Override
        public int getSize() {
            return data.size();
        }

        public int getMethodIndexOf(ExecutableElement method) {
            return data.indexOf(method);
        }

        public ExecutableElement getMethodAt(int index) {
            return (index < 0) ? null : data.get(index);
        }
    }

    class ConnectionFactoryComboBoxModel extends DefaultComboBoxModel {

        private List<VarToJndiStruct> data = new ArrayList<VarToJndiStruct> ();

        public ConnectionFactoryComboBoxModel() {
            Elements elements = javacTreeModel.getCompilationInfo().getElements();
            Types types = javacTreeModel.getCompilationInfo().getTypes();
            TypeMirror connFactType = elements.getTypeElement("javax.jms.ConnectionFactory").asType();  // NOI18N
            for (VariableElement variableElement : javacTreeModel.getVariables()) {
                if (types.isAssignable(variableElement.asType(), connFactType)) {
                    AnnotationMirror annoMirror = GeneratorUtil.findAnnotation(variableElement, "javax.annotation.Resource");  // NOI18N
                    if (annoMirror != null) {
                        AnnotationValue annoValue = GeneratorUtil.getAnnotationAttrValue(annoMirror, "name");  // NOI18N
                        if (annoValue != null) {
                            VarToJndiStruct struct = new VarToJndiStruct(variableElement,
                                    annoValue.getValue().toString());
                            data.add(struct);
                            continue;
                        }
                    }
                }
            }
        }

        @Override
        public void addElement(Object obj) {
            String jndiName = (String) obj;
            for (VarToJndiStruct struct : data) {
                if (jndiName.equals(struct.jndiName)) {
                    return;
                }
            }
            data.add(new VarToJndiStruct(null, jndiName));
            this.fireContentsChanged(this, 0, data.size() - 1);
        }

        @Override
        public Object getElementAt(int index) {
            return data.get(index).jndiName;
        }

        @Override
        public int getSize() {
            return data.size();
        }

        public VarToJndiStruct getVariableAt(int index) {
            return data.get(index);
        }

    }

    class ConnFactComboBoxEditor extends BasicComboBoxEditor implements DocumentListener {

        public ConnFactComboBoxEditor() {
            this.editor.getDocument().addDocumentListener(this);
        }

        public void insertUpdate(DocumentEvent e) {
            changeUpdate();
        }

        public void removeUpdate(DocumentEvent e) {
            changeUpdate();
        }

        public void changedUpdate(DocumentEvent e) {
            changeUpdate();
        }

        private void changeUpdate() {
            connectionFactComboBox.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
        }
    }

    class RequestMessageComboBoxModel extends DefaultComboBoxModel {
        private List<VariableTree> data = new ArrayList<VariableTree> ();

        public RequestMessageComboBoxModel() {

        }

        public void setMethodElement(ExecutableElement method) {
            data.clear();
            Elements elements = javacTreeModel.getCompilationInfo().getElements();
            Types types = javacTreeModel.getCompilationInfo().getTypes();
            Trees trees = javacTreeModel.getCompilationInfo().getTrees();
            TypeMirror msgType = elements.getTypeElement("javax.jms.Message").asType();  // NOI18N
            TreePath methodTreePath = trees.getPath(method);
            for (VariableTree variableTree : GeneratorUtil.getMethodLevelVariables(methodTreePath)) {
                TreePath variablePath = TreePath.getPath(methodTreePath, variableTree.getType());
                if (types.isAssignable(trees.getTypeMirror(variablePath), msgType)) {
                    data.add(variableTree);
                }
            }
        }

        @Override
        public Object getElementAt(int index) {
            return data.get(index).getName().toString();
        }

        @Override
        public int getSize() {
            return data.size();
        }

        public String getVariableNameAt(int index) {
            return data.get(index).getName().toString();
        }
    }

    class RequestDestinationComboBoxModel extends DefaultComboBoxModel {
        private List<VarToJndiStruct> data = new ArrayList<VarToJndiStruct> ();

        public RequestDestinationComboBoxModel() {
            Elements elements = javacTreeModel.getCompilationInfo().getElements();
            Types types = javacTreeModel.getCompilationInfo().getTypes();
            TypeMirror destType = elements.getTypeElement("javax.jms.Destination").asType();  // NOI18N
            for (VariableElement variableElement : javacTreeModel.getVariables()) {
                if (types.isAssignable(variableElement.asType(), destType)) {
                    AnnotationMirror annoMirror = GeneratorUtil.findAnnotation(variableElement, "javax.annotation.Resource");  // NOI18N
                    if (annoMirror != null) {
                        AnnotationValue annoValue = GeneratorUtil.getAnnotationAttrValue(annoMirror, "mappedName");  // NOI18N
                        if (annoValue != null) {
                            VarToJndiStruct struct = new VarToJndiStruct(variableElement,
                                    annoValue.getValue().toString());
                            data.add(struct);
                            continue;
                        }
                    }
                }
            }
        }

        @Override
        public Object getElementAt(int index) {
            return data.get(index).jndiName;
        }

        @Override
        public int getSize() {
            return data.size();
        }

        public String getVariableNameAt(int index) {
            return data.get(index).variable.getSimpleName().toString();
        }
    }

    public static class VarToJndiStruct {
        public VariableElement variable;
        public String jndiName;

        public VarToJndiStruct(VariableElement variable, String jndiName) {
            this.variable = variable;
            this.jndiName = jndiName;
        }
    }

    private boolean isPanelValid() {
        if (methodComboBox.getSelectedIndex() == -1) {
            errorLabel.setText(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.validationmsg.must_select_method"));
            return false;
        }
        if (requestMsgComboBox.getSelectedIndex() == -1) {
            errorLabel.setText(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.validationmsg.must_select_msg"));
            return false;
        }
        if (destinationComboBox.getSelectedIndex() == -1) {
            errorLabel.setText(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.validationmsg.must_select_destination"));
            return false;
        }
        String selectedConnFact = (String) connectionFactComboBox.getSelectedItem();
        if (selectedConnFact == null || selectedConnFact.trim().length() == 0) {
            errorLabel.setText(org.openide.util.NbBundle.getMessage(RequestReplyPanel.class, "RequestReplyPanel.validationmsg.must_select_connfact"));
            return false;
        }
        errorLabel.setText(null);
        return true;
    }

    private void changeUpdate() {
        d.setValid(isPanelValid());
    }

    public void insertUpdate(DocumentEvent e) {
        changeUpdate();
    }
    public void removeUpdate(DocumentEvent e) {
        changeUpdate();
    }
    public void changedUpdate(DocumentEvent e) {
        changeUpdate();
    }

    // start getter methods here
    public ElementHandle getMethodHandle() {
        return ElementHandle.create(methodComboBoxModel.getMethodAt(methodComboBox.getSelectedIndex()));
    }

    public String getRequestMessageVariableName() {
        return requestMsgComboBoxModel.getVariableNameAt(requestMsgComboBox.getSelectedIndex());
    }

    public VarToJndiStruct getConnectionFactoryVariable() {
        if (connectionFactComboBox.getSelectedIndex() == -1) {
            return new VarToJndiStruct(null, ((String) connectionFactComboBox.getSelectedItem()).trim());
        } else {
            return connectionFactoryComboBoxModel.getVariableAt(connectionFactComboBox.getSelectedIndex());
        }
    }

    public String getRequestDestinationVariableName() {
        return requestDestinationComboBoxModel.getVariableNameAt(destinationComboBox.getSelectedIndex());
    }

    public long getReplyTimeout() {
        return ((Number) timeoutSpinner.getValue()).longValue();
    }

    // end getter methods
}

/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.soa.jca.jms.ui;

import org.netbeans.modules.soa.jca.base.generator.api.JndiBrowser;
import org.netbeans.modules.soa.jca.base.spi.InboundConfigCustomPanel;
import javax.swing.SpinnerNumberModel;
import org.netbeans.api.project.Project;

/**
 *
 * @author  echou
 */
public class JMSActivationPanel extends InboundConfigCustomPanel {

    private Project project;

    /** Creates new form JMSActivationPanel */
    public JMSActivationPanel(Project project, String contextName) {
        this.project = project;

        initComponents();

        // set component names for easier testability
        poolJndiTextField.setName("poolJndiTxt"); // NOI18N
        destinationTextField.setName("destTxt"); // NOI18N


        // radio buttons
        destinationTypeQueueRadioButton.setSelected(true);
        destinationTypeButtonGroup.add(destinationTypeQueueRadioButton);
        destinationTypeButtonGroup.add(destinationTypeTopicRadioButton);

        durableRadioButton.setSelected(true);
        subscriptionButtonGroup.add(durableRadioButton);
        subscriptionButtonGroup.add(nondurableRadioButton);

        actionNoneRadioButton.setSelected(true);
        redeliveryActionButtonGroup.add(actionNoneRadioButton);
        redeliveryActionButtonGroup.add(actionMoveRadioButton);
        redeliveryActionButtonGroup.add(actionDeleteRadioButton);

        moveToQueueRadioButton.setSelected(true);
        moveToButtonGroup.add(moveToQueueRadioButton);
        moveToButtonGroup.add(moveToTopicRadioButton);

        // spinners
        if (concurrencySizeSpinner.getModel() instanceof SpinnerNumberModel) {
            ((SpinnerNumberModel) concurrencySizeSpinner.getModel()).setValue(1);
            ((SpinnerNumberModel) concurrencySizeSpinner.getModel()).setMinimum(1);
        }
        /*
        if (batchSizeSpinner.getModel() instanceof SpinnerNumberModel) {
            ((SpinnerNumberModel) batchSizeSpinner.getModel()).setValue(1);
            ((SpinnerNumberModel) batchSizeSpinner.getModel()).setMinimum(1);
        }
         */

        if (moveDeleteAfterSpinner.getModel() instanceof SpinnerNumberModel) {
            ((SpinnerNumberModel) moveDeleteAfterSpinner.getModel()).setValue(1);
            ((SpinnerNumberModel) moveDeleteAfterSpinner.getModel()).setMinimum(1);
        }

        // combobox
        concurrencyModeComboBox.setSelectedIndex(-1);
        concurrencyModeComboBox.setSelectedIndex(0);

        // checkbox
        //batchCheckBox.setSelected(false);

        durableTextField.setText(contextName + "-Sub"); // NOI18N
        contextNameTextField.setText(contextName + "-Context"); // NOI18N
        mbeanNameTextField.setText("User:Name=" + contextName + "-MBean"); // NOI18N

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        destinationTypeButtonGroup = new javax.swing.ButtonGroup();
        concurrencyButtonGroup = new javax.swing.ButtonGroup();
        subscriptionButtonGroup = new javax.swing.ButtonGroup();
        redeliveryActionButtonGroup = new javax.swing.ButtonGroup();
        moveToButtonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        generalPanel = new javax.swing.JPanel();
        generalPropertiesPanel = new javax.swing.JPanel();
        poolJndiLabel = new javax.swing.JLabel();
        destinationLabel = new javax.swing.JLabel();
        destinationTypeLabel = new javax.swing.JLabel();
        selectorLabel = new javax.swing.JLabel();
        concurrencyLabel = new javax.swing.JLabel();
        poolJndiTextField = new javax.swing.JTextField();
        poolJndiButton = new javax.swing.JButton();
        destinationTextField = new javax.swing.JTextField();
        selectorTextField = new javax.swing.JTextField();
        destinationButton = new javax.swing.JButton();
        jpnlDestination = new javax.swing.JPanel();
        destinationTypeQueueRadioButton = new javax.swing.JRadioButton();
        destinationTypeTopicRadioButton = new javax.swing.JRadioButton();
        jpnlConcurrency = new javax.swing.JPanel();
        concurrencyModeComboBox = new javax.swing.JComboBox();
        concurrencySizeLabel = new javax.swing.JLabel();
        concurrencySizeSpinner = new javax.swing.JSpinner();
        topicPanel = new javax.swing.JPanel();
        subscriptionLabel = new javax.swing.JLabel();
        durableRadioButton = new javax.swing.JRadioButton();
        nondurableRadioButton = new javax.swing.JRadioButton();
        durableTextField = new javax.swing.JTextField();
        clientIdLabel = new javax.swing.JLabel();
        clientIdTextField = new javax.swing.JTextField();
        redeliveryPanel = new javax.swing.JPanel();
        redeliveryHandlingPanel = new javax.swing.JPanel();
        delayLabel = new javax.swing.JLabel();
        moveDeleteAfterLabel = new javax.swing.JLabel();
        actionLabel = new javax.swing.JLabel();
        moveToQueueTopicLabel = new javax.swing.JLabel();
        moveToDestinationLabel = new javax.swing.JLabel();
        moveToDestinationTextField = new javax.swing.JTextField();
        delayTextField = new javax.swing.JTextField();
        moveToDestButton = new javax.swing.JButton();
        jpnlTermination = new javax.swing.JPanel();
        actionNoneRadioButton = new javax.swing.JRadioButton();
        actionMoveRadioButton = new javax.swing.JRadioButton();
        actionDeleteRadioButton = new javax.swing.JRadioButton();
        jpnlMoveDeleteAfter = new javax.swing.JPanel();
        moveDeleteAfterSpinner = new javax.swing.JSpinner();
        timesLabel = new javax.swing.JLabel();
        jpnlMoveQueueTopic = new javax.swing.JPanel();
        moveToQueueRadioButton = new javax.swing.JRadioButton();
        moveToTopicRadioButton = new javax.swing.JRadioButton();
        advancedPanel = new javax.swing.JPanel();
        diagnosticsPanel = new javax.swing.JPanel();
        contextNameLabel = new javax.swing.JLabel();
        mbeanNameLabel = new javax.swing.JLabel();
        contextNameTextField = new javax.swing.JTextField();
        mbeanNameTextField = new javax.swing.JTextField();
        advancedOptionsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        advancedOptionsTextArea = new javax.swing.JTextArea();

        jTabbedPane1.setAutoscrolls(true);

        generalPanel.setLayout(new java.awt.GridBagLayout());

        generalPropertiesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.generalPropertiesPanel.border.title"))); // NOI18N
        generalPropertiesPanel.setLayout(new java.awt.GridBagLayout());

        poolJndiLabel.setLabelFor(poolJndiTextField);
        org.openide.awt.Mnemonics.setLocalizedText(poolJndiLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.poolJndiLabel.text")); // NOI18N
        poolJndiLabel.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.poolJndiLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(poolJndiLabel, gridBagConstraints);

        destinationLabel.setLabelFor(destinationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(destinationLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationLabel.text")); // NOI18N
        destinationLabel.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(destinationLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(destinationTypeLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationTypeLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(destinationTypeLabel, gridBagConstraints);
        destinationTypeLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationTypeLabel.AccessibleContext.accessibleDescription")); // NOI18N

        selectorLabel.setLabelFor(selectorTextField);
        org.openide.awt.Mnemonics.setLocalizedText(selectorLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.selectorLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(selectorLabel, gridBagConstraints);
        selectorLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.selectorLabel.AccessibleContext.accessibleDescription")); // NOI18N

        concurrencyLabel.setLabelFor(concurrencyModeComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(concurrencyLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.concurrencyLabel.text")); // NOI18N
        concurrencyLabel.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.concurrencyLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(concurrencyLabel, gridBagConstraints);

        poolJndiTextField.setText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.poolJndiTextField.text")); // NOI18N
        poolJndiTextField.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.poolJndiLabel.toolTipText")); // NOI18N
        poolJndiTextField.setPreferredSize(new java.awt.Dimension(35, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(poolJndiTextField, gridBagConstraints);
        poolJndiTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.poolJndiTextField.AccessibleContext.accessibleName")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(poolJndiButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.poolJndiButton.text")); // NOI18N
        poolJndiButton.setMaximumSize(new java.awt.Dimension(23, 23));
        poolJndiButton.setMinimumSize(new java.awt.Dimension(23, 23));
        poolJndiButton.setPreferredSize(new java.awt.Dimension(23, 23));
        poolJndiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseConnectionPoolJndi(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(poolJndiButton, gridBagConstraints);
        poolJndiButton.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.poolJndiButton.AccessibleContext.accessibleName")); // NOI18N
        poolJndiButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.poolJndiButton.AccessibleContext.accessibleDescription")); // NOI18N

        destinationTextField.setText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationTextField.text")); // NOI18N
        destinationTextField.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationLabel.toolTipText")); // NOI18N
        destinationTextField.setPreferredSize(new java.awt.Dimension(35, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(destinationTextField, gridBagConstraints);
        destinationTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationTextField.AccessibleContext.accessibleName")); // NOI18N

        selectorTextField.setText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.selectorTextField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(selectorTextField, gridBagConstraints);
        selectorTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.selectorTextField.AccessibleContext.accessibleName")); // NOI18N
        selectorTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.selectorTextField.AccessibleContext.accessibleDescription")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(destinationButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationButton.text")); // NOI18N
        destinationButton.setMaximumSize(new java.awt.Dimension(23, 23));
        destinationButton.setMinimumSize(new java.awt.Dimension(23, 23));
        destinationButton.setPreferredSize(new java.awt.Dimension(23, 23));
        destinationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseDestinationJndi(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(destinationButton, gridBagConstraints);
        destinationButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationButton.AccessibleContext.accessibleDescription")); // NOI18N

        jpnlDestination.setLayout(new javax.swing.BoxLayout(jpnlDestination, javax.swing.BoxLayout.X_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(destinationTypeQueueRadioButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationTypeQueueRadioButton.text")); // NOI18N
        destinationTypeQueueRadioButton.setMargin(new java.awt.Insets(3, 3, 3, 3));
        destinationTypeQueueRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationTypeQueueRadioButtonActionPerformed(evt);
            }
        });
        destinationTypeQueueRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                destinationTypeChanged(evt);
            }
        });
        jpnlDestination.add(destinationTypeQueueRadioButton);
        destinationTypeQueueRadioButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationTypeQueueRadioButton.AccessibleContext.accessibleDescription")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(destinationTypeTopicRadioButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationTypeTopicRadioButton.text")); // NOI18N
        destinationTypeTopicRadioButton.setMargin(new java.awt.Insets(3, 3, 3, 3));
        destinationTypeTopicRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                destinationTypeChanged(evt);
            }
        });
        jpnlDestination.add(destinationTypeTopicRadioButton);
        destinationTypeTopicRadioButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.destinationTypeTopicRadioButton.AccessibleContext.accessibleDescription")); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(jpnlDestination, gridBagConstraints);
        jpnlDestination.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.jpnlDestination.AccessibleContext.accessibleName")); // NOI18N
        jpnlDestination.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "ASD_DestPnl")); // NOI18N

        jpnlConcurrency.setLayout(new java.awt.GridBagLayout());

        concurrencyModeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "serial", "cc", "sync" }));
        concurrencyModeComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.concurrencyLabel.toolTipText")); // NOI18N
        concurrencyModeComboBox.setAlignmentX(0.0F);
        concurrencyModeComboBox.setMinimumSize(new java.awt.Dimension(75, 20));
        concurrencyModeComboBox.setPreferredSize(new java.awt.Dimension(100, 20));
        concurrencyModeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                concurrencyModeChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jpnlConcurrency.add(concurrencyModeComboBox, gridBagConstraints);

        concurrencySizeLabel.setLabelFor(concurrencySizeSpinner);
        org.openide.awt.Mnemonics.setLocalizedText(concurrencySizeLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.concurrencySizeLabel.text")); // NOI18N
        concurrencySizeLabel.setAlignmentX(0.5F);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jpnlConcurrency.add(concurrencySizeLabel, gridBagConstraints);

        concurrencySizeSpinner.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.tt.concurrency")); // NOI18N
        concurrencySizeSpinner.setMinimumSize(new java.awt.Dimension(35, 20));
        concurrencySizeSpinner.setPreferredSize(new java.awt.Dimension(55, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jpnlConcurrency.add(concurrencySizeSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPropertiesPanel.add(jpnlConcurrency, gridBagConstraints);
        jpnlConcurrency.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.jpnlConcurrency.AccessibleContext.accessibleName")); // NOI18N
        jpnlConcurrency.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.jpnlConcurrency.AccessibleContext.accessibleDescription")); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(generalPropertiesPanel, gridBagConstraints);
        generalPropertiesPanel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.generalPropertiesPanel.AccessibleContext.accessibleDescription")); // NOI18N

        topicPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.topicPanel.border.title"))); // NOI18N
        topicPanel.setLayout(new java.awt.GridBagLayout());

        subscriptionLabel.setLabelFor(durableTextField);
        org.openide.awt.Mnemonics.setLocalizedText(subscriptionLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.subscriptionLabel.text")); // NOI18N
        subscriptionLabel.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.subscriptionLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        topicPanel.add(subscriptionLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(durableRadioButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.durableRadioButton.text")); // NOI18N
        durableRadioButton.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.subscriptionLabel.toolTipText")); // NOI18N
        durableRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                durabilityChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        topicPanel.add(durableRadioButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(nondurableRadioButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.nondurableRadioButton.text")); // NOI18N
        nondurableRadioButton.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.subscriptionLabel.toolTipText")); // NOI18N
        nondurableRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                durabilityChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        topicPanel.add(nondurableRadioButton, gridBagConstraints);

        durableTextField.setText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.durableTextField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        topicPanel.add(durableTextField, gridBagConstraints);
        durableTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.durableTextField.AccessibleContext.accessibleName")); // NOI18N
        durableTextField.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.durableTextField.AccessibleContext.accessibleDescription")); // NOI18N

        clientIdLabel.setLabelFor(clientIdTextField);
        org.openide.awt.Mnemonics.setLocalizedText(clientIdLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.clientIdLabel.text")); // NOI18N
        clientIdLabel.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.clientIdLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        topicPanel.add(clientIdLabel, gridBagConstraints);

        clientIdTextField.setText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.clientIdTextField.text")); // NOI18N
        clientIdTextField.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.clientIdLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        topicPanel.add(clientIdTextField, gridBagConstraints);
        clientIdTextField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.clientIdTextField.AccessibleContext.accessibleName")); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(topicPanel, gridBagConstraints);
        topicPanel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.topicPanel.AccessibleContext.accessibleDescription")); // NOI18N

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.generalPanel.TabConstraints.tabTitle"), generalPanel); // NOI18N
        generalPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "a11y.name.generaltab")); // NOI18N
        generalPanel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.generalPanel.AccessibleContext.accessibleDescription")); // NOI18N

        redeliveryHandlingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.redeliveryHandlingPanel.border.title"))); // NOI18N
        redeliveryHandlingPanel.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "TT_RedeliveryHandlingPnl")); // NOI18N
        redeliveryHandlingPanel.setLayout(new java.awt.GridBagLayout());

        delayLabel.setLabelFor(delayTextField);
        org.openide.awt.Mnemonics.setLocalizedText(delayLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.delayLabel.text")); // NOI18N
        delayLabel.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.delayLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        redeliveryHandlingPanel.add(delayLabel, gridBagConstraints);

        moveDeleteAfterLabel.setLabelFor(moveDeleteAfterSpinner);
        org.openide.awt.Mnemonics.setLocalizedText(moveDeleteAfterLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.moveDeleteAfterLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        redeliveryHandlingPanel.add(moveDeleteAfterLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(actionLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.actionLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        redeliveryHandlingPanel.add(actionLabel, gridBagConstraints);

        moveToQueueTopicLabel.setDisplayedMnemonic('t');
        org.openide.awt.Mnemonics.setLocalizedText(moveToQueueTopicLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.moveToQueueTopicLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        redeliveryHandlingPanel.add(moveToQueueTopicLabel, gridBagConstraints);

        moveToDestinationLabel.setDisplayedMnemonic('s');
        moveToDestinationLabel.setLabelFor(moveToDestinationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(moveToDestinationLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.moveToDestinationLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        redeliveryHandlingPanel.add(moveToDestinationLabel, gridBagConstraints);

        moveToDestinationTextField.setText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.moveToDestinationTextField.text")); // NOI18N
        moveToDestinationTextField.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "TT_MoveToDestination")); // NOI18N
        moveToDestinationTextField.setMinimumSize(new java.awt.Dimension(54, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        redeliveryHandlingPanel.add(moveToDestinationTextField, gridBagConstraints);

        delayTextField.setText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.delayTextField.text")); // NOI18N
        delayTextField.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.delayLabel.toolTipText")); // NOI18N
        delayTextField.setMinimumSize(new java.awt.Dimension(50, 19));
        delayTextField.setPreferredSize(new java.awt.Dimension(100, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        redeliveryHandlingPanel.add(delayTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(moveToDestButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.moveToDestButton.text")); // NOI18N
        moveToDestButton.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "TT_MoveToDestination")); // NOI18N
        moveToDestButton.setMinimumSize(new java.awt.Dimension(23, 23));
        moveToDestButton.setPreferredSize(new java.awt.Dimension(23, 23));
        moveToDestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToDestActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        redeliveryHandlingPanel.add(moveToDestButton, gridBagConstraints);

        jpnlTermination.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(actionNoneRadioButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.actionNoneRadioButton.text")); // NOI18N
        actionNoneRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                redeliveryActionChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jpnlTermination.add(actionNoneRadioButton, gridBagConstraints);
        actionNoneRadioButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.actionNoneRadioButton.AccessibleContext.accessibleDescription")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(actionMoveRadioButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.actionMoveRadioButton.text")); // NOI18N
        actionMoveRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                redeliveryActionChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jpnlTermination.add(actionMoveRadioButton, gridBagConstraints);
        actionMoveRadioButton.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.actionMoveRadioButton.AccessibleContext.accessibleDescription")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(actionDeleteRadioButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.actionDeleteRadioButton.text")); // NOI18N
        actionDeleteRadioButton.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "TT_Redelivery_delete")); // NOI18N
        actionDeleteRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                redeliveryActionChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jpnlTermination.add(actionDeleteRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        redeliveryHandlingPanel.add(jpnlTermination, gridBagConstraints);

        jpnlMoveDeleteAfter.setLayout(new java.awt.GridBagLayout());

        moveDeleteAfterSpinner.setMinimumSize(new java.awt.Dimension(25, 20));
        moveDeleteAfterSpinner.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jpnlMoveDeleteAfter.add(moveDeleteAfterSpinner, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(timesLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.timesLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jpnlMoveDeleteAfter.add(timesLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        redeliveryHandlingPanel.add(jpnlMoveDeleteAfter, gridBagConstraints);

        jpnlMoveQueueTopic.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(moveToQueueRadioButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.moveToQueueRadioButton.text")); // NOI18N
        moveToQueueRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                moveActionChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jpnlMoveQueueTopic.add(moveToQueueRadioButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(moveToTopicRadioButton, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.moveToTopicRadioButton.text")); // NOI18N
        moveToTopicRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                moveActionChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jpnlMoveQueueTopic.add(moveToTopicRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        redeliveryHandlingPanel.add(jpnlMoveQueueTopic, gridBagConstraints);

        org.jdesktop.layout.GroupLayout redeliveryPanelLayout = new org.jdesktop.layout.GroupLayout(redeliveryPanel);
        redeliveryPanel.setLayout(redeliveryPanelLayout);
        redeliveryPanelLayout.setHorizontalGroup(
            redeliveryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, redeliveryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(redeliveryHandlingPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
        );
        redeliveryPanelLayout.setVerticalGroup(
            redeliveryPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(redeliveryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(redeliveryHandlingPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(175, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.redeliveryPanel.TabConstraints.tabTitle"), redeliveryPanel); // NOI18N
        redeliveryPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "a11y.name.redeliverytab")); // NOI18N

        advancedPanel.setLayout(new java.awt.GridBagLayout());

        diagnosticsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.diagnosticsPanel.border.title"))); // NOI18N
        diagnosticsPanel.setLayout(new java.awt.GridBagLayout());

        contextNameLabel.setLabelFor(contextNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(contextNameLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.contextNameLabel.text")); // NOI18N
        contextNameLabel.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.contextNameLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        diagnosticsPanel.add(contextNameLabel, gridBagConstraints);

        mbeanNameLabel.setLabelFor(mbeanNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(mbeanNameLabel, org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.mbeanNameLabel.text")); // NOI18N
        mbeanNameLabel.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.mbeanNameLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        diagnosticsPanel.add(mbeanNameLabel, gridBagConstraints);

        contextNameTextField.setText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.contextNameTextField.text")); // NOI18N
        contextNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.contextNameLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        diagnosticsPanel.add(contextNameTextField, gridBagConstraints);

        mbeanNameTextField.setText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.mbeanNameTextField.text")); // NOI18N
        mbeanNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.mbeanNameLabel.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        diagnosticsPanel.add(mbeanNameTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advancedPanel.add(diagnosticsPanel, gridBagConstraints);

        advancedOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.advancedOptionsPanel.border.title"))); // NOI18N

        advancedOptionsTextArea.setColumns(20);
        advancedOptionsTextArea.setRows(5);
        advancedOptionsTextArea.setText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.advancedOptionsTextArea.text")); // NOI18N
        advancedOptionsTextArea.setToolTipText(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.advancedOptionsTextArea.toolTipText")); // NOI18N
        jScrollPane1.setViewportView(advancedOptionsTextArea);
        advancedOptionsTextArea.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "a11y.name.advancedtextarea")); // NOI18N

        org.jdesktop.layout.GroupLayout advancedOptionsPanelLayout = new org.jdesktop.layout.GroupLayout(advancedOptionsPanel);
        advancedOptionsPanel.setLayout(advancedOptionsPanelLayout);
        advancedOptionsPanelLayout.setHorizontalGroup(
            advancedOptionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(advancedOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addContainerGap())
        );
        advancedOptionsPanelLayout.setVerticalGroup(
            advancedOptionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(advancedOptionsPanelLayout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advancedPanel.add(advancedOptionsPanel, gridBagConstraints);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.advancedPanel.TabConstraints.tabTitle"), advancedPanel); // NOI18N
        advancedPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "a11y.name.advancedtab")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "a11y.name.tabbedpane")); // NOI18N
        jTabbedPane1.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.jTabbedPane1.AccessibleContext.accessibleDescription")); // NOI18N

        getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "a11y.name.activationrootpanel")); // NOI18N
        getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(JMSActivationPanel.class, "JMSActivationPanel.AccessibleContext.accessibleDescription")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void browseConnectionPoolJndi(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseConnectionPoolJndi
        String jndiStr = JndiBrowser.popupJndiBrowserDialog(project, JndiBrowser.Category.CONNECTOR_RESOURCE);
        if (jndiStr != null) {
            poolJndiTextField.setText("lookup://" + jndiStr); // NOI18N
        }
    }//GEN-LAST:event_browseConnectionPoolJndi

    private void browseDestinationJndi(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseDestinationJndi
        String jndiStr = JndiBrowser.popupJndiBrowserDialog(project, JndiBrowser.Category.ADMIN_OBJECT);
        if (jndiStr != null) {
            destinationTextField.setText("lookup://" + jndiStr); // NOI18N
        }
    }//GEN-LAST:event_browseDestinationJndi

    private void destinationTypeChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_destinationTypeChanged
        revalidatePanel();
    }//GEN-LAST:event_destinationTypeChanged

    private void durabilityChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_durabilityChanged
        revalidatePanel();
    }//GEN-LAST:event_durabilityChanged

    private void redeliveryActionChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_redeliveryActionChanged
        revalidatePanel();
    }//GEN-LAST:event_redeliveryActionChanged

    private void concurrencyModeChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_concurrencyModeChanged
        revalidatePanel();
    }//GEN-LAST:event_concurrencyModeChanged

    private void moveActionChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_moveActionChanged
        revalidatePanel();
    }//GEN-LAST:event_moveActionChanged


    private void revalidatePanel() {
        // destinationTypeChanged()
        if (destinationTypeQueueRadioButton.isSelected()) {
            subscriptionLabel.setEnabled(false);
            durableRadioButton.setEnabled(false);
            nondurableRadioButton.setEnabled(false);
            durableTextField.setEnabled(false);
            clientIdLabel.setEnabled(false);
            clientIdTextField.setEnabled(false);
        } else {
            subscriptionLabel.setEnabled(true);
            durableRadioButton.setEnabled(true);
            nondurableRadioButton.setEnabled(true);
            durableTextField.setEnabled(true);
            clientIdLabel.setEnabled(true);
            clientIdTextField.setEnabled(true);
        }

        // durabilityChanged
        if (durableRadioButton.isEnabled() && durableRadioButton.isSelected()) {
            durableTextField.setEnabled(true);
        }
        if (nondurableRadioButton.isEnabled() && nondurableRadioButton.isSelected()) {
            durableTextField.setEnabled(false);
        }

        // redeliveryActionChanged
        if (actionNoneRadioButton.isSelected()) {
            moveDeleteAfterLabel.setEnabled(false);
            moveDeleteAfterSpinner.setEnabled(false);
            timesLabel.setEnabled(false);
            moveToQueueTopicLabel.setEnabled(false);
            moveToQueueRadioButton.setEnabled(false);
            moveToTopicRadioButton.setEnabled(false);
            moveToDestinationLabel.setEnabled(false);
            moveToDestinationTextField.setEnabled(false);
        } else if (actionMoveRadioButton.isSelected()) {
            moveDeleteAfterLabel.setEnabled(true);
            moveDeleteAfterSpinner.setEnabled(true);
            timesLabel.setEnabled(true);
            moveToQueueTopicLabel.setEnabled(true);
            moveToQueueRadioButton.setEnabled(true);
            moveToTopicRadioButton.setEnabled(true);
            moveToDestinationLabel.setEnabled(true);
            moveToDestinationTextField.setEnabled(true);
        } else {
            moveDeleteAfterLabel.setEnabled(true);
            moveDeleteAfterSpinner.setEnabled(true);
            timesLabel.setEnabled(true);
            moveToQueueTopicLabel.setEnabled(false);
            moveToQueueRadioButton.setEnabled(false);
            moveToTopicRadioButton.setEnabled(false);
            moveToDestinationLabel.setEnabled(false);
            moveToDestinationTextField.setEnabled(false);
        }

        // concurrencyModeChanged
        if (concurrencyModeComboBox.getSelectedIndex() == -1) {
            return;
        }
        String modeStr = (String) concurrencyModeComboBox.getSelectedItem();
        if (modeStr.equals("serial")) { // NOI18N
            concurrencySizeLabel.setEnabled(false);
            concurrencySizeSpinner.setEnabled(false);
        } else if (modeStr.equals("cc")) { // NOI18N
            concurrencySizeLabel.setEnabled(true);
            concurrencySizeSpinner.setEnabled(true);
        } else { // sync mode - Custom (sync)
            if (destinationTypeQueueRadioButton.isSelected()) {
                concurrencySizeLabel.setEnabled(true);
                concurrencySizeSpinner.setEnabled(true);
            } else {
                concurrencySizeLabel.setEnabled(false);
                concurrencySizeSpinner.setEnabled(false);
            }
        }

        // moveActionChanged
        if (actionMoveRadioButton.isSelected()) {
            moveToDestinationLabel.setEnabled(true);
            moveToDestinationTextField.setEnabled(true);
            moveToDestButton.setEnabled(true);
        } else {
            moveToDestinationLabel.setEnabled(false);
            moveToDestinationTextField.setEnabled(false);
            moveToDestButton.setEnabled(false);
        }
    }

private void moveToDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToDestActionPerformed
    String jndiStr = JndiBrowser.popupJndiBrowserDialog(project, JndiBrowser.Category.ADMIN_OBJECT);
    if (jndiStr != null) {
        moveToDestinationTextField.setText("lookup://" + jndiStr); // NOI18N
    }
}//GEN-LAST:event_moveToDestActionPerformed

private void destinationTypeQueueRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationTypeQueueRadioButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_destinationTypeQueueRadioButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton actionDeleteRadioButton;
    private javax.swing.JLabel actionLabel;
    private javax.swing.JRadioButton actionMoveRadioButton;
    private javax.swing.JRadioButton actionNoneRadioButton;
    private javax.swing.JPanel advancedOptionsPanel;
    private javax.swing.JTextArea advancedOptionsTextArea;
    private javax.swing.JPanel advancedPanel;
    private javax.swing.JLabel clientIdLabel;
    private javax.swing.JTextField clientIdTextField;
    private javax.swing.ButtonGroup concurrencyButtonGroup;
    private javax.swing.JLabel concurrencyLabel;
    private javax.swing.JComboBox concurrencyModeComboBox;
    private javax.swing.JLabel concurrencySizeLabel;
    private javax.swing.JSpinner concurrencySizeSpinner;
    private javax.swing.JLabel contextNameLabel;
    private javax.swing.JTextField contextNameTextField;
    private javax.swing.JLabel delayLabel;
    private javax.swing.JTextField delayTextField;
    private javax.swing.JButton destinationButton;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JTextField destinationTextField;
    private javax.swing.ButtonGroup destinationTypeButtonGroup;
    private javax.swing.JLabel destinationTypeLabel;
    private javax.swing.JRadioButton destinationTypeQueueRadioButton;
    private javax.swing.JRadioButton destinationTypeTopicRadioButton;
    private javax.swing.JPanel diagnosticsPanel;
    private javax.swing.JRadioButton durableRadioButton;
    private javax.swing.JTextField durableTextField;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JPanel generalPropertiesPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel jpnlConcurrency;
    private javax.swing.JPanel jpnlDestination;
    private javax.swing.JPanel jpnlMoveDeleteAfter;
    private javax.swing.JPanel jpnlMoveQueueTopic;
    private javax.swing.JPanel jpnlTermination;
    private javax.swing.JLabel mbeanNameLabel;
    private javax.swing.JTextField mbeanNameTextField;
    private javax.swing.JLabel moveDeleteAfterLabel;
    private javax.swing.JSpinner moveDeleteAfterSpinner;
    private javax.swing.ButtonGroup moveToButtonGroup;
    private javax.swing.JButton moveToDestButton;
    private javax.swing.JLabel moveToDestinationLabel;
    private javax.swing.JTextField moveToDestinationTextField;
    private javax.swing.JRadioButton moveToQueueRadioButton;
    private javax.swing.JLabel moveToQueueTopicLabel;
    private javax.swing.JRadioButton moveToTopicRadioButton;
    private javax.swing.JRadioButton nondurableRadioButton;
    private javax.swing.JButton poolJndiButton;
    private javax.swing.JLabel poolJndiLabel;
    private javax.swing.JTextField poolJndiTextField;
    private javax.swing.ButtonGroup redeliveryActionButtonGroup;
    private javax.swing.JPanel redeliveryHandlingPanel;
    private javax.swing.JPanel redeliveryPanel;
    private javax.swing.JLabel selectorLabel;
    private javax.swing.JTextField selectorTextField;
    private javax.swing.ButtonGroup subscriptionButtonGroup;
    private javax.swing.JLabel subscriptionLabel;
    private javax.swing.JLabel timesLabel;
    private javax.swing.JPanel topicPanel;
    // End of variables declaration//GEN-END:variables


    @Override
    public String isPanelValid() {
        return null;
    }

    @Override
    public void initFromInboundConfigData(InboundConfigData data) {
        // general tab
        String connectionURL = data.getActivationProperty("ConnectionURL"); // NOI18N
        poolJndiTextField.setText(connectionURL);

        String destination = data.getActivationProperty("Destination"); // NOI18N
        destinationTextField.setText(destination);

        String destinationType = data.getActivationProperty("DestinationType"); // NOI18N
        if (destinationType != null) {
            if (destinationType.equals("javax.jms.Queue")) { // NOI18N
                destinationTypeQueueRadioButton.setSelected(true);
            } else {
                destinationTypeTopicRadioButton.setSelected(true);
            }
        }

        String messageSelector = data.getActivationProperty("messageSelector"); // NOI18N
        selectorTextField.setText(messageSelector);

        String concurrencyMode = data.getActivationProperty("concurrencyMode"); // NOI18N
        if (concurrencyMode != null) {
            if (concurrencyMode.equals("serial")) { // NOI18N
                concurrencyModeComboBox.setSelectedIndex(0);
            } else if (concurrencyMode.equals("cc")) { // NOI18N
                concurrencyModeComboBox.setSelectedIndex(1);
            } else { //Custom (sync)
                concurrencyModeComboBox.setSelectedIndex(2);
            }
        }

        /*
        String batchSize = data.getActivationProperty("BatchSize"); // NOI18N
        if (batchSize != null) {
            long size = 0;
            try {
                size = Long.parseLong(batchSize);
            } catch (NumberFormatException nfe) {
            }
            batchSizeSpinner.setValue(size);
        }
         */

        // topic
        String subscriptionDurability = data.getActivationProperty("SubscriptionDurability"); // NOI18N
        if (subscriptionDurability != null) {
            if (subscriptionDurability.equals("Durable")) { // NOI18N
                durableRadioButton.setSelected(true);
            } else {
                nondurableRadioButton.setSelected(true);
            }
        }

        String subscriptionName = data.getActivationProperty("SubscriptionName"); // NOI18N
        if (subscriptionName != null) {
            durableTextField.setText(subscriptionName);
        }

        String clientId = data.getActivationProperty("ClientId"); // NOI18N
        if (clientId != null) {
            clientIdTextField.setText(clientId);
        }

        // redelivery tab
        String redeliveryHandling = data.getActivationProperty("RedeliveryHandling"); // NOI18N
        if (redeliveryHandling != null) {
            try {
                RedeliveryHandling parser = RedeliveryHandling.parse(redeliveryHandling);
                StringBuilder sb = new StringBuilder();
                for (RedeliveryHandling.Action action : parser.getActions()) {
                    if (action.actionType == RedeliveryHandling.ActionType.DELAY) {
                        sb.append(action.timesSeen + ":" + action.delayTimeInMillis + ";"); // NOI18N
                    } else if (action.actionType == RedeliveryHandling.ActionType.DELETE) {
                        actionDeleteRadioButton.setSelected(true);
                        moveDeleteAfterSpinner.setValue(action.timesSeen);
                    } else {
                        actionMoveRadioButton.setSelected(true);
                        moveDeleteAfterSpinner.setValue(action.timesSeen);
                        if (action.moveType == RedeliveryHandling.MoveType.QUEUE) {
                            moveToQueueRadioButton.setSelected(true);
                            moveToDestinationTextField.setText(action.moveDestinationName);
                        } else if (action.moveType == RedeliveryHandling.MoveType.TOPIC) {
                            moveToTopicRadioButton.setSelected(true);
                            moveToDestinationTextField.setText(action.moveDestinationName);
                        }
                    }
                }
                delayTextField.setText(sb.toString());
            } catch (Exception e) {

            }
        }


        // advanced tab
        String contextName = data.getActivationProperty("ContextName"); // NOI18N
        if (contextName != null) {
            contextNameTextField.setText(contextName);
        }

        String mBeanName = data.getActivationProperty("MBeanName"); // NOI18N
        if (mBeanName != null) {
            mbeanNameTextField.setText(mBeanName);
        }

        String options = data.getActivationProperty("Options"); // NOI18N
        if (options != null) {
            advancedOptionsTextArea.setText(options);
        }

        // ejb config
        String endpointPoolMaxSize = data.getActivationProperty("EndpointPoolMaxSize"); // NOI18N
        if (endpointPoolMaxSize != null) {
            long size = 0;
            try {
                size = Long.parseLong(endpointPoolMaxSize);
            } catch (NumberFormatException nfe) {
            }
            concurrencySizeSpinner.setValue(size);
        }

    }

    @Override
    public void storeToInboundConfigData(InboundConfigData data) {
        // general tab
        data.addActivationProperty("ConnectionURL", poolJndiTextField.getText().trim()); // NOI18N
        data.addActivationProperty("Destination", destinationTextField.getText().trim()); // NOI18N

        if (destinationTypeQueueRadioButton.isSelected()) {
            data.addActivationProperty("DestinationType", "javax.jms.Queue"); // NOI18N
        } else {
            data.addActivationProperty("DestinationType", "javax.jms.Topic"); // NOI18N
        }

        data.addActivationProperty("messageSelector", selectorTextField.getText().trim()); // NOI18N

        data.addActivationProperty("concurrencyMode", (String) concurrencyModeComboBox.getSelectedItem()); // NOI18N

        /*
        if (batchSizeSpinner.isEnabled()) {
            data.addActivationProperty("BatchSize", ((Number) batchSizeSpinner.getValue()).toString()); // NOI18N
        } else {
            data.addActivationProperty("BatchSize", "0"); // NOI18N
        }
         */

        // topic
        if (durableRadioButton.isEnabled() && durableRadioButton.isSelected()) {
            data.addActivationProperty("SubscriptionDurability", "Durable"); // NOI18N
        } else if (nondurableRadioButton.isEnabled() && nondurableRadioButton.isSelected()) {
            data.addActivationProperty("SubscriptionDurability", "NonDurable"); // NOI18N
        }

        if (durableTextField.isEnabled()) {
            data.addActivationProperty("SubscriptionName", durableTextField.getText().trim()); // NOI18N
        }

        if (clientIdTextField.isEnabled()) {
            data.addActivationProperty("ClientId", clientIdTextField.getText().trim()); // NOI18N
        }

        // redelivery tab
        String redeliveryStr = delayTextField.getText() == null ? "" : delayTextField.getText().trim(); // NOI18N
        if (redeliveryStr.length() > 0 && !redeliveryStr.endsWith(";")) { // NOI18N
            redeliveryStr = redeliveryStr + ";"; // NOI18N
        }
        String timesStr = ((Number) moveDeleteAfterSpinner.getValue()).toString();
        if (actionMoveRadioButton.isSelected()) {
            String destStr = moveToDestinationTextField.getText() == null ? "" : moveToDestinationTextField.getText().trim(); // NOI18N
            if (moveToQueueRadioButton.isSelected()) {
                redeliveryStr = redeliveryStr + timesStr + ":move(queue:" + destStr + ")"; // NOI18N
            } else if (moveToTopicRadioButton.isSelected()) {
                redeliveryStr = redeliveryStr + timesStr + ":move(topic:" + destStr + ")"; // NOI18N
            } else {
                redeliveryStr = redeliveryStr + timesStr + ":move(same)"; // NOI18N
            }
        } else if (actionDeleteRadioButton.isSelected()) {
            redeliveryStr = redeliveryStr + timesStr + ":delete"; // NOI18N
        }
        data.addActivationProperty("RedeliveryHandling", redeliveryStr); // NOI18N

        // advanced tab
        data.addActivationProperty("ContextName", contextNameTextField.getText().trim()); // NOI18N
        data.addActivationProperty("MBeanName", mbeanNameTextField.getText().trim()); // NOI18N
        data.addActivationProperty("Options", advancedOptionsTextArea.getText().trim()); // NOI18N

        // ejb config
        if (concurrencySizeSpinner.isEnabled()) {
            data.setMaxPoolSize(((Number) concurrencySizeSpinner.getValue()).intValue());
            data.addActivationProperty("EndpointPoolMaxSize", ((Number) concurrencySizeSpinner.getValue()).toString()); // NOI18N
        } else {
            data.setMaxPoolSize(1);
            data.addActivationProperty("EndpointPoolMaxSize", "1"); // NOI18N
        }
        data.setResizeQuantity(1);
    }

}
